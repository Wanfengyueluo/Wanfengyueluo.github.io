<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>剑指Offer系列</title>
      <link href="2022/04/06/jian-zhi-offer-xi-lie/"/>
      <url>2022/04/06/jian-zhi-offer-xi-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指Offer系列题解"><a href="#剑指Offer系列题解" class="headerlink" title="剑指Offer系列题解"></a>剑指Offer系列题解</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="1-数组中重复的数字"><a href="#1-数组中重复的数字" class="headerlink" title="1 数组中重复的数字"></a>1 数组中重复的数字</h3><blockquote><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/</a></p></blockquote><h4 id="解一"><a href="#解一" class="headerlink" title="解一"></a>解一</h4><p>数组排序后遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]){</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度为 O(nlogn) </p><h4 id="解二"><a href="#解二" class="headerlink" title="解二"></a>解二</h4><p>使用哈希表</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (set.contains(nums[i])) {</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度为O(n)，空间复杂度为O(n)</p><h4 id="解三"><a href="#解三" class="headerlink" title="解三"></a>解三</h4><p>使用原地重排数组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">while</span> (nums[i] != i) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[nums[i]]) {</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> tmp = nums[nums[i]];</span><br><span class="line">            nums[nums[i]] = nums[i];</span><br><span class="line">            nums[i] = tmp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>时间复杂度O(n)，空间复杂度O(1)</p><h3 id="2-不修改数组找出重复的数字"><a href="#2-不修改数组找出重复的数字" class="headerlink" title="2 不修改数组找出重复的数字"></a>2 不修改数组找出重复的数字</h3><blockquote><p>保留</p></blockquote><h3 id="3-二维数组中的查找"><a href="#3-二维数组中的查找" class="headerlink" title="3 二维数组中的查找"></a>3 二维数组中的查找</h3><blockquote><p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/</a></p></blockquote><h4 id="解一-1"><a href="#解一-1" class="headerlink" title="解一"></a>解一</h4><p>从左下往上搜索，小于目标值，往右，大于目标值，往上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> m = matrix.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m &gt;= <span class="number">0</span> &amp;&amp; j &lt; matrix[<span class="number">0</span>].length) {</span><br><span class="line">        <span class="keyword">if</span> (target &lt; matrix[m][j]) {</span><br><span class="line">            m--;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; matrix[m][j]) {</span><br><span class="line">            j++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解二-1"><a href="#解二-1" class="headerlink" title="解二"></a>解二</h4><p>从右上往下搜索，大于目标值，往左，小于目标值，往下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> j = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (m &lt; matrix.length &amp;&amp; j &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span> (target &lt; matrix[m][j]) {</span><br><span class="line">            j--;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; matrix[m][j]) {</span><br><span class="line">            m++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="4-替换空格"><a href="#4-替换空格" class="headerlink" title="4 替换空格"></a>4 替换空格</h3><blockquote><p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/</a></p></blockquote><h4 id="解一-2"><a href="#解一-2" class="headerlink" title="解一"></a>解一</h4><p>遍历字符串，使用StringBuilder拼接字符</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>{</span><br><span class="line">    StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">        <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">' '</span>) {</span><br><span class="line">            res.append(<span class="string">"%20"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            res.append(c);</span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解二-2"><a href="#解二-2" class="headerlink" title="解二"></a>解二</h4><p>从后往前添加字符串</p><blockquote><p>【举一反三】<br>在合并两个数组（包括字符串）时，如果从前往后复制每个值需要重复移动值，那么可以考虑从后往前复制，减少移动次数，提高效率。</p></blockquote><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="5-从尾到头打印链表"><a href="#5-从尾到头打印链表" class="headerlink" title="5 从尾到头打印链表"></a>5 从尾到头打印链表</h3><blockquote><p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/</a></p><p>在面试中，最好先问面试官是否允许修改输入的数据。</p></blockquote><h4 id="解一-3"><a href="#解一-3" class="headerlink" title="解一"></a>解一</h4><p>使用先进后出的数据结构【栈】</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) {</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        stack.push(cur);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[stack.size()];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">        res[index++] = stack.pop().val;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解二-3"><a href="#解二-3" class="headerlink" title="解二"></a>解二</h4><p>反转链表</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) {</span><br><span class="line">    <span class="comment">// 头插法反转链表</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        ListNode next = cur.next;</span><br><span class="line">        cur.next = dummy.next;</span><br><span class="line">        dummy.next = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">        size++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">    cur = dummy.next;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        res[size++] = cur.val;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解三-1"><a href="#解三-1" class="headerlink" title="解三"></a>解三</h4><p>递归反转链表（修改输入数据）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) {</span><br><span class="line">    ListNode dummy = reverseListNode(head);</span><br><span class="line">    ListNode cur = dummy;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        size++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">    cur = dummy;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        res[size++] = cur.val;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseListNode</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    ListNode next = reverseListNode(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="6-重建二叉树"><a href="#6-重建二叉树" class="headerlink" title="6 重建二叉树"></a>6 重建二叉树</h3><h4 id="解一-4"><a href="#解一-4" class="headerlink" title="解一"></a>解一</h4><p>根据先序遍历找根节点，然后根据根节点在中序遍历中划分左右子树</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>{</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (preorder.length == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++) {</span><br><span class="line">        map.put(inorder[i], i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> helper(preorder, <span class="number">0</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>, map);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> pStart, <span class="keyword">int</span> iStart, <span class="keyword">int</span> iEnd, Map&lt;Integer, Integer&gt; map)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (pStart &gt;= preorder.length || iStart &gt; iEnd) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> rootVal = preorder[pStart];</span><br><span class="line">    <span class="keyword">int</span> rootIndex = map.get(rootVal);</span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">    <span class="comment">// 左子树的长度为 rootIndex - iStart</span></span><br><span class="line">    <span class="comment">// 右子树的根索引为 pStart + (rootIndex - iStart) + 1</span></span><br><span class="line">    root.left = helper(preorder, pStart + <span class="number">1</span>, iStart, rootIndex - <span class="number">1</span>, map);</span><br><span class="line">    root.right = helper(preorder, pStart + (rootIndex - iStart) + <span class="number">1</span>, rootIndex + <span class="number">1</span>, iEnd, map);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="7-用两个栈实现队列"><a href="#7-用两个栈实现队列" class="headerlink" title="7 用两个栈实现队列"></a>7 用两个栈实现队列</h3><h4 id="解一-5"><a href="#解一-5" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; inStack;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; outStack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>{</span><br><span class="line">        inStack = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        outStack = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>{</span><br><span class="line">        inStack.push(value);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (outStack.isEmpty()) {</span><br><span class="line">            <span class="keyword">while</span> (!inStack.isEmpty()) {</span><br><span class="line">                outStack.push(inStack.poll());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> outStack.isEmpty() ? -<span class="number">1</span> : outStack.poll();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="8-用两个队列实现栈"><a href="#8-用两个队列实现栈" class="headerlink" title="8 用两个队列实现栈"></a>8 用两个队列实现栈</h3><h4 id="解一-6"><a href="#解一-6" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; inQueue;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; outQueue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>{</span><br><span class="line">        inQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        outQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接向队列1添加就行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        inQueue.add(x);</span><br><span class="line">        size++;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) {</span><br><span class="line">            outQueue.add(inQueue.remove());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> res = inQueue.remove();</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            inQueue.add(outQueue.remove());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> res = pop();</span><br><span class="line">        inQueue.add(res);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="递归和循环"><a href="#递归和循环" class="headerlink" title="递归和循环"></a>递归和循环</h2><h3 id="9-斐波那契数列"><a href="#9-斐波那契数列" class="headerlink" title="9 斐波那契数列"></a>9 斐波那契数列</h3><h4 id="解一-7"><a href="#解一-7" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">int</span> tmp = b % <span class="number">1000000007</span>;</span><br><span class="line">        b = (a % <span class="number">1000000007</span> + b % <span class="number">1000000007</span>) % <span class="number">1000000007</span>;</span><br><span class="line">        a = tmp;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-青蛙跳台阶问题"><a href="#10-青蛙跳台阶问题" class="headerlink" title="10 青蛙跳台阶问题"></a>10 青蛙跳台阶问题</h3><h4 id="解一-8"><a href="#解一-8" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">int</span> tmp = b % <span class="number">1000000007</span>;</span><br><span class="line">        b = (a % <span class="number">1000000007</span> + b % <span class="number">1000000007</span>) % <span class="number">1000000007</span>;</span><br><span class="line">        a = tmp;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="查找和排序"><a href="#查找和排序" class="headerlink" title="查找和排序"></a>查找和排序</h2><h3 id="11-旋转数组的最小数字"><a href="#11-旋转数组的最小数字" class="headerlink" title="11 旋转数组的最小数字"></a>11 旋转数组的最小数字</h3><h4 id="解一-9"><a href="#解一-9" class="headerlink" title="解一"></a>解一</h4><p>直接遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> minNumber = numbers[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &lt; minNumber) {</span><br><span class="line">            <span class="keyword">return</span> numbers[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> minNumber;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解二-4"><a href="#解二-4" class="headerlink" title="解二"></a>解二</h4><p>二分</p><p>不能用中间值与左值进行比较</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> len = numbers.length;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = len - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 第一次二分找到转折点</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (numbers[mid] &gt; numbers[r]) {</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (numbers[mid] == numbers[r]) {</span><br><span class="line">            r = r - <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            r = mid;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> numbers[l];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><h3 id="12-矩阵中的路径"><a href="#12-矩阵中的路径" class="headerlink" title="12 矩阵中的路径"></a>12 矩阵中的路径</h3><h4 id="解一-10"><a href="#解一-10" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span>[] wordArray = word.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) {</span><br><span class="line">            <span class="keyword">if</span> (dfs(board, wordArray, i, j, <span class="number">0</span>)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">    <span class="comment">// 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != word[k]) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (k == word.length - <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往四个方向继续走</span></span><br><span class="line">    <span class="comment">// mask当前值</span></span><br><span class="line">    board[i][j] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">boolean</span> res =  dfs(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word, i, j - <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">    board[i][j] = word[k];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="13-机器人的运动范围"><a href="#13-机器人的运动范围" class="headerlink" title="13 机器人的运动范围"></a>13 机器人的运动范围</h3><h4 id="解一-11"><a href="#解一-11" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        dfs(m, n, <span class="number">0</span>, <span class="number">0</span>, k, visited);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k, <span class="keyword">boolean</span>[][] visited)</span> </span>{</span><br><span class="line">        <span class="comment">// 剪枝</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= m || j &gt;= n || visited[i][j]) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (getSum(i) + getSum(j) &gt; k) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        res++;</span><br><span class="line">        dfs(m, n, i - <span class="number">1</span>, j, k, visited);</span><br><span class="line">        dfs(m, n, i + <span class="number">1</span>, j, k, visited);</span><br><span class="line">        dfs(m, n, i, j - <span class="number">1</span>, k, visited);</span><br><span class="line">        dfs(m, n, i, j + <span class="number">1</span>, k, visited);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i != <span class="number">0</span>) {</span><br><span class="line">            count += (i % <span class="number">10</span>);</span><br><span class="line">            i /= <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="动态规划和贪心算法"><a href="#动态规划和贪心算法" class="headerlink" title="动态规划和贪心算法"></a>动态规划和贪心算法</h2><h3 id="14-剪绳子"><a href="#14-剪绳子" class="headerlink" title="14 剪绳子"></a>14 剪绳子</h3><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="15-二进制中1的个数"><a href="#15-二进制中1的个数" class="headerlink" title="15 二进制中1的个数"></a>15 二进制中1的个数</h3><h3 id="16-数值的整数次方"><a href="#16-数值的整数次方" class="headerlink" title="16 数值的整数次方"></a>16 数值的整数次方</h3><h4 id="解一-12"><a href="#解一-12" class="headerlink" title="解一"></a>解一</h4><p>注意的两个点：</p><ul><li>n为Integer.MIN_VALUE时，直接使用int转为正值会溢出</li><li>直接遍历n进行相乘会超时</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">long</span> b = n;</span><br><span class="line">    <span class="keyword">if</span> (b &lt; <span class="number">0</span>) {</span><br><span class="line">        x = <span class="number">1.0</span> / x;</span><br><span class="line">        b = -b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>) {</span><br><span class="line">            res *= x;</span><br><span class="line">        }</span><br><span class="line">        x *=x;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="17-打印从1到最大的n位数"><a href="#17-打印从1到最大的n位数" class="headerlink" title="17 打印从1到最大的n位数"></a>17 打印从1到最大的n位数</h3><h4 id="解一-13"><a href="#解一-13" class="headerlink" title="解一"></a>解一</h4><p>注意的两个点：</p><ul><li>大数越界问题，可以使用String来解决</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] printNumbers(<span class="keyword">int</span> n) {</span><br><span class="line">    <span class="keyword">int</span> end = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, n) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[end];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++) {</span><br><span class="line">        res[i] = i + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="18-删除链表的节点"><a href="#18-删除链表的节点" class="headerlink" title="18 删除链表的节点"></a>18 删除链表的节点</h3><h4 id="解一-14"><a href="#解一-14" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteNode</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (head.val == val) {</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    }</span><br><span class="line">    ListNode p = head;</span><br><span class="line">    ListNode cur = p.next;</span><br><span class="line">    <span class="comment">// 从next开始遍历</span></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) {</span><br><span class="line">            p.next = cur.next;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        }</span><br><span class="line">        p = p.next;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="19-删除排序链表中的重复元素"><a href="#19-删除排序链表中的重复元素" class="headerlink" title="19 删除排序链表中的重复元素"></a>19 删除排序链表中的重复元素</h3><h4 id="解一-15"><a href="#解一-15" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    ListNode p = head;</span><br><span class="line">    ListNode cur = p.next;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (cur.val == p.val) {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            p.next = cur;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            p = p.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="20-删除排序链表中的所有重复元素"><a href="#20-删除排序链表中的所有重复元素" class="headerlink" title="20 删除排序链表中的所有重复元素"></a>20 删除排序链表中的所有重复元素</h3><h4 id="解一-16"><a href="#解一-16" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode cur = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cur.next != <span class="keyword">null</span> &amp;&amp; cur.next.next != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (cur.next.val == cur.next.next.val) {</span><br><span class="line">            <span class="keyword">int</span> curVal = cur.next.val;</span><br><span class="line">            <span class="keyword">while</span> (cur.next != <span class="keyword">null</span> &amp;&amp; cur.next.val == curVal) {</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="21-正则表达式匹配"><a href="#21-正则表达式匹配" class="headerlink" title="21 正则表达式匹配"></a>21 正则表达式匹配</h3><p>【困难】</p><h4 id="解一-17"><a href="#解一-17" class="headerlink" title="解一"></a>解一</h4><p>首先，定义dp</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">dp[i][j] 表示 s[:i]与p[:j]匹配</span></span><br><span class="line"><span class="comment">s[:i] 表示s的前i个字符</span></span><br><span class="line"><span class="comment">p[:j] 表示p的前j个字符</span></span><br><span class="line"><span class="comment">若 s[:i] == p[:j]， 那么下一状态就是判断添加一个字符s[i+1]能否匹配或者添加一个字符p[j+1]能否匹配</span></span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="comment">dp[0][0] 表示空字符串，dp[0][0] == true</span></span><br><span class="line"><span class="comment">dp[0][j] 此时，当p的偶数位为'*'才能匹配，需要保持p为空字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当p[j-1]为'*'时，可以匹配dp[i][j-2] || dp[i-1][j]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span>    </span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> m = s.length() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = p.length() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 初始化首行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; n; j += <span class="number">2</span>) {</span><br><span class="line">        dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>] &amp;&amp; p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span>) {</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">2</span>] || (dp[i - <span class="number">1</span>][j] &amp;&amp; (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">2</span>) || p.charAt(j - <span class="number">2</span>) == <span class="string">'.'</span>));</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; ((s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>)) || (p.charAt(j - <span class="number">1</span>) == <span class="string">'.'</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="21-调整数组顺序使奇数位于偶数前面"><a href="#21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="21 调整数组顺序使奇数位于偶数前面"></a>21 调整数组顺序使奇数位于偶数前面</h3><h4 id="解一-18"><a href="#解一-18" class="headerlink" title="解一"></a>解一</h4><p>【注意】</p><p>注意边界</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] exchange(<span class="keyword">int</span>[] nums) {</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; ((nums[r] &amp; <span class="number">1</span>) == <span class="number">0</span>)) {</span><br><span class="line">            r--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; ((nums[l] &amp; <span class="number">1</span>) == <span class="number">1</span>)) {</span><br><span class="line">            l++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> t = nums[l];</span><br><span class="line">        nums[l] = nums[r];</span><br><span class="line">        nums[r] = t;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="22-链表中倒数第K个节点"><a href="#22-链表中倒数第K个节点" class="headerlink" title="22 链表中倒数第K个节点"></a>22 链表中倒数第K个节点</h3><h4 id="解一-19"><a href="#解一-19" class="headerlink" title="解一"></a>解一</h4><p>双指针</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">    ListNode fast = head;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) {</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>) {</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-链表中环的入口"><a href="#23-链表中环的入口" class="headerlink" title="23 链表中环的入口"></a>23 链表中环的入口</h3><h4 id="解一-20"><a href="#解一-20" class="headerlink" title="解一"></a>解一</h4><p>双指针遍历，能走完说明没有环</p><p>否则，让一个指针重新从头开始遍历，另一个继续遍历，相等时即为环的入口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    ListNode fast = head, slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) {</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span> (fast.next != <span class="keyword">null</span>) {</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (fast == slow) {</span><br><span class="line">            fast = head;</span><br><span class="line">            <span class="keyword">while</span> (slow != fast) {</span><br><span class="line">                slow = slow.next;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> fast;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="24-反转链表"><a href="#24-反转链表" class="headerlink" title="24 反转链表"></a>24 反转链表</h3><h4 id="解一-21"><a href="#解一-21" class="headerlink" title="解一"></a>解一</h4><p>递归</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    ListNode returnNode = reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> returnNode;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解二-5"><a href="#解二-5" class="headerlink" title="解二"></a>解二</h4><p>使用栈进行反转</p><h3 id="25-合并排序链表"><a href="#25-合并排序链表" class="headerlink" title="25 合并排序链表"></a>25 合并排序链表</h3><h4 id="解一-22"><a href="#解一-22" class="headerlink" title="解一"></a>解一</h4><p>使用队列来保存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>{</span><br><span class="line">    ListNode cur = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode res = cur;</span><br><span class="line">    <span class="keyword">int</span> n = lists.length;</span><br><span class="line">    PriorityQueue&lt;ListNode&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((n1, n2) -&gt; n1.val - n2.val);</span><br><span class="line">    <span class="keyword">for</span> (ListNode node : lists) {</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">            pq.offer(node);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (!pq.isEmpty()) {</span><br><span class="line">        ListNode curNode = pq.poll();</span><br><span class="line">        res.next = curNode;</span><br><span class="line">        res = res.next;</span><br><span class="line">        <span class="keyword">if</span> (curNode.next != <span class="keyword">null</span>) {</span><br><span class="line">            pq.offer(curNode.next);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cur.next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="26-树的子结构"><a href="#26-树的子结构" class="headerlink" title="26 树的子结构"></a>26 树的子结构</h3><h4 id="解一-23"><a href="#解一-23" class="headerlink" title="解一"></a>解一</h4><p>先判断当前的节点A和B是否相同，然后比较A.l和B.l 、A.r和B.r</p><p>【注意】判断double类型的变量是否相等时，需要判断两数之差是否在一个范围内，不能直接使用==</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (B == <span class="keyword">null</span> || A == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> hasSubStructure(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (B == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.val != B.val) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> hasSubStructure(A.left, B.left) &amp;&amp; hasSubStructure(A.right, B.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="27-二叉树的镜像"><a href="#27-二叉树的镜像" class="headerlink" title="27 二叉树的镜像"></a>27 二叉树的镜像</h3><h4 id="解一-24"><a href="#解一-24" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">mirrorTree</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    TreeNode tmp = root.left;</span><br><span class="line">    root.left = mirrorTree(root.right);</span><br><span class="line">    root.right = mirrorTree(tmp);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="28-对称的二叉树"><a href="#28-对称的二叉树" class="headerlink" title="28 对称的二叉树"></a>28 对称的二叉树</h3><h4 id="解一-25"><a href="#解一-25" class="headerlink" title="解一"></a>解一</h4><p>构造一个辅助函数，进行对比</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> check(root, root);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode p, TreeNode q)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ((p == <span class="keyword">null</span> &amp;&amp; q != <span class="keyword">null</span>) || (p != <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) || p.val != q.val) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> check(p.left, q.right) &amp;&amp; check(p.right, q.left);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="29-顺时针打印矩阵"><a href="#29-顺时针打印矩阵" class="headerlink" title="29 顺时针打印矩阵"></a>29 顺时针打印矩阵</h3><h4 id="解一-26"><a href="#解一-26" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] spiralOrder(<span class="keyword">int</span>[][] matrix) {</span><br><span class="line">    <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = m - <span class="number">1</span>, x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[m * n];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) {</span><br><span class="line">            res[x++] = matrix[t][i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (++t &gt; b) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = t; i &lt;= b; i++) {</span><br><span class="line">            res[x++] = matrix[i][r];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l &gt; --r) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &gt;= l; i--) {</span><br><span class="line">            res[x++] = matrix[b][i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (t &gt; --b) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = b; i &gt;= t; i--) {</span><br><span class="line">            res[x++] = matrix[i][l];</span><br><span class="line">        }                     </span><br><span class="line">        <span class="keyword">if</span> (++l &gt; r) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }   </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="30-包含main函数的栈"><a href="#30-包含main函数的栈" class="headerlink" title="30 包含main函数的栈"></a>30 包含main函数的栈</h3><h4 id="解一-27"><a href="#解一-27" class="headerlink" title="解一"></a>解一</h4><p>另开一个最小栈，用于存放当前栈的最小值，当新push的值比原最小值小时，在最小栈中push新值，否则继续push原来的最小值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initialize your data structure here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>{</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        stack.push(x);</span><br><span class="line">        <span class="keyword">if</span> (minStack.isEmpty()) {</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (minStack.peek() &gt; x) {</span><br><span class="line">                minStack.push(x);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                minStack.push(minStack.peek());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        stack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="31-栈的压入、弹出序列"><a href="#31-栈的压入、弹出序列" class="headerlink" title="31 栈的压入、弹出序列"></a>31 栈的压入、弹出序列</h3><h4 id="解一-28"><a href="#解一-28" class="headerlink" title="解一"></a>解一</h4><p>使用辅助栈</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>{</span><br><span class="line">    <span class="comment">// 辅助栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : pushed) {</span><br><span class="line">        stack.push(num);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popped[i]) {</span><br><span class="line">            stack.pop();</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="32-从上到下打印二叉树"><a href="#32-从上到下打印二叉树" class="headerlink" title="32 从上到下打印二叉树"></a>32 从上到下打印二叉树</h3><h4 id="解一-29"><a href="#解一-29" class="headerlink" title="解一"></a>解一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] levelOrder(TreeNode root) {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            res.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++) {</span><br><span class="line">        ans[i] = res.get(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="33-二叉搜索树的后序遍历序列"><a href="#33-二叉搜索树的后序遍历序列" class="headerlink" title="33 二叉搜索树的后序遍历序列"></a>33 二叉搜索树的后序遍历序列</h3><h4 id="解一-30"><a href="#解一-30" class="headerlink" title="解一"></a>解一</h4><p>根据后序遍历“左右根”的顺序，取出根的值，从前往后遍历找到第一个大于根的节点作为左右子树的分界，当右子树的所有制都大于根时，才为二叉搜索树</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyPostorder</span><span class="params">(<span class="keyword">int</span>[] postorder)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (postorder.length &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> helper(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] postorder, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> root = postorder[end];</span><br><span class="line">        <span class="keyword">int</span> maxIndex = start;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">while</span> (postorder[i] &lt; root) {</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (postorder[i] &gt; root) {</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">boolean</span> left = helper(postorder, start,  j - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">boolean</span> right = helper(postorder, j, end - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> i == end &amp;&amp; left &amp;&amp; right;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="34-二叉树中和为某一值的路径"><a href="#34-二叉树中和为某一值的路径" class="headerlink" title="34 二叉树中和为某一值的路径"></a>34 二叉树中和为某一值的路径</h3><h4 id="解一-31"><a href="#解一-31" class="headerlink" title="解一"></a>解一</h4><p>回溯遍历</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> target) {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        path(root, target, res, list);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">path</span><span class="params">(TreeNode root, <span class="keyword">int</span> target, List&lt;List&lt;Integer&gt;&gt; res, LinkedList&lt;Integer&gt; list)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> val = root.val;</span><br><span class="line">        list.add(val);</span><br><span class="line">        <span class="keyword">if</span> (target - val == <span class="number">0</span> &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList(list));</span><br><span class="line">        }</span><br><span class="line">        path(root.left, target - val, res, list);</span><br><span class="line">        path(root.right, target - val, res, list);</span><br><span class="line">        list.removeLast();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="35-复杂链表的复制"><a href="#35-复杂链表的复制" class="headerlink" title="35 复杂链表的复制"></a>35 复杂链表的复制</h3><h4 id="解一-32"><a href="#解一-32" class="headerlink" title="解一"></a>解一</h4><p>要使用map记录老节点与新节点的对应关系</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    } </span><br><span class="line">    Node cur = head;</span><br><span class="line">    Node res = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">    Node p = res;</span><br><span class="line">    Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">        p.next = newNode;</span><br><span class="line">        map.put(cur, newNode);</span><br><span class="line">        p = p.next;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    cur  = head;</span><br><span class="line">    p = res.next;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        p.random = map.get(cur.random);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        p = p.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res.next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于大数据的图书推荐系统系统（五）——离线推荐</title>
      <link href="2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-wu-chi-xian-tui-jian/"/>
      <url>2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-wu-chi-xian-tui-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Offline-Recommender"><a href="#Offline-Recommender" class="headerlink" title="Offline Recommender"></a>Offline Recommender</h1><blockquote><p>注意：离线推荐模块我直接使用原数据集的全部数据时会出现内存溢出的问题，如果你的虚拟机设置的内存并不大，建议选取部分的数据集数据</p></blockquote><ol><li><p>新建子模块OfflineRecommender</p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>book-recommender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>OfflineRecommender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scalanlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jblas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${jblas.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spark的依赖引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入Scala --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 加入MongoDB的驱动 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于代码方式连接MongoDB --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>casbah-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${casbah.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于Spark和MongoDB的对接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-spark-connector_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mongodb-spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>offlinerecommender<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.wan.offline.OfflineRecommender<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>配置日志文件</p></li><li><p>编码<code>OfflineRecommender.scala</code></p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wan.offline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.mllib.recommendation.{<span class="type">ALS</span>, <span class="type">Rating</span>}</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> org.jblas.<span class="type">DoubleMatrix</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author wanfeng</span></span><br><span class="line"><span class="comment"> * @date 2021/3/13 10:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">BookRating</span>(<span class="params">userId: <span class="type">Int</span>, bookId: <span class="type">Int</span>, score: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">MongoConfig</span>(<span class="params">uri: <span class="type">String</span>, db: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Recommenderation</span>(<span class="params">bookId: <span class="type">Int</span>, score: <span class="type">Double</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">UserRecs</span>(<span class="params">userId: <span class="type">Int</span>, recs: <span class="type">Seq</span>[<span class="type">Recommenderation</span>]</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">BookRecs</span>(<span class="params">bookId: <span class="type">Int</span>, recs: <span class="type">Seq</span>[<span class="type">Recommenderation</span>]</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">OfflineRecommender</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MONGODB_RATING_COLLECTION</span> = <span class="string">"Rating"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义推荐表名</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">USER_RECS</span> = <span class="string">"UserRecs"</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">BOOK_RECS</span> = <span class="string">"BookRecs"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义推荐数量</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">USER_MAX_RECOMMENDATION</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> config = <span class="type">Map</span>(</span><br><span class="line">      <span class="string">"spark.cores"</span> -&gt; <span class="string">"local[*]"</span>,</span><br><span class="line">      <span class="string">"mongo.uri"</span> -&gt; <span class="string">"mongodb://192.168.2.88:27017/recommender"</span>,</span><br><span class="line">      <span class="string">"mongo.db"</span> -&gt; <span class="string">"recommender"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(config(<span class="string">"spark.cores"</span>)).setAppName(<span class="string">"OfflineRecommender"</span>)</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> mongoConfig = <span class="type">MongoConfig</span>(config(<span class="string">"mongo.uri"</span>), config(<span class="string">"mongo.db"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ratingRDD = spark.read</span><br><span class="line">      .option(<span class="string">"uri"</span>, mongoConfig.uri)</span><br><span class="line">      .option(<span class="string">"collection"</span>, <span class="type">MONGODB_RATING_COLLECTION</span>)</span><br><span class="line">      .format(<span class="string">"com.mongodb.spark.sql"</span>)</span><br><span class="line">      .load()</span><br><span class="line">      .as[<span class="type">BookRating</span>]</span><br><span class="line">      .rdd</span><br><span class="line">      .map(</span><br><span class="line">        rating =&gt; (rating.userId, rating.bookId, rating.score)</span><br><span class="line">      ).cache()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> userRDD = ratingRDD.map(_._1).distinct()</span><br><span class="line">    <span class="keyword">val</span> bookRDD = ratingRDD.map(_._2).distinct()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 训练隐语义模型</span></span><br><span class="line">    <span class="keyword">val</span> trainData = ratingRDD.map(x =&gt; <span class="type">Rating</span>(x._1, x._2, x._3))</span><br><span class="line">    <span class="keyword">val</span> (rank, iterations, lambda) = (<span class="number">50</span>, <span class="number">5</span>, <span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">val</span> model = <span class="type">ALS</span>.train(trainData, rank, iterations, lambda)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获得预评分矩阵，得到用户的推荐列表</span></span><br><span class="line">    <span class="keyword">val</span> userBooks = userRDD.cartesian(bookRDD)</span><br><span class="line">    <span class="keyword">val</span> preRating = model.predict(userBooks)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> userRecs = preRating.filter(_.rating &gt; <span class="number">0</span>)</span><br><span class="line">      .map(</span><br><span class="line">        rating =&gt; (rating.user, (rating.product, rating.rating))</span><br><span class="line">      )</span><br><span class="line">      .groupByKey()</span><br><span class="line">      .map {</span><br><span class="line">        <span class="keyword">case</span> (userId, recs) =&gt;</span><br><span class="line">          <span class="type">UserRecs</span>(</span><br><span class="line">            userId, recs.toList.sortWith(_._2 &gt; _._2).take(<span class="type">USER_MAX_RECOMMENDATION</span>).map(x =&gt; <span class="type">Recommenderation</span>(x._1, x._2))</span><br><span class="line">          )</span><br><span class="line">      }</span><br><span class="line">      .toDF()</span><br><span class="line"></span><br><span class="line">    userRecs.write</span><br><span class="line">      .option(<span class="string">"uri"</span>, mongoConfig.uri)</span><br><span class="line">      .option(<span class="string">"collection"</span>, <span class="type">USER_RECS</span>)</span><br><span class="line">      .mode(<span class="string">"overwrite"</span>)</span><br><span class="line">      .format(<span class="string">"com.mongodb.spark.sql"</span>)</span><br><span class="line">      .save()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 利用书籍的特征向量，计算书籍的相似度列表</span></span><br><span class="line">    <span class="keyword">val</span> productFeatures = model.productFeatures.map {</span><br><span class="line">      <span class="keyword">case</span> (bookId, features) =&gt; (bookId, <span class="keyword">new</span> <span class="type">DoubleMatrix</span>(features))</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> bookRecs = productFeatures.cartesian(productFeatures)</span><br><span class="line">      .filter {</span><br><span class="line">        <span class="keyword">case</span> (a, b) =&gt; a._1 != b._1</span><br><span class="line">      }</span><br><span class="line">      .map {</span><br><span class="line">        <span class="keyword">case</span> (a, b) =&gt;</span><br><span class="line">          <span class="keyword">val</span> simScore = consinSim(a._2, b._2)</span><br><span class="line">          (a._1, (b._1, simScore))</span><br><span class="line">      }</span><br><span class="line">      .filter(_._2._2 &gt; <span class="number">0.4</span>)</span><br><span class="line">      .groupByKey()</span><br><span class="line">      .map {</span><br><span class="line">        <span class="keyword">case</span> (bookId, recs) =&gt;</span><br><span class="line">          <span class="type">BookRecs</span>(</span><br><span class="line">            bookId, recs.toList.map(x =&gt; <span class="type">Recommenderation</span>(x._1, x._2))</span><br><span class="line">          )</span><br><span class="line">      }</span><br><span class="line">      .toDF()</span><br><span class="line"></span><br><span class="line">    bookRecs</span><br><span class="line">      .write</span><br><span class="line">      .option(<span class="string">"uri"</span>, mongoConfig.uri)</span><br><span class="line">      .option(<span class="string">"collection"</span>, <span class="type">BOOK_RECS</span>)</span><br><span class="line">      .mode(<span class="string">"overwrite"</span>)</span><br><span class="line">      .format(<span class="string">"com.mongodb.spark.sql"</span>)</span><br><span class="line">      .save()</span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">consinSim</span></span>(product1: <span class="type">DoubleMatrix</span>, product2: <span class="type">DoubleMatrix</span>): <span class="type">Double</span> = {</span><br><span class="line">    product1.dot(product2) / (product1.norm2() * product2.norm2())</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>展示工程结构与运行效果：</p><p><img src="F:\yueluo\source\_posts\image-20210313104311120.png" alt="image-20210313142831598"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313142915947.png" alt="image-20210313142915947"></p></li><li><p>结束！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 推荐系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于大数据的图书推荐系统系统（四）——数据统计</title>
      <link href="2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-si-shu-ju-tong-ji/"/>
      <url>2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-si-shu-ju-tong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Statistics-Recommender"><a href="#Statistics-Recommender" class="headerlink" title="Statistics Recommender"></a>Statistics Recommender</h1><blockquote><p>第一个Dataloader模块记录之前没有把过程截图，我下面将离线数据统计模块的创建过程截图记录</p><p>此模块的前置条件：</p><ol><li>第一步Dataloader成功存储数据</li><li>虚拟机安装完成MongoDB和Spark并且成功启动</li></ol></blockquote><ol><li><p>创建子模块</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313103032732.png" alt="image-20210313103032732"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313103159027.png" alt="image-20210313103159027"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313103254293.png" alt="image-20210313103254293"></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>book-recommender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>StatisticsRecommender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spark的依赖引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入Scala --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加入MongoDB的驱动 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于代码方式连接MongoDB --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>casbah-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${casbah.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于Spark和MongoDB的对接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-spark-connector_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mongodb-spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>statisticsrecommender<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.wan.statistics.StatisticsRecommender<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>配置日志文件</p></li><li><p>编码<code>StatisticsRecommender.scala</code></p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wan.statistics</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.{<span class="type">DataFrame</span>, <span class="type">SparkSession</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author wanfeng</span></span><br><span class="line"><span class="comment"> * @date 2021/3/13 10:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Rating</span>(<span class="params">userId: <span class="type">Int</span>, bookId: <span class="type">Int</span>, score: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">MongoConfig</span>(<span class="params">uri: <span class="type">String</span>, db: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">StatisticsRecommender</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MONGODB_RATING_COLLECTION</span> = <span class="string">"Rating"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义统计表名</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">RATE_MORE_BOOKS</span> = <span class="string">"RateMoreBooks"</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">AVERAGE_BOOKS</span> = <span class="string">"AverageBooks"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> config = <span class="type">Map</span>(</span><br><span class="line">      <span class="string">"spark.cores"</span> -&gt; <span class="string">"local[*]"</span>,</span><br><span class="line">      <span class="string">"mongo.uri"</span> -&gt; <span class="string">"mongodb://192.168.2.88:27017/recommender"</span>,</span><br><span class="line">      <span class="string">"mongo.db"</span> -&gt; <span class="string">"recommender"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(config(<span class="string">"spark.cores"</span>)).setAppName(<span class="string">"StatisticsRecommender"</span>)</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> mongoConfig = <span class="type">MongoConfig</span>(config(<span class="string">"mongo.uri"</span>), config(<span class="string">"mongo.db"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ratingDF = spark.read</span><br><span class="line">      .option(<span class="string">"uri"</span>, mongoConfig.uri)</span><br><span class="line">      .option(<span class="string">"collection"</span>, <span class="type">MONGODB_RATING_COLLECTION</span>)</span><br><span class="line">      .format(<span class="string">"com.mongodb.spark.sql"</span>)</span><br><span class="line">      .load()</span><br><span class="line">      .as[<span class="type">Rating</span>]</span><br><span class="line">      .toDF()</span><br><span class="line"></span><br><span class="line">    ratingDF.createTempView(<span class="string">"ratings"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 历史热门书籍，按照评分个数统计</span></span><br><span class="line">    <span class="keyword">val</span> rateMoreBooksDF = spark.sql(<span class="string">"select bookId, count(bookId) as countNum from ratings group by bookId order by countNum desc"</span>)</span><br><span class="line">    storeDFInMongoDB(rateMoreBooksDF, <span class="type">RATE_MORE_BOOKS</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 优质书籍</span></span><br><span class="line">    <span class="keyword">val</span> averageBooksDF = spark.sql(<span class="string">"select bookId, avg(score) as avgScore from ratings group by bookId order by avgScore desc"</span>)</span><br><span class="line">    storeDFInMongoDB(averageBooksDF, <span class="type">AVERAGE_BOOKS</span>)</span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">storeDFInMongoDB</span></span>(df: <span class="type">DataFrame</span>, collection_name: <span class="type">String</span>)(<span class="keyword">implicit</span> mongoConfig: <span class="type">MongoConfig</span>): <span class="type">Unit</span> = {</span><br><span class="line">    df.write</span><br><span class="line">      .option(<span class="string">"uri"</span>, mongoConfig.uri)</span><br><span class="line">      .option(<span class="string">"collection"</span>, collection_name)</span><br><span class="line">      .mode(<span class="string">"overwrite"</span>)</span><br><span class="line">      .format(<span class="string">"com.mongodb.spark.sql"</span>)</span><br><span class="line">      .save()</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>展示工程结构与运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313104311120.png" alt="image-20210313104311120"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313104336710.png" alt="image-20210313104336710"></p></li><li><p>结束！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 推荐系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于大数据的图书推荐系统系统（三）——数据加载与存储</title>
      <link href="2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-san-shu-ju-jia-zai-yu-cun-chu/"/>
      <url>2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-san-shu-ju-jia-zai-yu-cun-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Dataloader"><a href="#Dataloader" class="headerlink" title="Dataloader"></a>Dataloader</h1><blockquote><p>此模块的前置条件：</p><ol><li>本地有Maven、Java、Scala、IDEA环境</li><li>虚拟机安装完成MongoDB和Spark并且成功启动</li><li>MongoDB可以不用建库建表，本地最好有一个MongoDB的可视化工具，我是用robo 3T，来验证MongoDB的远程连接和数据是否成功导入</li><li>以下步骤可能不太详细，参照我的项目结构以及代码灵活改动</li></ol></blockquote><ol><li><p>新建父工程book-recommender</p><p>父工程只进行一些依赖的全局设置，不涉及具体编码，所以删除该目录下的<code>src</code>目录</p></li><li><p>为父工程添加全局依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>book-recommender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Dataloader<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.22<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mongodb-spark.version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">mongodb-spark.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">casbah.version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">casbah.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">redis.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">redis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">kafka.version</span>&gt;</span>0.10.2.1<span class="tag">&lt;/<span class="name">kafka.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spark.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">spark.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jblas.version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">jblas.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引入Spark相关的Jar包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-graphx_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${scala.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入共同的日志管理工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${slf4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${slf4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${slf4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${log4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明并引入子项目共有的插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--所有的编译用JDK1.8--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;fork&gt;true&lt;/fork&gt;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">meminitial</span>&gt;</span>512m<span class="tag">&lt;/<span class="name">meminitial</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">maxmem</span>&gt;</span>4096m<span class="tag">&lt;/<span class="name">maxmem</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--maven的打包插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该插件用于将scala代码编译成class文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--绑定到maven的编译阶段--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>新建子模块Dataloader</p></li><li><p>为Dataloader模块添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>book-recommender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Dataloader<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spark的依赖引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入Scala --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 加入MongoDB的驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>casbah-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${casbah.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-spark-connector_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mongodb-spark.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>添加数据集文件和日志配置文件</p></li><li><p>Dataloader代码</p><figure class="highlight scala"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wan.recommender</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.casbah.commons.<span class="type">MongoDBObject</span></span><br><span class="line"><span class="keyword">import</span> com.mongodb.casbah.{<span class="type">MongoClient</span>, <span class="type">MongoClientURI</span>}</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.{<span class="type">DataFrame</span>, <span class="type">SparkSession</span>}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 书籍数据集</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*"ISBN";"Book-Title";"Book-Author";"Year-Of-Publication";"Publisher";"Image-URL-S";"Image-URL-M";"Image-URL-L"</span></span><br><span class="line"><span class="comment">*"0195153448";                       书籍编号</span></span><br><span class="line"><span class="comment">*"Classical Mythology";              书籍名称</span></span><br><span class="line"><span class="comment">*"Mark P. O. Morford";               书籍作者</span></span><br><span class="line"><span class="comment">*"2002";                             书籍出版日期</span></span><br><span class="line"><span class="comment">*"Oxford University Press";          书籍出版社</span></span><br><span class="line"><span class="comment">*"http://images.amazon.com/images/P/0195153448.01.THUMBZZZ.jpg"; 书籍封面链接</span></span><br><span class="line"><span class="comment">*"http://images.amazon.com/images/P/0195153448.01.MZZZZZZZ.jpg";</span></span><br><span class="line"><span class="comment">*"http://images.amazon.com/images/P/0195153448.01.LZZZZZZZ.jpg"</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">bookId: <span class="type">Int</span>, bookTitle: <span class="type">String</span>, bookAuthor: <span class="type">String</span>, publishDate: <span class="type">String</span>, press: <span class="type">String</span>, bookImageUrl: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">/*</span></span></span><br><span class="line"><span class="class"><span class="comment">* 评分数据集</span></span></span><br><span class="line"><span class="class"><span class="comment">*</span></span></span><br><span class="line"><span class="class"><span class="comment">* "User-ID";"ISBN";"Book-Rating"</span></span></span><br><span class="line"><span class="class"><span class="comment">  "276725";       用户ID</span></span></span><br><span class="line"><span class="class"><span class="comment">  "034545104X";   书籍编号</span></span></span><br><span class="line"><span class="class"><span class="comment">  "0"             用户评分</span></span></span><br><span class="line"><span class="class"><span class="comment">* */</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Rating</span>(<span class="params">userId: <span class="type">Int</span>, bookId: <span class="type">Int</span>, score: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">/*</span></span></span><br><span class="line"><span class="class"><span class="comment">* MongoDB连接配置</span></span></span><br><span class="line"><span class="class"><span class="comment">* */</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">MongoConfig</span>(<span class="params">uri: <span class="type">String</span>, db: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">Dataloader</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义源文件地址</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">BOOK_DATA_PATH</span> = <span class="string">"F:\\BookRecSys\\book-recommender\\Dataloader\\src\\main\\resources\\BX-Books.csv"</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">RATEING_DATA_PATH</span> = <span class="string">"F:\\BookRecSys\\book-recommender\\Dataloader\\src\\main\\resources\\BX-Book-Ratings.csv"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义表名</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MONGODB_BOOK_COLLECTION</span> = <span class="string">"Book"</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MONGODB_RATING_COLLECTION</span> = <span class="string">"Rating"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> config = <span class="type">Map</span>(</span><br><span class="line">      <span class="string">"spark.cores"</span> -&gt; <span class="string">"local[*]"</span>,</span><br><span class="line">      <span class="string">"mongo.uri"</span> -&gt; <span class="string">"mongodb://192.168.2.88:27017/recommender"</span>,</span><br><span class="line">      <span class="string">"mongo.db"</span> -&gt; <span class="string">"recommender"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个sparkConfig</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(config(<span class="string">"spark.cores"</span>)).setAppName(<span class="string">"DataLoader"</span>)</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载数据</span></span><br><span class="line">    <span class="keyword">val</span> bookRDD = spark.sparkContext.textFile(<span class="type">BOOK_DATA_PATH</span>)</span><br><span class="line">    <span class="keyword">val</span> bookDF = bookRDD.map(item =&gt; {</span><br><span class="line">      <span class="keyword">val</span> attr = item.split(<span class="string">"\\;"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="type">Book</span>(</span><br><span class="line">        bookIdToInt(attr(<span class="number">0</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim()),</span><br><span class="line">        attr(<span class="number">1</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim(),</span><br><span class="line">        attr(<span class="number">2</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim(),</span><br><span class="line">        attr(<span class="number">3</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim(),</span><br><span class="line">        attr(<span class="number">4</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim(),</span><br><span class="line">        attr(<span class="number">7</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim()</span><br><span class="line">      )</span><br><span class="line">    }).toDF()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ratingRDD = spark.sparkContext.textFile(<span class="type">RATEING_DATA_PATH</span>)</span><br><span class="line">    <span class="keyword">val</span> ratingDF = ratingRDD.map(item =&gt; {</span><br><span class="line">      <span class="keyword">val</span> attr = item.split(<span class="string">"\\;"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="type">Rating</span>(</span><br><span class="line">        attr(<span class="number">0</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim().toInt,</span><br><span class="line">        bookIdToInt(attr(<span class="number">1</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim()),</span><br><span class="line">        attr(<span class="number">2</span>).replace(<span class="string">"\""</span>, <span class="string">""</span>).trim().toInt</span><br><span class="line">      )</span><br><span class="line">    }).toDF()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> mongoConfig = <span class="type">MongoConfig</span>(config(<span class="string">"mongo.uri"</span>), config(<span class="string">"mongo.db"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    storeDataInMongoDB(bookDF, ratingDF)</span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">storeDataInMongoDB</span></span>(bookDF: <span class="type">DataFrame</span>, ratingDF: <span class="type">DataFrame</span>)(<span class="keyword">implicit</span> mongoConfig: <span class="type">MongoConfig</span>): <span class="type">Unit</span> = {</span><br><span class="line">    <span class="keyword">val</span> mongoClient = <span class="type">MongoClient</span>(<span class="type">MongoClientURI</span>(mongoConfig.uri))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> bookCollection = mongoClient(mongoConfig.db)(<span class="type">MONGODB_BOOK_COLLECTION</span>)</span><br><span class="line">    <span class="keyword">val</span> ratingCollection = mongoClient(mongoConfig.db)(<span class="type">MONGODB_RATING_COLLECTION</span>)</span><br><span class="line"></span><br><span class="line">    bookCollection.dropCollection()</span><br><span class="line">    ratingCollection.dropCollection()</span><br><span class="line"></span><br><span class="line">    bookDF.write</span><br><span class="line">      .option(<span class="string">"uri"</span>, mongoConfig.uri)</span><br><span class="line">      .option(<span class="string">"collection"</span>, <span class="type">MONGODB_BOOK_COLLECTION</span>)</span><br><span class="line">      .mode(<span class="string">"overwrite"</span>)</span><br><span class="line">      .format(<span class="string">"com.mongodb.spark.sql"</span>)</span><br><span class="line">      .save()</span><br><span class="line">    ratingDF.write</span><br><span class="line">      .option(<span class="string">"uri"</span>, mongoConfig.uri)</span><br><span class="line">      .option(<span class="string">"collection"</span>, <span class="type">MONGODB_RATING_COLLECTION</span>)</span><br><span class="line">      .mode(<span class="string">"overwrite"</span>)</span><br><span class="line">      .format(<span class="string">"com.mongodb.spark.sql"</span>)</span><br><span class="line">      .save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bookCollection.createIndex(<span class="type">MongoDBObject</span>(<span class="string">"bookId"</span> -&gt; <span class="number">1</span>))</span><br><span class="line">    ratingCollection.createIndex(<span class="type">MongoDBObject</span>(<span class="string">"bookId"</span> -&gt; <span class="number">1</span>))</span><br><span class="line">    ratingCollection.createIndex(<span class="type">MongoDBObject</span>(<span class="string">"userId"</span> -&gt; <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    mongoClient.close()</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//源数据集中的bookId无法直接转化为Int，这里缩短长度并简单处理</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bookIdToInt</span></span>(bookId: <span class="type">String</span>): <span class="type">Int</span> = {</span><br><span class="line">    <span class="keyword">var</span> str: <span class="type">Array</span>[<span class="type">Char</span>] = bookId.toCharArray()</span><br><span class="line">    <span class="keyword">var</span> res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> (str(<span class="number">0</span>).toInt &gt; <span class="number">1</span>) {</span><br><span class="line">      res += '<span class="number">1</span>'</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (str.length &gt;= <span class="number">10</span>) {</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">1</span> until <span class="number">10</span>) {</span><br><span class="line">        <span class="keyword">if</span> (!isIntByRegex(str(i))) {</span><br><span class="line">          str(i) = '<span class="number">1</span>'</span><br><span class="line">        }</span><br><span class="line">        res += str(i)</span><br><span class="line">      }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until (str.length)) {</span><br><span class="line">        <span class="keyword">if</span> (!isIntByRegex(str(i))) {</span><br><span class="line">          str(i) = '<span class="number">1</span>'</span><br><span class="line">        }</span><br><span class="line">        res += str(i)</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> resBookId = res.trim.toInt</span><br><span class="line">    resBookId</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isIntByRegex</span></span>(s: <span class="type">Char</span>) = {</span><br><span class="line">    <span class="keyword">val</span> pattern = <span class="string">""</span><span class="string">"^(\d+)$"</span><span class="string">""</span>.r</span><br><span class="line">    s <span class="keyword">match</span> {</span><br><span class="line">      <span class="keyword">case</span> pattern(_*) =&gt; <span class="literal">true</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>最后展示工程结构与运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313102115618.png" alt="image-20210313102115618"></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210313102204087.png" alt="image-20210313102204087"></p><ol><li>此模块遇见的问题参考我记录的<code>一些问题</code>文档中<code>2021.3.13</code></li><li>结束！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 推荐系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于大数据的图书推荐系统系统（二）——软件安装</title>
      <link href="2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-er-ruan-jian-an-zhuang/"/>
      <url>2021/12/06/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-tong-er-ruan-jian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="基本软件安装"><a href="#基本软件安装" class="headerlink" title="基本软件安装"></a>基本软件安装</h1><h2 id="1-安装MongoDB"><a href="#1-安装MongoDB" class="headerlink" title="1.安装MongoDB"></a>1.安装MongoDB</h2><blockquote><p>参考菜鸟教程：<a href="https://www.runoob.com/mongodb/mongodb-linux-install.html">Linux平台安装MongoDB</a></p><p>MongoDB下载网址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310194520446.png" alt="image-20210310194520446"></p><p>复制后的链接为：<a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-4.2.13-rc2.tgz">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-4.2.13-rc2.tgz</a></p><p>具体操作如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel62-4.2.13-rc2.tgz</span><br><span class="line">tar -zxvf mongodb-linux-x86_64-rhel62-4.2.13-rc2.tgz </span><br><span class="line">mv mongodb-linux-x86_64-rhel62-4.2.13-rc2 mongodb</span><br><span class="line">cd mongodb</span><br><span class="line">mkdir data</span><br><span class="line">cd data</span><br><span class="line">mkdir db</span><br><span class="line">mkdir logs</span><br><span class="line">cd logs</span><br><span class="line">touch mongodb.log</span><br><span class="line">cd ..</span><br><span class="line">touch mongodb.conf</span><br><span class="line">vim mongodb.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#####################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">端口号port = 27017</span></span><br><span class="line"><span class="meta">#</span><span class="bash">数据目录</span></span><br><span class="line">dbpath = /usr/local/mongodb/data/db</span><br><span class="line"><span class="meta">#</span><span class="bash">日志目录</span></span><br><span class="line">logpath = /usr/local/mongodb/data/logs/mongodb.log</span><br><span class="line"><span class="meta">#</span><span class="bash">设置后台运行</span></span><br><span class="line">fork = true</span><br><span class="line"><span class="meta">#</span><span class="bash">日志输出方式</span></span><br><span class="line">logappend = true</span><br><span class="line"><span class="meta">#</span><span class="bash">开启认证</span></span><br><span class="line"><span class="meta">#</span><span class="bash">auth = <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">用于远程连结</span></span><br><span class="line">bind_ip = 0.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################</span></span></span><br><span class="line">sudo /usr/local/mongodb/bin/mongod -config /usr/local/mongodb/data/mongodb.conf</span><br><span class="line"></span><br><span class="line">/usr/local/mongodb/bin/mongo</span><br><span class="line"></span><br><span class="line">sudo /usr/local/mongodb/bin/mongod -shutdown -config /usr/local/mongodb/data/mongodb.conf</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310204740834.png" alt="image-20210310204740834"></p><h2 id="2-卸载系统自带JDK"><a href="#2-卸载系统自带JDK" class="headerlink" title="2.卸载系统自带JDK"></a>2.卸载系统自带JDK</h2><p>因为安装的CentOS 6.8自带的JDK版本为1.7，而Spark在2.2版本之后不再支持JDK1.7，所以需要重新安装JDK1.8</p><h3 id="1-卸载JDK1-7"><a href="#1-卸载JDK1-7" class="headerlink" title="1.卸载JDK1.7"></a>1.卸载JDK1.7</h3><p>输入命令<code>yum list installed | grep java</code>就可以查看系统中的JDK，如图</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210312201952060.png" alt="image-20210312201952060"></p><p>卸载<code>yum -y remove java-1.6.0-openjdk.x86_64</code>,<code>yum -y remove java-1.7.0-openjdk.x86_64</code></p><p>完成后，输入命令<code>java -version</code>会发现JDK已经完全卸载，接下来安装JDK1.8</p><h3 id="2-安装JDK1-8"><a href="#2-安装JDK1-8" class="headerlink" title="2.安装JDK1.8"></a>2.安装JDK1.8</h3><p>1.首先需要在Oracle的官网下载JDK1.8的安装包（官网下载需要注册账号），这里我本地有JDK1.8的包，直接上传到虚拟机中进行安装，上传过程略过，安装包位置在<code>/usr/local/java</code></p><p>2.解压</p><p><code>tar -zxvf jdk-8u251-linux-x64.tar.gz</code></p><p>3.重命名</p><p><code>mv jdk1.8.0_251/ jdk</code></p><p>4.配置环境变量</p><p><code>vim /etc/profile</code></p><p>5.在文件末尾添加如下内容</p><figure class="highlight profile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></tbody></table></figure><p>6.保存退出后，使配置生效</p><p><code>source /etc/profile</code></p><p>7.再次输入<code>java -version</code>会出现相应的JDK版本信息，JDK安装完成！</p><h2 id="3-安装Spark"><a href="#3-安装Spark" class="headerlink" title="3.安装Spark"></a>3.安装Spark</h2><p>Spark的下载官网：<a href="https://spark.apache.org/downloads.html">https://spark.apache.org/downloads.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210312193903621.png" alt="image-20210312193903621"></p><p>1.选择相应的版本后点击紫色箭头会出现清华镜像的下载地址，复制链接地址在虚拟机中通过wget下载，具体操作如下：</p><blockquote><p>注意：这里我开始选择2.4.7版本的Spark，在运行程序时会与原视频教程所给出依赖的版本不一致，为简单起见，选择与原视频教程相同的Spark版本，即Spark2.1.1</p><p>下载地址为：<a href="https://archive.apache.org/dist/spark/spark-2.1.1/spark-2.1.1-bin-hadoop2.7.tgz">https://archive.apache.org/dist/spark/spark-2.1.1/spark-2.1.1-bin-hadoop2.7.tgz</a></p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载Spark</span></span><br><span class="line">wget https://archive.apache.org/dist/spark/spark-2.1.1/spark-2.1.1-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf spark-2.1.1-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv spark-2.1.1-bin-hadoop2.7 spark</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入spark目录</span></span><br><span class="line">cd spark</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制slave配置文件</span></span><br><span class="line"> cp ./conf/slaves.template ./conf/slaves</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 编辑slaves文件，在文件末尾添加本机主机名</span></span><br><span class="line"> vim ./conf/slaves</span><br><span class="line"> -------</span><br><span class="line"> localhost #原文件内容，将这个覆盖为自己的主机名</span><br><span class="line"> book #主机名</span><br><span class="line"> -------</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制Spark-Env文件</span></span><br><span class="line">cp ./conf/spark-env.sh.template ./conf/spark-env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑Spark-Env文件,添加spark master的主机名和端口</span></span><br><span class="line">vim ./conf/spark-env.sh</span><br><span class="line">-------</span><br><span class="line">SPARK_MASTER_HOST=book       #添加spark master的主机名</span><br><span class="line">SPARK_MASTER_PORT=7077       #添加spark master的端口号</span><br><span class="line">JAVA_HOME=/usr/local/java/jdk  #这里我开始没有添加会报错，请注意</span><br><span class="line">-------</span><br></pre></td></tr></tbody></table></figure><p>2.上述操作完成后，启动Spark：</p><p><code>./sbin/start-all.sh</code></p><blockquote><p>启动时会让输入root账户密码</p></blockquote><p>3.此时访问<code>http://192.168.2.88:8080</code></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210312204119546.png" alt="image-20210312204119546"></p><p>4.Spark关闭命令</p><p><code>./sbin/stop-all.sh</code></p><p>5.Spark安装完成！</p><h2 id="4-安装Redis"><a href="#4-安装Redis" class="headerlink" title="4.安装Redis"></a>4.安装Redis</h2><p>1.下载Redis安装包</p><p><code>wget http://download.redis.io/releases/redis-4.0.2.tar.gz</code></p><p>2.解压</p><p><code>tar -zxvf redis-4.0.2.tar.gz</code></p><p>3.重命名</p><p><code>mv redis-4.0.2 redis</code></p><p>4.进入Redis源码目录</p><p><code>cd redis</code></p><p>5.安装编译软件GCC</p><p><code>yum install -y gcc</code></p><blockquote><p>如果这里安装失败，出现yum的错误，可参见问题文档部分的说明</p></blockquote><p>6.<code>make</code></p><p>7.<code>cd src</code></p><p>8.<code>make install</code></p><p>9.将redis根目录下的<code>redis.conf</code>复制到<code>/etc/</code>下</p><p>10.<code>vim /etc/redis.conf</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">bind 0.0.0.0</span><br></pre></td></tr></tbody></table></figure><p>11.运行redis，在<code>/redis/src</code>目录下</p><p><code>redis-server /etc/redis.conf</code></p><p>12.进入redis</p><p><code>redis-cli</code></p><p>13.停止redis</p><p><code>redis-cli shutdown</code></p><p>14.完成</p><h2 id="5-安装Zookeeper"><a href="#5-安装Zookeeper" class="headerlink" title="5.安装Zookeeper"></a>5.安装Zookeeper</h2><blockquote><p>官网下载地址：<a href="http://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/">http://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/</a></p></blockquote><ol><li><p>下载Zookeeper安装包</p><p><code>wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</code></p></li><li><p>解压</p><p><code>tar -zxvf zookeeper-3.4.10.tar.gz</code></p></li><li><p>重命名</p><p><code>mv zookeeper-3.4.10 zookeeper</code></p></li><li><p>进入Zookeeper根目录并创建data数据目录</p><p><code>cd zookeeper</code></p><p><code>mkdir data</code></p></li><li><p>复制Zookeeper配置文件</p><p><code>cp ./conf/zoo_sample.cfg ./conf/zoo.cfg</code></p></li><li><p>修改Zookeeper配置文件</p><p><code>vim ./conf/zoo.cfg</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将dataDIr修改为刚刚创建的data目录路径</span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>启动Zookeeper服务</p><p><code>./bin/zkServer.sh start</code></p></li><li><p>查看Zookeeper服务</p><p><code>./bin/zkServer.sh status</code></p></li><li><p>停止Zookeeper服务</p><p><code>./bin/zkServer.sh stop</code></p></li></ol><h2 id="6-安装Kafka"><a href="#6-安装Kafka" class="headerlink" title="6.安装Kafka"></a>6.安装Kafka</h2><blockquote><p>官网下载地址：<a href="http://kafka.apache.org/downloads.html">http://kafka.apache.org/downloads.html</a></p></blockquote><ol><li><p>下载Kafka安装包</p><p><code>wget https://archive.apache.org/dist/kafka/0.10.2.1/kafka_2.12-0.10.2.1.tgz</code></p></li><li><p>解压</p><p><code>tar -zxvf kafka_2.12-0.10.2.1.tgz</code></p></li><li><p>重命名</p><p><code>mv kafka_2.12-0.10.2.1 kafka</code></p></li><li><p>进入Kafka根目录并修改配置文件</p><p><code>cd kafka</code></p><p><code>vim ./config/server.properties</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加如下内容</span></span><br><span class="line">host.name=book</span><br><span class="line">port=9092</span><br><span class="line">zookeeper.connect=book:2181</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动Kafka服务</p><blockquote><p>注意！启动Kafka之前需要启动Zookeeper服务</p></blockquote><p><code>./bin/kafka-server-start.sh -daemon ./config/server.properties</code></p></li><li><p>关闭Kafka服务</p><p><code>./bin/kafka-server-stop.sh</code></p></li></ol><h2 id="7-安装Flume"><a href="#7-安装Flume" class="headerlink" title="7.安装Flume"></a>7.安装Flume</h2><blockquote><p>官网下载地址：<a href="http://archive.apache.org/dist/flume/1.8.0/">http://archive.apache.org/dist/flume/1.8.0/</a></p></blockquote><ol><li><p>下载Flume安装包</p><p><code>wget http://archive.apache.org/dist/flume/1.8.0/apache-flume-1.8.0-bin.tar.gz</code></p></li><li><p>解压</p><p><code>tar -zxvf apache-flume-1.8.0-bin.tar.gz</code></p></li><li><p>重命名</p><p><code>mv apache-flume-1.8.0-bin flume</code></p></li><li><p>等待系统部署</p></li></ol><h2 id="8-安装Node"><a href="#8-安装Node" class="headerlink" title="8.安装Node"></a>8.安装Node</h2>]]></content>
      
      
      <categories>
          
          <category> 推荐系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer35-复杂链表的复制</title>
      <link href="2021/05/25/jian-zhi-offer35-fu-za-lian-biao-de-fu-zhi/"/>
      <url>2021/05/25/jian-zhi-offer35-fu-za-lian-biao-de-fu-zhi/</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>题目描述：</p><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node next;</span><br><span class="line">    Node random;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.random = <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>思路：</p><p>思路一：</p><blockquote><p>思路参考 <a href="https://www.algomooc.com/354.html">吴师兄的图解剑指 Offer 结构化专栏</a></p></blockquote><p>利用哈希表，第一次遍历原链表，通过哈希表将每个节点对应的新节点的位置进行存储，此时新复制的节点只包含val而不包含next和random指针。第二次遍历原链表，从原链表中取出每个新节点所对应的next和random指针。</p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Node cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        map.put(cur, <span class="keyword">new</span> Node(cur.val));</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        map.get(cur).next = map.get(cur.next); <span class="comment">//这里map.get(cur.next)就对应新复制的节点。</span></span><br><span class="line">        map.get(cur).random = map.get(cur.random);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> map.get(head);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>思路二：</p><blockquote><p>思路参考 LeetCode 题解中K神的题解</p></blockquote><p>利用辅助链表，即在遍历原链表时，将每个节点进行复制，然后在进行拆分，如<code>1-&gt;2-&gt;3-&gt;null</code>==&gt;<code>1-&gt;1-&gt;2-&gt;2-&gt;3-&gt;3-&gt;null</code></p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    Node cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">        node.next = cur.next;</span><br><span class="line">        cur.next = node;</span><br><span class="line">        cur = node.next;</span><br><span class="line">    }</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (cur.random != <span class="keyword">null</span>) {</span><br><span class="line">            cur.next.random = cur.random.next;</span><br><span class="line">        }</span><br><span class="line">        cur = cur.next.next;</span><br><span class="line">    }</span><br><span class="line">    cur = head.next;</span><br><span class="line">    Node pre = head;</span><br><span class="line">    Node res = head.next;</span><br><span class="line">    <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>) {</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">    pre.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>先复制节点，然后找到节点对应的random指针，最后将整个链表拆分</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 链表 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer24-反转链表</title>
      <link href="2021/05/24/jian-zhi-offer24-fan-zhuan-lian-biao/"/>
      <url>2021/05/24/jian-zhi-offer24-fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>题目描述：</p><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>思路：</p><p>思路一：</p><blockquote><p>思路参考 <a href="https://www.algomooc.com/347.html">吴师兄的图解剑指 Offer 结构化专栏</a></p></blockquote><p>使用三个指针，分别为 pre、cur、next，其中 pre 初始为 null，也是最终返回的链表头节点，cur 指向当前链表的头节点，next 为 cur 节点的下一个节点，遍历 cur 指针直至为 null，将 cur 的下一指针进行反转指向 pre ，然后将三个指针依次向后移动，最终返回 pre。</p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    <span class="keyword">if</span> (cur.next == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    }</span><br><span class="line">    ListNode next = cur.next;</span><br><span class="line">    <span class="keyword">while</span> (next != <span class="keyword">null</span>) {</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">        next = next.next;</span><br><span class="line">    }</span><br><span class="line">    cur.next = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码写法二：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line">    <span class="keyword">if</span> (cur.next == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">        ListNode next = cur.next;</span><br><span class="line">        cur.next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码写法三:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    ListNode q = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="keyword">null</span>){</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        p.next = q;</span><br><span class="line">        q=p;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>LeetCode 上有关于递归的解法，需要继续学习</p></blockquote><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>思路二：</p><blockquote><p>思路参考 LeetCode 题解</p></blockquote><p>通过递归，每次返回反转的链表头节点，反转步骤为</p><p><code>pre.next.next = pre;</code></p><p><code>pre.next = null;</code></p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">    ListNode newHead = reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 链表 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer22-链表中倒数第K个节点</title>
      <link href="2021/05/23/jian-zhi-offer22-lian-biao-zhong-dao-shu-di-k-ge-jie-dian/"/>
      <url>2021/05/23/jian-zhi-offer22-lian-biao-zhong-dao-shu-di-k-ge-jie-dian/</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>题目描述：</p><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>思路：</p><p>思路一：</p><p>使用快慢两个指针，两个指针之间相差K个节点，当快指针指向链表尾端时，慢节点指向倒数第K个节点。</p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">    <span class="comment">//  快指针</span></span><br><span class="line">    ListNode fast = head;</span><br><span class="line">    <span class="comment">//  慢指针</span></span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="keyword">null</span>) {</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="number">0</span>) {</span><br><span class="line">            k--;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>快慢指针的命名：</p><p>快 former</p><p>慢 latter</p><p>另一种写法可以先通过 K 步 for 循环找到快指针的位置，再进行 while 循环。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 链表 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer18-删除链表节点</title>
      <link href="2021/05/22/jian-zhi-offer18-shan-chu-lian-biao-jie-dian/"/>
      <url>2021/05/22/jian-zhi-offer18-shan-chu-lian-biao-jie-dian/</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>题目描述：</p><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。</p><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>思路：</p><p>思路：</p><p>用一个辅助指针对链表进行遍历，遇见待删除的元素时，将当前节点的<code>next</code>指针指向下下个节点。</p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteNode</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(head.val==val) <span class="keyword">return</span> head.next;</span><br><span class="line">    ListNode p = head;</span><br><span class="line">    <span class="keyword">while</span>(p.next!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">if</span>(p.next.val==val){</span><br><span class="line">            p.next = p.next.next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        p = p.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意返回的是head而不是cur，因为cur指针相当于游标，相较于原head会有变化。</p><p>看别人的题解，会对节点进行判空操作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer06-从尾到头打印链表</title>
      <link href="2021/05/22/jian-zhi-offer06-cong-wei-dao-tou-da-yin-lian-biao/"/>
      <url>2021/05/22/jian-zhi-offer06-cong-wei-dao-tou-da-yin-lian-biao/</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>题目描述：</p><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p><span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>思路：</p><p>思路一：</p><p>题意是对链表的倒序输出，自然会想到一种先入后出的数据结构——栈，将链表中的元素依次入栈，再出栈得出结果。</p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) {</span><br><span class="line"><span class="comment">// 使用栈，依次出栈</span></span><br><span class="line">ListNode cur = head;</span><br><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (cur.next != <span class="keyword">null</span>) {</span><br><span class="line">stack.push(cur.val);</span><br><span class="line">cur = cur.next;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 如果在fori中有stack.size()，会因为pop()出栈操作而导致出循环的次数有变化</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"><span class="keyword">int</span> len = stack.size();</span><br><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">res[i] = stack.pop();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>思路二：</p><p>可以通过方法调用的顺序，使用递归</p><p><span class="github-emoji"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) {</span><br><span class="line"><span class="comment">// 2.尝试递归</span></span><br><span class="line">ListNode cur = head;</span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">reverse(cur, list);</span><br><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : list) {</span><br><span class="line">res[index++] = num;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ListNode head, ArrayList&lt;Integer&gt; list)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head != <span class="keyword">null</span>) {</span><br><span class="line">reverse(head.next, list);</span><br><span class="line">list.add(head.val);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 剑指Offer </tag>
            
            <tag> 链表 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于大数据的图书推荐系统系列(一)——基础环境搭建</title>
      <link href="2021/03/19/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-lie-yi-ji-chu-huan-jing-da-jian/"/>
      <url>2021/03/19/ji-yu-da-shu-ju-de-tu-shu-tui-jian-xi-tong-xi-lie-yi-ji-chu-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机基础环境搭建"><a href="#虚拟机基础环境搭建" class="headerlink" title="虚拟机基础环境搭建"></a>虚拟机基础环境搭建</h1><h2 id="1-创建虚拟机"><a href="#1-创建虚拟机" class="headerlink" title="1.创建虚拟机"></a>1.创建虚拟机</h2><p>1.打开VMware，创建新的虚拟机</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192021650.png" alt="image-20210310192021650"></p><p>2.选择典型，下一步</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192109439.png" alt="image-20210310192109439"></p><p>3.选择稍后安装，下一步</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192137322.png" alt="image-20210310192137322"></p><p>4.选择系统版本，下一步</p><blockquote><p>我选择的系统版本是CentOS 6.8</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192212269.png" alt="image-20210310192212269"></p><p>5.填写虚拟机名称以及选择虚拟机存放的位置，下一步</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192256120.png" alt="image-20210310192256120"></p><p>6.选择虚拟机磁盘大小，我这里按照默认配置，下一步</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192328207.png" alt="image-20210310192328207"></p><p>7.点击自定义硬件</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192358456.png" alt="image-20210310192358456"></p><p>8.选择内存、处理器核数以及选择本地的系统镜像，网络我选择NAT，点击关闭即可完成配置</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192524928.png" alt="image-20210310192524928"></p><p>9.上一步点击关闭后就是下面的状态</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192602221.png" alt="image-20210310192602221"></p><p>10.然后开启此虚拟机，默认回车开始安装系统</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192841880.png" alt="image-20210310192715802"></p><p>11.是否测试系统镜像，我选择跳过测试直接开始安装</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192808906.png" alt="image-20210310192808906"></p><p>12.点击Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192841880.png" alt="image-20210310192841880"></p><p>13.选择英语，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192911574.png" alt="image-20210310192937755"></p><p>14.选择英语，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310192937755.png" alt="image-20210310192937755"></p><p>15.默认选择就行，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193009337.png" alt="image-20210310193009337"></p><p>16.选择Yes，清空数据，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193037559.png" alt="image-20210310193037559"></p><p>17.填写Hostname，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193118263.png" alt="image-20210310193118263"></p><p>18.选择时区Shanghai，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193145058.png" alt="image-20210310193145058"></p><p>19.设置root账户密码，太简单的会报警告，直接Use Anyway就行</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193241553.png" alt="image-20210310193241553"></p><p>20.选择默认，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193324004.png" alt="image-20210310193324004"></p><p>21.Write changes to disk</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193344324.png" alt="image-20210310193344324"></p><p>22.这里我图简单选择带有桌面的系统，Next</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310193440108.png" alt="image-20210310193440108"></p><p>23.此时系统开始安装</p><p>24.安装完成后需要重启</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310194720408.png" alt="image-20210310194720408"></p><p>25.重启后进入设置界面</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310194903761.png" alt="image-20210310194903761"></p><p>26.Agree，Forward</p><p>27.创建一个User，这里创建的非root用户在后面会用到，Forward</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310195024889.png" alt="image-20210310195024889"></p><p>28.选择时间同步</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310195121311.png" alt="image-20210310195121311"></p><p>29.Finish！</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310195137692.png" alt="image-20210310195137692"></p><p>30.选择Yes</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310195158504.png" alt="image-20210310195158504"></p><p>31.然后点击ok等待系统重启</p><blockquote><p>从这里开始我都是使用root账户进行登录操作，创建的非root账户后面在使用ES时会用到，暂时不管</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310195601454.png" alt="image-20210310195601454"></p><h2 id="2-虚拟机基础设置"><a href="#2-虚拟机基础设置" class="headerlink" title="2.虚拟机基础设置"></a>2.虚拟机基础设置</h2><h3 id="2-1网络"><a href="#2-1网络" class="headerlink" title="2.1网络"></a>2.1网络</h3><p>1.进入系统桌面后，右键打开Terminate，输入<code>ifconfig</code>发现并没有IP地址，并且桌面右上角的网络连接符号有红叉</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310195848591.png" alt="image-20210310195848591"></p><p>2.点击网络连接，点击system 0，然后在输入命令<code>ifconfig</code>就能看见有IP地址了</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310195941094.png" alt="image-20210310195941094"></p><p>3.此时的IP应该是动态IP，我习惯设置为静态IP，过程如下：输入命令<code>vim /etc/sysconfig/network-scripts/ifcfg-eth0</code>，系统默认设置如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310200340565.png" alt="image-20210310200340565"></p><p>修改为：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310200627462.png" alt="image-20210310200627462"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.2.88</span><br><span class="line">GATEWAY=192.168.2.1</span><br><span class="line">BROADCAST=192.168.2.255</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></tbody></table></figure><p>4.修改hosts：输入命令<code>vim /etc/hosts</code>，添加如下语句</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310200922105.png" alt="image-20210310200922105"></p><p>5.重启网络服务，分别输入如下命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager stop</span><br><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></tbody></table></figure><p>6.关闭关机自启，输入如下命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig NetworkManager off</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2配置防火墙"><a href="#2-2配置防火墙" class="headerlink" title="2.2配置防火墙"></a>2.2配置防火墙</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">service iptables stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭开机自启</span></span><br><span class="line">chkconfig iptables off</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙状态</span></span><br><span class="line">service iptables status</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310201529171.png" alt="image-20210310201529171"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310201207061.png" alt="image-20210310201207061"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20210310201301067.png" alt="image-20210310201301067"></p>]]></content>
      
      
      <categories>
          
          <category> 推荐系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx笔记</title>
      <link href="2020/12/07/nginx-bi-ji/"/>
      <url>2020/12/07/nginx-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/nginx.png" alt="image-20201207212019627"></p><h1 id="Nginx安装过程"><a href="#Nginx安装过程" class="headerlink" title="Nginx安装过程"></a>Nginx安装过程</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>安装<code>gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</code></p><h2 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h2><p><code>wget -c https://nginx.org/download/nginx-1.12.1.tar.gz</code></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><code>tar -zxvf  nginx-1.12.0.tar.gz</code></p><p><code>cd nginx-1.12.1</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>./configure</code></p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p><code>make &amp;&amp; make install</code></p><h2 id="启动、停止Nginx"><a href="#启动、停止Nginx" class="headerlink" title="启动、停止Nginx"></a>启动、停止Nginx</h2><p><code>cd /usr/local/nginx/sbin</code></p><p><code>./nginx</code></p><p><code>./nginx -s stop</code></p><p><code>./nginx -s quit</code></p><p><code>./nginx -s reload</code></p><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><p>在<code>rc.local</code>增加启动代码</p><p><code>vim /etc/rc.local</code></p><p>增加一行</p><p><code>/usr/lcoal/nginx/sbin/nginx</code></p><p>设置执行权限</p><p><code>chmod 755 rc.local</code></p><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>默认配置文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ {</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #}</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ {</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #}</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht {</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #}</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server {</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / {</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    }</span><br><span class="line">    #}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server {</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / {</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    }</span><br><span class="line">    #}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以将<code>nginx.conf</code>配置文件分为三部分：</p><p><strong>第一部分：全局块</strong></p><p>从配置文件开始到<code>events</code>块之前的内容，主要设置一些影响nginx服务器整体运行的配置指令，主要包括配置运行Nginx服务器的用户（组）、允许生成的worker process数，进程PID存放路径、日志存放路径和类型以及配置文件的引入等。</p><p><strong>第二部分：events块</strong></p><p>events块涉及的指令主要影响Nginx服务器与用户的网络连接，常用的设置包括是否开启对多work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动来处理连接请求，每个work process可以同时支持的最大连接数等。</p><p><strong>第三部：http块</strong></p><p>http块是Nginx服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。http块也可以包括http全局块、server块。</p><ul><li><p>http全局块，其指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等  。</p></li><li><p>server块，这部分和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。  每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。  而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。  </p><ul><li><p>全局server块</p><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。  </p></li><li><p>location块</p><p>一个 server 块可以配置多个 location 块。这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。  </p></li></ul></li></ul><h2 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h2><p>效果：</p><p>使用Nginx反向代理，根据访问路径跳转到不同端口的服务中，nginx监听端口为9001，访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8081，访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8082  </p><p>配置：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">9001</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /edu/</span> {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8081;</span><br><span class="line">    }</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /vod/</span> {</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>location用于匹配URL</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~</span> ] uri {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>1、 = ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配 成功，就停止继续向下搜索并立即处理该请求。<br>2、 ~：用于表示 uri 包含正则表达式，并且区分大小写。<br>3、 ~<em>：用于表示 uri 包含正则表达式，并且不区分大小写。<br>4、 ^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字 符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。<br>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~</em> 标识。  </p></blockquote><p>参考配置：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html {</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ {</span></span><br><span class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ {</span></span><br><span class="line">    <span class="comment">#    root           html;</span></span><br><span class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">    <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx's one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht {</span></span><br><span class="line">    <span class="comment">#    deny  all;</span></span><br><span class="line">    <span class="comment">#}</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="attribute">upstream</span> test{</span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.1.18.205:8080</span>;</span><br><span class="line">    <span class="comment">#server 10.1.18.70:8080;</span></span><br><span class="line">    <span class="comment">#server 10.1.18.71:8080;</span></span><br><span class="line">    <span class="comment">#server 10.1.18.86:8080;</span></span><br><span class="line">    <span class="comment">#server 10.1.18.77:8081;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">84</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">root</span>  /usr/local/webs/dbsiNewTest;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / {</span><br><span class="line">        <span class="comment">#  root  /usr/local/webs/dbsiNewTest;</span></span><br><span class="line">        <span class="attribute">index</span>  index.html;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">    }</span><br><span class="line">      <span class="comment"># 所有静态请求都由nginx处理，存放目录为html</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .(gif|jpg|jpeg|png|bmp|swf|css|js)$</span> {</span><br><span class="line">        <span class="attribute">root</span>  /usr/local/webs/dbsiNewTest;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /DBSI_BI/ {</span><br><span class="line">       <span class="comment">#  rewrite ^/DBSI_BI/(.*)$ /DBSI_BI/$1 break;</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment"># location ^~ /DBSI_BI/ {</span></span><br><span class="line">        <span class="comment"># rewrite ^/DBSI_BI/(.*)$ /BI/$1 break;</span></span><br><span class="line">        <span class="comment"># proxy_pass http://10.1.18.205:8080;</span></span><br><span class="line">    <span class="comment">#  }</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /saiku_api/ {</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/saiku_api/(.*)$</span> /saiku/rest/saiku/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://10.1.18.205:8080;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /Checking/ {</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/Checking/(.*)$</span> /409base/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://10.1.18.205:8080;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /DataMining/ {</span><br><span class="line">        <span class="comment"># rewrite ^/DataMining/(.*)$ /DataMining/$1 break;</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /UserProfile/ {</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/UserProfile/(.*)$</span> /userprofile/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://10.1.18.205:8080;</span><br><span class="line">    }</span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /Storyboard/ {</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/Storyboard/(.*)$</span> /storyboard/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://10.1.18.205:8080;</span><br><span class="line">    }</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html {</span><br><span class="line">        <span class="attribute">root</span>  /usr/local/webs/dbsiNewTest;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8480</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 所有静态请求都由nginx处理，存放目录为html</span></span><br><span class="line">    <span class="comment">#  location ~ .(gif|jpg|jpeg|png|bmp|swf|css|js)$ {</span></span><br><span class="line">        <span class="comment">#  root  /usr/local/webs/dbsiNewTest;</span></span><br><span class="line">    <span class="comment"># }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># location ^~ /DataMining/ {</span></span><br><span class="line">        <span class="comment"># rewrite ^/DataMining/(.*)$ /DataMining/$1 break;</span></span><br><span class="line">        <span class="comment"># proxy_pass http://10.1.18.205:8080;</span></span><br><span class="line">    <span class="comment"># }</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /Storyboard/ {</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/Storyboard/(.*)$</span> /storyboard/olapStoryBoard/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://bi.io;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Nginx配置详细解释</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#普通配置</span></span><br><span class="line"><span class="comment">#==性能配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行用户</span></span><br><span class="line"><span class="attribute">user</span> nobody;</span><br><span class="line"><span class="comment">#pid文件</span></span><br><span class="line"><span class="attribute">pid</span> logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Nginx基于事件的非阻塞多路复用模型（epoll或kquene）</span></span><br><span class="line"><span class="comment">#一个进程在短时间内可以响应大量请求，工作进程设置与cpu数相同，避免cpu在多个进程间切换增加开销</span></span><br><span class="line"><span class="comment">#==worker进程数，通常设置&lt;=CPU数量，auto为自动检测，一般设置最大8个即可，再大性能提升较小或不稳定</span></span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="comment">#==将每个进程绑定到特定cpu上，避免进程在cpu间切换的开销</span></span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> <span class="number">00000001</span> <span class="number">00000010</span> <span class="number">00000100</span> <span class="number">00001000</span> <span class="number">00010000</span> <span class="number">00100000</span> <span class="number">01000000</span> <span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#==worker进程打开最大文件数，可CPU*10000设置，或设置系统最大数量655350</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">102400</span>;</span><br><span class="line"><span class="comment">#全局错误日志</span></span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#events模块中包含nginx中所有处理连接的设置，并发响应能力的关键配置</span></span><br><span class="line"><span class="section">events</span> {</span><br><span class="line">    <span class="comment">#==每个进程同时打开的最大连接数（最大并发数）</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">102400</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#==告诉nginx收到一个新链接通知后接受尽可能多的链接</span></span><br><span class="line">    <span class="comment">#multi_accept on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#一般http 1.1协议下，浏览器默认使用两个并发链接</span></span><br><span class="line">    <span class="comment">#如果是反向代理，nginx需要和客户端保持连接，还需要和后端服务器保持连接</span></span><br><span class="line">    <span class="comment">#Http服务器时，设置max_client=worker_processes*worker_connections/2</span></span><br><span class="line">    <span class="comment">#反向代理时，设置max_client=worker_processes*worker_connections/4    </span></span><br><span class="line">    <span class="comment">#==最大可用客户端数</span></span><br><span class="line">    <span class="comment">#max_client </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#==使用非阻塞模型，设置复用客户端线程的轮训方法</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#http模块控制着nginx http处理的所有核心特性</span></span><br><span class="line"><span class="section">http</span> {</span><br><span class="line">    <span class="comment">#打开或关闭错误页面中的nginx版本号等信息</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#!server_tag on;</span></span><br><span class="line">    <span class="comment">#!server_info on;</span></span><br><span class="line">    <span class="comment">#==优化磁盘IO设置，指定nginx是否调用sendfile函数来输出文件，普通应用设为on，下载等磁盘IO高的应用，可设为off</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#缓存发送请求，启用如下两个配置，会在数据包达到一定大小后再发送数据</span></span><br><span class="line">    <span class="comment">#这样会减少网络通信次数，降低阻塞概率，但也会影响响应的及时性</span></span><br><span class="line">    <span class="comment">#比较适合于文件下载这类的大数据包通信场景</span></span><br><span class="line">    <span class="comment">#tcp_nopush on;</span></span><br><span class="line">    <span class="comment">#tcp_nodelay on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#==设置nginx是否存储访问日志，关闭这个可以让读取磁盘IO操作更快</span></span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#设置nginx只记录严重错误，可减少IO压力</span></span><br><span class="line">    <span class="comment">#error_log logs/error.log crit;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Http1.1支持长连接</span></span><br><span class="line">    <span class="comment">#降低每个链接的alive时间可在一定程度上提高响应连接数量</span></span><br><span class="line">    <span class="comment">#==给客户端分配keep-alive链接超时时间</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置用户保存各种key的共享内存的参数，5m指的是5兆</span></span><br><span class="line">    <span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=addr:<span class="number">5m</span>;</span><br><span class="line">    <span class="comment">#为给定的key设置最大的连接数，这里的key是addr，设定的值是100，就是说允许每一个IP地址最多同时打开100个连接</span></span><br><span class="line">    <span class="attribute">limit_conn</span> addr <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#include指在当前文件中包含另一个文件内容</span></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    <span class="comment">#设置文件使用默认的mine-type</span></span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="comment">#设置默认字符集</span></span><br><span class="line">    <span class="attribute">charset</span> UTF-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#==设置nginx采用gzip压缩的形式发送数据，减少发送数据量，但会增加请求处理时间及CPU处理时间，需要权衡</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#==加vary给代理服务器使用，针对有的浏览器支持压缩，有个不支持，根据客户端的HTTP头来判断是否需要压缩</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#nginx在压缩资源之前，先查找是否有预先gzip处理过的资源</span></span><br><span class="line">    <span class="comment">#!gzip_static on;</span></span><br><span class="line">    <span class="comment">#为指定的客户端禁用gzip功能</span></span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">"MSIE[1-6]\."</span>;</span><br><span class="line">    <span class="comment">#允许或禁止压缩基于请求和相应的响应流，any代表压缩所有请求</span></span><br><span class="line">    <span class="attribute">gzip_proxied</span> any;</span><br><span class="line">    <span class="comment">#==启用压缩的最少字节数，如果请求小于1024字节则不压缩，压缩过程会消耗系统资源</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">#==数据压缩等级，1-9之间，9最慢压缩比最大，压缩比越大对系统性能要求越高</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">#需要压缩的数据格式</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css text/xml text/javascript  application/json application/x-javascript application/xml application/xml+rss; </span><br><span class="line"></span><br><span class="line">    <span class="comment">#静态文件缓存</span></span><br><span class="line">    <span class="comment">#==开启缓存的同时也指定了缓存文件的最大数量，20s如果文件没有被请求则删除缓存</span></span><br><span class="line">    <span class="attribute">open_file_cache</span> max=<span class="number">100000</span> inactive=<span class="number">20s</span>;</span><br><span class="line">    <span class="comment">#==多长时间检查一次缓存的有效期</span></span><br><span class="line">    <span class="attribute">open_file_cache_valid</span> <span class="number">30s</span>;</span><br><span class="line">    <span class="comment">#==有效期内缓存文件最小的访问次数，只有访问超过2次的才会被缓存</span></span><br><span class="line">    <span class="attribute">open_file_cache_min_uses</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">#当搜索一个文件时是否缓存错误信息</span></span><br><span class="line">    <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#==允许客户端请求的最大单文件字节数</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">4m</span>;</span><br><span class="line">    <span class="comment">#==客户端请求头缓冲区大小</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#是否启用对发送给客户端的URL进行修改</span></span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="comment">#==nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">60</span>;</span><br><span class="line">    <span class="comment">#==连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">120</span>;</span><br><span class="line">    <span class="comment">#==后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">    <span class="attribute">proxy_send_timeout</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">#==设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">    <span class="attribute">proxy_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line">    <span class="comment">#==proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">    <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="comment">#==高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    <span class="attribute">proxy_busy_buffers_size</span> <span class="number">256k</span>;</span><br><span class="line">    <span class="comment">#==设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">    <span class="attribute">proxy_temp_file_write_size</span> <span class="number">256k</span>;</span><br><span class="line">    <span class="comment">#==1G内存缓冲空间，3天不用删除，最大磁盘缓冲空间2G</span></span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /home/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=cache_one:<span class="number">1024m</span> inactive=<span class="number">3d</span> max_size=<span class="number">2g</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#设定负载均衡服务器列表</span></span><br><span class="line">    <span class="attribute">upstream</span> nginx.test.com{</span><br><span class="line">        <span class="comment">#后端服务器访问规则</span></span><br><span class="line">        <span class="comment">#ip_hash;</span></span><br><span class="line">        <span class="comment">#weight参数表示权重值，权值越高被分配到的几率越大</span></span><br><span class="line">        <span class="comment">#server 10.11.12.116:80 weight=5;</span></span><br><span class="line">        <span class="comment">#PC_Local</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">10.11.12.116:80</span>;</span><br><span class="line">        <span class="comment">#PC_Server</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">10.11.12.112:80</span>;</span><br><span class="line">        <span class="comment">#Notebook</span></span><br><span class="line">        <span class="comment">#server 10.11.12.106:80;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">#server代表虚拟主机，可以理解为站点（挂载多个站点，只需要配置多个server及upstream节点即可）</span></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="comment">#监听80端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment">#识别的域名，定义使用nginx.test.com访问</span></span><br><span class="line">        <span class="attribute">server_name</span> nginx.test.com;</span><br><span class="line">        <span class="comment">#设定本虚拟主机的访问日志</span></span><br><span class="line">        <span class="attribute">access_log</span> logs/nginx.test.com.access.log;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#一个域名下匹配多个URI的访问，使用location进行区分，后面紧跟着的/代表匹配规则</span></span><br><span class="line">        <span class="comment">#如动态资源访问和静态资源访问会分别指向不同的位置的应用场景</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># 基本语法规则：location [=|~|~*|^~] /uri/ {...} </span></span><br><span class="line">        <span class="comment"># = 开头表示精确匹配</span></span><br><span class="line">        <span class="comment"># ^~ 开头表示uri以某个常规字符串开头，匹配成功后不再进行正则匹配</span></span><br><span class="line">        <span class="comment"># ~ 开头表示区分大小写的正则匹配</span></span><br><span class="line">        <span class="comment"># ~* 开头表示不区分大小写的正则匹配</span></span><br><span class="line">        <span class="comment"># !~ 开头表示区分大小写的不匹配的正则</span></span><br><span class="line">        <span class="comment"># !~* 开头表示不区分大小写的不匹配的正则</span></span><br><span class="line">        <span class="comment"># / 通用匹配，任何请求都会被匹配到</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># 理解如下：</span></span><br><span class="line">        <span class="comment"># 有两种匹配模式：普通字符串匹配，正则匹配</span></span><br><span class="line">        <span class="comment"># 无开头引导字符或以=开头表示普通字符串匹配</span></span><br><span class="line">        <span class="comment"># 以~或~*开头表示正则匹配，~*表示不区分大小写</span></span><br><span class="line">        <span class="comment"># 【多个location时，先匹配普通字符串location，再匹配正则location】</span></span><br><span class="line">        <span class="comment"># 只识别URI部分，例如请求为“/test/1/abc.do?arg=xxx”</span></span><br><span class="line">        <span class="comment"># （1）先查找是否有=开头的精确匹配，即“location=/test/1/abc.do {...}”</span></span><br><span class="line">        <span class="comment"># （2）再查找普通匹配，以“最大前缀”为规则，如有以下两个location</span></span><br><span class="line">        <span class="comment">#    location /test/ {...}</span></span><br><span class="line">        <span class="comment">#    location /test/1/ {...}</span></span><br><span class="line">        <span class="comment">#    则匹配后一项</span></span><br><span class="line">        <span class="comment"># （3）匹配到一个普通location后，搜索并未结束，而是暂存当前结果，并继续进行正则搜索</span></span><br><span class="line">        <span class="comment"># （4）在所有正则location中找到第一个匹配项后，以此匹配项为最终结果</span></span><br><span class="line">        <span class="comment"># 【所以正则匹配项，匹配规则受定义前后顺序影响，但普通匹配不会】</span></span><br><span class="line">        <span class="comment"># （5）如果未找到正则匹配项，则以（3）中缓存的结果为最终结果</span></span><br><span class="line">        <span class="comment"># （6）如果一个匹配都没有，则返回404</span></span><br><span class="line">        <span class="comment"># location =/ {...}与location / {...}的差别</span></span><br><span class="line">        <span class="comment"># 前一个是精确匹配，只响应“/”的请求，所有“/xxx”形式的请求不会以“前缀匹配形式”匹配到它</span></span><br><span class="line">        <span class="comment"># 后一个正相反，所有请求必然都是以“/”开头，所以没有其他匹配结果时一定会执行到它</span></span><br><span class="line">        <span class="comment"># location ^~ / {...} ^~的意思是禁止正则匹配，表示匹配到此项后不再进行后续的正则搜索</span></span><br><span class="line">        <span class="comment"># 相当于普通匹配模式匹配成功后就以此结果为最终结果，停止进行后续的正则匹配</span></span><br><span class="line">        <span class="attribute">location</span> / {</span><br><span class="line">            <span class="comment">#定义服务器的默认网站根目录位置，可以写相对路径，也可以写绝对路径</span></span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">            <span class="comment">#定义首页索引文件的名称</span></span><br><span class="line">            <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">            <span class="comment">#定义转发后端负载服务器组</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://nginx.test.com;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">#定义错误提示页面</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html {</span><br><span class="line">            <span class="attribute">root</span> html;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">#静态文件，nginx自己处理</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(images|javascript|js|css|flash|media|static)/</span>{</span><br><span class="line">            <span class="attribute">root</span> /var/www/virtual/htdocs;</span><br><span class="line">            <span class="comment">#过期时间1天</span></span><br><span class="line">            <span class="attribute">expires</span> <span class="number">1d</span>;</span><br><span class="line">            <span class="comment">#关闭媒体文件日志</span></span><br><span class="line">            <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">        <span class="attribute">location</span> /NginxStatus {</span><br><span class="line">            <span class="comment">#!stub_status on; #无此关键字</span></span><br><span class="line">            <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">auth_basic</span> <span class="string">"NginxStatus"</span>;</span><br><span class="line">            <span class="attribute">auth_basic_user_file</span> conf/htpasswd;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">#禁止访问的文件.htxxx</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> {</span><br><span class="line">            <span class="comment">#deny all;禁止访问，返回403</span></span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">            <span class="comment">#allow all;允许访问</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">#网站较多的情况下ngxin又不会请求瓶颈可以考虑挂多个站点，并把虚拟主机配置单独放在一个文件内，引入进来</span></span><br><span class="line">    <span class="comment">#include website.conf;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>参考文章：</p><p><a href="https://www.cnblogs.com/liujuncm5/p/6713784.html">https://www.cnblogs.com/liujuncm5/p/6713784.html</a></p><p><a href="https://www.cnblogs.com/taiyonghai/p/5610112.html">https://www.cnblogs.com/taiyonghai/p/5610112.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑记录之CentOS登录问题</title>
      <link href="2020/12/03/cai-keng-ji-lu-zhi-centos-deng-lu-wen-ti/"/>
      <url>2020/12/03/cai-keng-ji-lu-zhi-centos-deng-lu-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/note_cover1.png" alt="image-20201203104847731"></p><p>最近登录虚拟机，发现正确的用户和密码无法登录，出现如下图的问题提示：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201203105125584.png" alt="image-20201203105125584"></p><p>刚好前几天看《Linux就该这么学》这本书上有讲述如何重置root管理员密码的内容，索性尝试一下。</p><ol><li>重启系统</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201203105803864.png" alt="image-20201203105803864"></p><ol><li>在进入系统之前选中第一行，点击<code>e</code>进入该选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201203105826300.png" alt="image-20201203105826300"></p><ol><li>进入的编辑模式是这样的：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201203110226134.png" alt="image-20201203110226134"></p><ol><li>往下找，找到<code>linux16</code>这一行，在末尾<code>UTF-8</code>后面进行编辑，空格之后输入<code>rd.break</code>，换行的时候会自动加上换行符<code>\</code>，然后<code>Ctrl + X</code>运行该程序。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201203110336712.png" alt="image-20201203110336712"></p><ol><li>大概30秒后会进入下面的界面，即系统的紧急救援模式。依次输入以下命令，然后等待系统重启。</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /sysroot</span><br><span class="line">chroot /sysroot</span><br><span class="line">passwd</span><br><span class="line">rouch /.autorelabel</span><br><span class="line">exit</span><br><span class="line">reboot</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201203110554935.png" alt="image-20201203110554935"></p><ol><li>完成！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCS权威指南笔记</title>
      <link href="2020/11/11/ccs-quan-wei-zhi-nan-bi-ji/"/>
      <url>2020/11/11/ccs-quan-wei-zhi-nan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><h3 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h3><p><img src="C:\Users\wan\AppData\Roaming\Typora\typora-user-images\image-20201111093808310.png" alt="链接伪类"></p><h3 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h3><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201111094011241.png" alt="动态伪类"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201111094025916.png" alt="动态伪类"></p><h3 id="静态伪类"><a href="#静态伪类" class="headerlink" title="静态伪类"></a>静态伪类</h3><p><code>:first-child</code></p><p>选择元素的第一个子元素</p><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul><li><p>设置首字母样式</p><p><code>p:first-letter{font-size:200%;}</code></p></li><li><p>设置第一行的样式</p><p><code>p:first-line{color:purple;}</code></p></li><li><p>设置之前元素的样式</p><p><code>h2:before{content:"}}";color:sliver;}</code></p></li><li><p>设置之后元素的样式</p><p><code>body:after{cpntent: "The End.";}</code></p></li></ul><h1 id="浮动和定位"><a href="#浮动和定位" class="headerlink" title="浮动和定位"></a>浮动和定位</h1><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p><code>float:left|right|none|inherit</code></p><h3 id="浮动元素"><a href="#浮动元素" class="headerlink" title="浮动元素"></a>浮动元素</h3><ul><li>对于浮动元素，会以某种方式将浮动元素从文档的正常流中删除，不过还是会影响布局</li><li>浮动元素的外边距存在并且不会合并</li></ul><h3 id="包含块（containning-block）"><a href="#包含块（containning-block）" class="headerlink" title="包含块（containning block）"></a>包含块（containning block）</h3><p>浮动元素的包含块是其最近的块级祖先元素</p><ul><li><p>浮动元素的左右外边界不能超过其包含块的左右内边界</p></li><li><p>浮动元素的左（或右）外边界必须是源文档中之前出现的左浮动（或右浮动）元素的右（左）外边界，除非后出现浮动元素的顶端在先出现浮动元素的底端下面</p><blockquote><p>这个规则的好处在于，所有浮动内容都是可见的</p></blockquote></li><li><p>左浮动元素的右外边界不会在其右边右浮动元素的左外边界的右边。一个右浮动元素的左外边界不会在其左边任何左浮动元素的右外边界的左边。</p><blockquote><p>防止浮动元素相互重叠</p></blockquote></li><li><p>一个浮动元素的顶端不能比其父元素的内顶端更高。如果一个浮动元素在两个合并外边距之间，放置这个浮动元素时就好像在两个元素之间有一个块级元素。</p><blockquote><p>该规则前半部分可以防止浮动元素一直浮动到文档的顶端。第二部分则是对某些情况下的对齐进行微调。</p></blockquote></li><li><p>浮动元素的顶端不能比之前所有浮动元素或块级元素的顶端更高。</p><blockquote><p>即要求浮动元素不能一直浮动到其父元素的顶端，另外，浮动元素的顶端也不可能比之前出现的浮动元素的顶端更高</p></blockquote></li><li><p>如果源文档中一个浮动元素之前出现另一个元素，浮动元素的顶端不能比包含该元素所生成框的任何行框的顶端更高</p><blockquote><p>进一步限制元素的 向上浮动，不允许元素浮动到包含该元素之前内容的行的顶端之上。</p></blockquote></li><li><p>左（或右）浮动元素的左边（右边）有另一个浮动元素，前者的右外边界不能在其包含块的右（左）边界的右边（左边）</p><blockquote><p>就是说，浮动元素不能超出其包含元素的边界，除非它太宽，本身都无法放下。</p></blockquote></li><li><p>浮动元素必须尽可能高地放置</p></li><li><p>左浮动元素必须向左尽可能远，右浮动元素则必须向右尽可能远，位置越高，就会向右或向左浮动得越远。</p></li></ul><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p><code>clear: none|left|right|both</code></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p><code>position: static|relative|absolute|fixed|inherit</code></p><ul><li><p>static</p><p>元素框正常生成</p></li><li><p>relative</p><p>元素框偏移某个距离。元素仍保持其未定位之前的形状，它原本所占据的空间仍保留</p></li><li><p>absolute</p><p>元素框从文档流完全删除，并相对于其包含块定位，包含块可能是文档中的另一个元素或者是初始化包含块。元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。元素定位后会生成一个块级框，而不论原来它在正常流中生成何种类型的框。</p></li><li><p>fixed</p><p>类似于absolute，不过其包含块是视窗本身</p></li></ul><p><code>relative</code>、<code>absolute</code>、<code>fixed</code>三个属性值有一个共同点，都是相对于某个基点的定位，不同之处在于基点不同。这三种定位都不会对其他元素的位置产生影响，因此元素之间可能产生重叠。</p><ul><li><p>relative，相对于默认位置进行偏移，即定位基点是元素的默认位置</p></li><li><p>absolute，相对于上级元素（一般是父元素）进行偏移，即定位基点是父元素</p><blockquote><p>限制条件：定位基点（一般是父元素）不能是<code>static</code>定位，否则定位基点就会变成整个网页的根元素<code>html</code></p><p>注意，<code>absolute</code>定位的元素会被“正常页面流”忽略，即在“正常页面流”中，该元素所占空间为零，周边元素不受影响。</p></blockquote></li><li><p>fixed，相对于浏览器窗口（<code>viewport</code>）进行偏移，即定位基点是浏览器窗口，这会导致元素的位置不随页面滚动而变化，如同固定在网页上一样。</p></li></ul><h3 id="内容溢出与裁剪"><a href="#内容溢出与裁剪" class="headerlink" title="内容溢出与裁剪"></a>内容溢出与裁剪</h3><h4 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h4><p><code>overflow: visible | hidden | scroll | auto | inherit</code></p><ul><li><p>visible</p><p>visible表示元素的内容在元素框之外也可见，不会改变框的形状 </p></li><li><p>hidden</p><p>元素的内容会在元素框的边界处剪裁，不过不会提供滚动区域</p></li><li><p>scroll</p><p>元素内容会在元素框的边界处剪裁，溢出的部分无法看到，会出现滚动条</p></li><li><p>auto</p></li><li><p>inherit</p></li></ul><p>如果一个绝对定位元素的内容溢出其内容框，而且<code>overflow</code>设置为要求剪裁该内容，可以通过<code>clip</code>改变剪裁区域的形状</p><p><code>clip: rect(top,right,bottom,left) | auto | inherit</code></p><h4 id="元素可见性"><a href="#元素可见性" class="headerlink" title="元素可见性"></a>元素可见性</h4><p><code>visibility: visible | hidden | collapse | inherit</code></p><ul><li><p>visible</p><p>元素可见</p></li><li><p>hidden</p><p>元素处于不可见状态，但是会影响文档的布局</p><blockquote><p>与display: none的区别，display不仅不显示，而且会从文档中删除，对文档的布局没有任何影响</p></blockquote></li><li><p>collapse</p><p>只在CSS表显示中使用，对于非表元素，collapse与hidden含义相同</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Boot学习笔记</title>
      <link href="2020/11/09/spring-boot-xue-xi-bi-ji/"/>
      <url>2020/11/09/spring-boot-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot学习笔记"><a href="#Spring-Boot学习笔记" class="headerlink" title="Spring Boot学习笔记"></a>Spring Boot学习笔记</h1><h2 id="Maven创建Spring-Boot的方法"><a href="#Maven创建Spring-Boot的方法" class="headerlink" title="Maven创建Spring Boot的方法"></a>Maven创建Spring Boot的方法</h2><p>在某些情况下，start.spring.io无法访问时，可以直接使用Maven创建Spring Boot项目</p><ol><li><p>新建Maven项目</p></li><li><p>在pom.xml文件中添加<code>parent</code>节点</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>添加<code>spring-boot-starter-web</code>和<code>spring-boot-starter-test</code>依赖</p></li><li><p>添加<code>spring-boot-maven-plugin</code>插件</p></li><li><p>创建启动类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h2><p>在Spring MVC中自动配置了<code>Jackson</code>和<code>Gson</code>的<code>HttpMessageConverter</code></p><ol><li>将服务端返回的对象序列化成<code>JSON</code>字符串</li><li>将前端传递的<code>JSON</code>字符串反序列化成<code>Java</code>对象</li></ol><p>自定义<code>HttpMessageConverter</code>的方式</p><ul><li>Jackson</li></ul><ol><li><p>提供<code>MappingJackson2HttpMessageConverter</code>的<code>bean</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MappingJackson2HttpMessageConverter <span class="title">mappingJackson2HttpMessageConverter</span><span class="params">()</span> </span>{   </span><br><span class="line">    MappingJackson2HttpMessageConverter converter = <span class="keyword">new</span> </span><br><span class="line">MappingJackson2HttpMessageConverter();      </span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();   </span><br><span class="line">    om.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd hh:mm:SSS"</span>));  </span><br><span class="line">    converter.setObjectMapper(om); </span><br><span class="line">    <span class="keyword">return</span> converter;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//起主要作用的是ObjectMapper</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>提供<code>ObjectMapper</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>{</span><br><span class="line">ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">om.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd hh/mm/SSS"</span>));</span><br><span class="line"><span class="keyword">return</span> om;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>Gson</li></ul><ol><li><p>修改<code>spring-boot-starter-web</code>中默认的<code>Jackson</code>依赖，添加<code>Gson</code>依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>提供<code>GsonHttpMessageConverter</code>的<code>bean</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">GsonHttpMessageConverter <span class="title">gsonHttpMessageConverter</span><span class="params">()</span></span>{</span><br><span class="line">GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">converter.setGson(<span class="keyword">new</span> </span><br><span class="line">    GsonBuilder().setDateFormat(<span class="string">"yyyy/MM/dd"</span>).create());</span><br><span class="line"><span class="keyword">return</span> converter;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//起主要作用的是Gson</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>提供<code>Gson</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">Gson <span class="title">gson</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> GsonBuilder().setDateFormat(<span class="string">"yyyy/MM/dd"</span>).create();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>FastJson</li></ul><ol><li><p>修改<code>spring-boot-starter-web</code>中默认的<code>Jackson</code>依赖，添加<code>Fastjson</code>依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>提供<code>FastJsonHttpMessageConverter</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">FastJsonHttpMessageConverter <span class="title">fastJsonHttpMessageConverter</span><span class="params">()</span></span>{</span><br><span class="line">    FastJsonHttpMessageConverter converter = <span class="keyword">new</span> </span><br><span class="line">FastJsonHttpMessageConverter();</span><br><span class="line">    FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">    fastJsonConfig.setDateFormat(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line">    converter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">    <span class="keyword">return</span> converter;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="静态资源的访问"><a href="#静态资源的访问" class="headerlink" title="静态资源的访问"></a>静态资源的访问</h2><p>在Spring Boot的<code>WebMvcAutoConfiguration</code>中已经默认设置了五个静态资源的访问路径，按优先级顺序依次为<code>META-INF/resources</code>、<code>resources</code>、<code>static</code>、<code>public</code>、<code>/</code>。</p><p>自定义静态资源的位置</p><ol><li><p>在<code>application.properties</code>中添加</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.resources.static-locations=classpath:/xxx/</span><br><span class="line"># 也可以添加规则</span><br><span class="line">spring.mvc.static-path-pattern=/**</span><br></pre></td></tr></tbody></table></figure></li><li><p>在<code>Java</code>类中配置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/xxx/"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>主要使用<code>MultipartFile</code>类</p><ol><li><p>创建<code>Controller</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>{</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"/yyyy/MM/dd/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping("/upload")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file, HttpServletRequest req)</span> </span>{</span><br><span class="line">String format = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">String realPath = req.getServletContext().getRealPath(<span class="string">"/img"</span>) + format;</span><br><span class="line">File folder = <span class="keyword">new</span> File(realPath);</span><br><span class="line"><span class="keyword">if</span> (!folder.exists()) {</span><br><span class="line">folder.mkdirs();</span><br><span class="line">}</span><br><span class="line">String oldName = file.getOriginalFilename();</span><br><span class="line">String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">file.transferTo(<span class="keyword">new</span> File(realPath, newName));</span><br><span class="line">String url = req.getScheme() + <span class="string">"://"</span> + req.getServerName() + <span class="string">":"</span> + req.getServerPort() + <span class="string">"/img"</span> + format + newName;</span><br><span class="line"><span class="keyword">return</span> url;</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建<code>index.html</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>关于上传文件大小的限制需要在<code>application.properties</code>中进行修改</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">1MB</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h2><ul><li><p>全局异常处理</p><ol><li><p>创建<code>MyCustomException</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomException</span> </span>{</span><br><span class="line">    <span class="comment">//以response的方式返回</span></span><br><span class="line"><span class="meta">@ExceptionHandler(MaxUploadSizeExceededException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myException</span><span class="params">(MaxUploadSizeExceededException e, HttpServletResponse res)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">res.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">PrintWriter out = res.getWriter();</span><br><span class="line">out.write(<span class="string">"上传文件大小超出限制!"</span>);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以视图的方式返回</span></span><br><span class="line"><span class="meta">@ExceptionHandler(MaxUploadSizeExceededException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">myException</span><span class="params">(MaxUploadSizeExceededException e)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"myerror"</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">"error"</span>, <span class="string">"文件大小超过限制！"</span>);</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>以<code>ModelAndView</code>的方式返回需要创建错误页面<code>myerror.html</code>以及<code>thymeleaf</code>的依赖</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"${error}"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>预设全局数据</p><ol><li><p>创建全局数据类，使用<code>Map</code>保存数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalData</span> </span>{</span><br><span class="line"><span class="meta">@ModelAttribute(value = "person")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">mydata</span><span class="params">()</span></span>{</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"name"</span>,<span class="string">"wan"</span>);</span><br><span class="line">map.put(<span class="string">"gender"</span>,<span class="string">"male"</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在<code>Controller</code>中使用<code>Model</code>调用数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"><span class="meta">@GetMapping("/hello")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>{</span><br><span class="line">Map&lt;String, Object&gt; map = model.asMap();</span><br><span class="line">Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String s : keySet) {</span><br><span class="line">System.out.println(s+<span class="string">":"</span>+map.get(s));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>请求参数预处理</p></li></ul><p>现在出现如下需求，前端向后端发送请求参数时出现命名冲突：</p><div class="table-container"><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>name</td><td>三国演义</td></tr><tr><td>price</td><td>99</td></tr><tr><td>name</td><td>吴冠中</td></tr><tr><td>age</td><td>100</td></tr></tbody></table></div><p>此时在服务器端接受的数据会有问题，解决方法如下：</p><ol><li><p>给接收参数重命名</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"><span class="meta">@PostMapping("/book")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(<span class="meta">@ModelAttribute("b")</span> Book book, <span class="meta">@ModelAttribute("a")</span> Author author)</span></span>{</span><br><span class="line">System.out.println(book);</span><br><span class="line">System.out.println(author);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建@ControllerAdvice类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder(value = "a")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initA</span><span class="params">(WebDataBinder binder)</span></span>{</span><br><span class="line">    binder.setFieldDefaultPrefix(<span class="string">"a."</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@InitBinder(value = "b")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initB</span><span class="params">(WebDataBinder binder)</span></span>{</span><br><span class="line">    binder.setFieldDefaultPrefix(<span class="string">"b."</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>@ModelAttribute</p><p>WebDataBinder</p><p>@InitBinder</p><p>ControllerAdvice</p><p>Model</p><p>ModelAndView</p><p>@ExceptionHandler</p></blockquote><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol><li><p>在<code>classpath</code>下的<code>static</code>和<code>template</code>目录中创建<code>error</code>目录并创建静态错误页面和动态错误页面，按优先级依次访问：精确大于模糊，动态大于静态</p></li><li><p>自定义错误数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorConfig</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>{</span><br><span class="line">Map&lt;String, Object&gt; errorAttributes = <span class="keyword">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">errorAttributes.put(<span class="string">"myerror"</span>,<span class="string">"自定义异常信息！"</span>);</span><br><span class="line"><span class="keyword">return</span> errorAttributes;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>自定义错误视图</p><ol><li>自定义<code>ErrorViewResolver</code>继承自<code>DefaultErrorViewResolver</code></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorViewResolver</span> <span class="keyword">extends</span> <span class="title">DefaultErrorViewResolver</span> </span>{</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new {<span class="doctag">@link</span> DefaultErrorViewResolver} instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> applicationContext the source application context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resourceProperties resource properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyErrorViewResolver</span><span class="params">(ApplicationContext applicationContext, ResourceProperties resourceProperties)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(applicationContext, resourceProperties);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>{</span><br><span class="line">ModelAndView modelAndView = <span class="keyword">super</span>.resolveErrorView(request, status, model);</span><br><span class="line">modelAndView.setViewName(<span class="string">"myerror"</span>);</span><br><span class="line">modelAndView.addObject(model);</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>自定义视图<code>myerror.html</code></li></ol></li></ol><blockquote><p>ErrorMvcAutoConfiguration</p><p>DefaultErrorAttributes</p><p>getErrorAttributes()</p><p>DefaultErrorViewResolver</p><p>resolveErrorView()</p></blockquote><h2 id="CORS解决跨域问题"><a href="#CORS解决跨域问题" class="headerlink" title="CORS解决跨域问题"></a>CORS解决跨域问题</h2><ol><li><p>在请求中添加注解<code>@CrosOrigin(origins = "http://xxxx:xxxx")</code>即可</p></li><li><p>创建配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>{</span><br><span class="line">registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">.allowedOrigins(<span class="string">"http://xxxx:xxxx"</span>)</span><br><span class="line">.allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">.allowedMethods(<span class="string">"*"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>WebMvcConfigurer</p><p>addCorsMappings(CorsRegistry registry)</p></blockquote><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><ol><li><p>创建<code>beans.xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.wan.xml.Hello"</span> <span class="attr">id</span>=<span class="string">"hello"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建<code>MyWebNvcConfig</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(locations = "classpath:beans.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h2><ol><li><p>自定义<code>Interceptor</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建<code>WebMvcConfig</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">registry.addInterceptor(myInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MyInterceptor <span class="title">myInterceptor</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyInterceptor();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="定义系统启动任务"><a href="#定义系统启动任务" class="headerlink" title="定义系统启动任务"></a>定义系统启动任务</h2><ol><li><p>CommandLineRunner</p><ul><li><p>创建MyCommanderLineRunner</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner2</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//order表示优先级，值越小优先级越高</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>ApplicationRunner(获取参数的类型更丰富)</p><ul><li><p>创建MyApplicationRunner</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner1</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner2</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><blockquote><p>CommandLineRunner</p><p>ApplicationRunner</p></blockquote><h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>需求：前端向后端传递日期的字符串，后端使用Date对象无法接收，此时需要自定义转换器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>{</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="keyword">return</span> sdf.parse(s);</span><br><span class="line">} <span class="keyword">catch</span> (ParseException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogger</span> </span>{</span><br><span class="line"><span class="meta">@Pointcut("execution(* org.wan.aop.service.*.*(..))")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc1</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(value = "pc1()")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint jp)</span> </span>{</span><br><span class="line">String name = jp.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">"before:"</span> + name);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(value = "pc1()")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span> </span>{</span><br><span class="line">String name = jp.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">"after:"</span> + name);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(value = "pc1()",returning = "result")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp, Object result)</span> </span>{</span><br><span class="line">String name = jp.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">"afterReturning:"</span> + name+<span class="string">"----"</span>+result);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around("pc1()")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line"><span class="keyword">return</span> pjp.proceed();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(value = "pc1()",throwing = "e")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint jp,Exception e)</span> </span>{</span><br><span class="line">String name = jp.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">"afterThrowing:"</span> + name+<span class="string">"----"</span>+e.getMessage());</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>@Aspect</p><p>@Pointcut(“execution(<em> org.wan.aop.service.</em>.*(..))”)</p><p>@Before(value = “pc1()”)</p><p>@After(value = “pc1()”)</p><p>@AfterReturning(value = “pc1()”,returning = “result”)</p><p>@Around(“pc1()”)</p><p>@AfterThrowing(value = “pc1()”,throwing = “e”)</p></blockquote><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><ol><li><p>依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>MySQL配置</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.one.url</span>=<span class="string">jdbc:mysql://localhost:3306/test1?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br><span class="line"><span class="meta">spring.datasource.one.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.one.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.one.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.two.url</span>=<span class="string">jdbc:mysql://localhost:3306/test2?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br><span class="line"><span class="meta">spring.datasource.two.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.two.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.two.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>自定义<code>DataSource</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>{</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "spring.datasource.one")</span></span><br><span class="line"><span class="function">DruidDataSource <span class="title">dsOne</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "spring.datasource.two")</span></span><br><span class="line"><span class="function">DruidDataSource <span class="title">dsTwo</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>自定义<code>JdbcTemplate</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateConfig</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">JdbcTemplate <span class="title">jdbcTemplateOne</span><span class="params">(<span class="meta">@Qualifier("dsOne")</span> DataSource ds)</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(ds);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">JdbcTemplate <span class="title">jdbcTemplateTwo</span><span class="params">(<span class="meta">@Qualifier("dsTwo")</span> DataSource ds)</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(ds);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>@ConfigurationProperties(prefix = “spring.datasource.one”)</p><p>DruidDataSource</p><p>DruidDataSourceBuilder.create().build()</p><p>JdbcTemplate</p><p>@Qualifier(“dsOne”) DataSource ds</p></blockquote><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><ol><li><p>添加依赖以及配置<code>resource</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加resource的目的在于，将mapper.xml和对应的Mapper.java文件放在同一个package下--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--也可以在resource目录下创建和对应Mapper.java相同路径的mapper.xml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--也可以将mapper.xml放于resource中的文件夹中，然后在application.properties中设置mybatis.mapper-locations=classpath:/mapper/*.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>MySQL配置</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test1?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure></li><li><p>配置<code>mapper.xml</code>和<code>mapper.java</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllUser"</span> <span class="attr">resultType</span>=<span class="string">"com.example.mybatis.bean.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置多数据源</p><ul><li><p>配置数据源</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.one.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.one.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.one.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.one.url</span>=<span class="string">jdbc:mysql://localhost:3306/test1?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.two.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.two.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.two.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.two.url</span>=<span class="string">jdbc:mysql://localhost:3306/test2?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建<code>mapper1</code>和<code>mapper2</code>两个<code>package</code>，在各自包下创建<code>mapper.xml</code>和<code>mapper.java</code></p></li><li><p>创建自定义<code>DataSource</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "spring.datasource.one")</span></span><br><span class="line"><span class="function">DataSource <span class="title">dataSourceOne</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "spring.datasource.two")</span></span><br><span class="line"><span class="function">DataSource <span class="title">dataSourceTwo</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建配置类<code>MyBatisConfigOne</code>和<code>MyBatisConfigTwo</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = "com.example.mybatis.mapper1",sqlSessionFactoryRef = "sqlSessionFactory1",</span></span><br><span class="line"><span class="meta">sqlSessionTemplateRef = "sqlSessionTemplate1")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfigOne</span> </span>{</span><br><span class="line"><span class="meta">@Resource(name = "dataSourceOne")</span></span><br><span class="line">DataSource dsOne;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">SqlSessionFactory <span class="title">sqlSessionFactory1</span><span class="params">()</span></span>{</span><br><span class="line">SqlSessionFactoryBean ssfb = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">ssfb.setDataSource(dsOne);</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="keyword">return</span> ssfb.getObject();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplate1</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory1());</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = "com.example.mybatis.mapper2",sqlSessionFactoryRef = "sqlSessionFactory2",</span></span><br><span class="line"><span class="meta">sqlSessionTemplateRef = "sqlSessionTemplate2")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfigTwo</span> </span>{</span><br><span class="line"><span class="meta">@Resource(name = "dataSourceTwo")</span></span><br><span class="line">DataSource dsTwo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">SqlSessionFactory <span class="title">sqlSessionFactory2</span><span class="params">()</span></span>{</span><br><span class="line">SqlSessionFactoryBean ssfb = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">ssfb.setDataSource(dsTwo);</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="keyword">return</span> ssfb.getObject();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplate2</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory2());</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><blockquote><build> <resources>     <resource>         <directory>src/main/java</directory>         <includes>             <include>**/*.xml</include>         </includes>     </resource>     <resource>         <directory>src/main/resources</directory>     </resource> </resources></build><p>@MapperScan(basePackages = “com.example.mybatis.mapper1”,sqlSessionFactoryRef = “sqlSessionFactory1”,<br>        sqlSessionTemplateRef = “sqlSessionTemplate1”)</p><p>SqlSessionFactory</p><p>SqlSessionTemplate</p></blockquote><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><ol><li><p>依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>MySQL配置</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test1?characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.database-platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL57Dialect</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建bean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity(name = "t_book")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建dao</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><blockquote><p>spring.jpa.show-sql=true<br>spring.jpa.database=mysql<br>spring.jpa.database-platform=mysql<br>spring.jpa.hibernate.ddl-auto=update<br>spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect</p><p>@Entity(name = “t_book”)</p><p>@Id<br>@GeneratedValue(strategy = GenerationType.IDENTITY)</p><p>JpaRepository<book,integer></book,integer></p></blockquote><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Boot-Vue全栈开发实战笔记</title>
      <link href="2020/11/09/spring-boot-vue-quan-zhan-kai-fa-shi-zhan-bi-ji/"/>
      <url>2020/11/09/spring-boot-vue-quan-zhan-kai-fa-shi-zhan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-Vue全栈开发实战笔记"><a href="#Spring-Boot-Vue全栈开发实战笔记" class="headerlink" title="Spring Boot+Vue全栈开发实战笔记"></a><em>Spring Boot+Vue全栈开发实战笔记</em></h1><h1 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h1><h2 id="不使用spring-boot-starter-parent"><a href="#不使用spring-boot-starter-parent" class="headerlink" title="不使用spring-boot-starter-parent"></a>不使用spring-boot-starter-parent</h2><p><strong>spring-boot-starter-parent主要提供的默认配置</strong>：</p><ul><li>Java版本默认使用1.8</li><li>编码格式默认使用UTF-8</li><li>提供Dependency Managerment进行项目依赖的版本管理</li><li>默认的资源过滤与插件配置</li></ul><p>当不使用<code>spring-boot-starter-parent</code>时需要通过dependencyManagerment来实现项目依赖版本的统一管理</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagerment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagerment</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>此时需要配置Java版本和编码格式</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="定制banner"><a href="#定制banner" class="headerlink" title="定制banner"></a>定制banner</h2><p>在<code>resources</code>目录下创建一个banner.txt文件，网站参考：</p><ul><li><a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a></li></ul><p>也可以关闭banner,通过SpringApplicationBuilder来设置bannerMode为OFF。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    SpringApplicationBuilder builder = <span class="keyword">new</span> SpringApplicationBuilder(Application.class);</span><br><span class="line">    builder.bannerMode(Banner.Mode.OFF).run(args);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Web容器设置"><a href="#Web容器设置" class="headerlink" title="Web容器设置"></a>Web容器设置</h2><h3 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h3><p>当添加<code>spring-boot-starter-web</code>依赖后，默认会使用Tomcat作为Web容器</p><h3 id="Jetty配置"><a href="#Jetty配置" class="headerlink" title="Jetty配置"></a>Jetty配置</h3><h3 id="Undertow配置"><a href="#Undertow配置" class="headerlink" title="Undertow配置"></a>Undertow配置</h3><h2 id="Properties配置"><a href="#Properties配置" class="headerlink" title="Properties配置"></a>Properties配置</h2><p>Spring Boot项目中的application.properties配置文件的位置优先级：</p><ul><li>项目根目录下的config文件夹中</li><li>项目根目录下</li><li>classpath(resources)下的config文件夹中</li><li>classpath(resources)下</li></ul><p><code>application.properties</code>中的数据可以注入到Bean中，如：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">book.name</span>=<span class="string">xxx</span></span><br><span class="line"><span class="meta">book.author</span>=<span class="string">yyy</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将配置注入</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "book")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="YAML配置"><a href="#YAML配置" class="headerlink" title="YAML配置"></a>YAML配置</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">name:xxx</span></span><br><span class="line"> <span class="string">address:China</span></span><br><span class="line"> <span class="attr">favorite:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">a</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">b</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">c</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">name:yyy</span></span><br><span class="line">  <span class="string">address:China</span></span><br><span class="line">  <span class="attr">favorite:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">a</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">b</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">c</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "my")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; favorites;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在Spring Boot中使用YAML有缺陷，例如无法使用<code>@PropertySource</code>注解加载YAML文件</p><h2 id="Profile配置"><a href="#Profile配置" class="headerlink" title="Profile配置"></a>Profile配置</h2><h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><ol><li>创建<code>application-dev.properties</code>和<code>application-prod.properties</code></li><li>在<code>application.properties</code>中配置<code>spring.profiles.active=xxx</code></li></ol><h3 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改main方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">    SpringApplicationBuilder builder = <span class="keyword">new</span> SpringApplicationBuilder(Application.class);</span><br><span class="line">    builder.application().setAdditionProfiles(<span class="string">"prod"</span>).run(args);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="项目启动时配置"><a href="#项目启动时配置" class="headerlink" title="项目启动时配置"></a>项目启动时配置</h3><p><code>java -jar xxx.jar --spring.profiles.active=prod</code></p><h1 id="Spring-Boot整合视图层"><a href="#Spring-Boot整合视图层" class="headerlink" title="Spring Boot整合视图层"></a>Spring Boot整合视图层</h1><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置Thymeleaf"><a href="#配置Thymeleaf" class="headerlink" title="配置Thymeleaf"></a>配置Thymeleaf</h3><p>Spring Boot 为Thymeleaf提供自动化配置类ThymeleafAutoConfiguration,相关配置属性在ThymeleafProperties类中，可以在<code>application.properties</code>中进行自定义配置：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否开启缓存，默认true</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#检查模板是否存在，默认true</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cheak-template</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#检查模板位置是否存在，默认true</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cheak-template-location</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#模板文件编码</span></span><br><span class="line"><span class="meta">spring.thymeleaf.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#模板文件位置</span></span><br><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="comment">#Content-Type配置</span></span><br><span class="line"><span class="meta">spring.thymeleaf.servlet.content-type</span>=<span class="string">text.heml</span></span><br><span class="line"><span class="comment">#模板文件后缀</span></span><br><span class="line"><span class="meta">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置控制器"><a href="#配置控制器" class="headerlink" title="配置控制器"></a>配置控制器</h3><p>创建User实体类，然后在Controller中返回ModerAndView</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/users")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">users</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"wan"</span>);</span><br><span class="line">        users.add(user);</span><br><span class="line">        </span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"users"</span>,users);</span><br><span class="line">        mv.setViewName(<span class="string">"users"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>在<code>resources/templates</code>目录下创建<code>users.html</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user:${users}"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${user.id}"</span>&gt;</span>用户编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${user.name}"</span>&gt;</span>用户姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>首先导入Thymeleaf的命名空间，然后通过th:each进行遍历，通过th:text展示数据</p><h2 id="FreeMarker（非常古老的模板引擎…）"><a href="#FreeMarker（非常古老的模板引擎…）" class="headerlink" title="FreeMarker（非常古老的模板引擎…）"></a>FreeMarker（非常古老的模板引擎…）</h2><h1 id="Spring-Boot整合Web"><a href="#Spring-Boot整合Web" class="headerlink" title="Spring Boot整合Web"></a>Spring Boot整合Web</h1><h2 id="返回JSON数据"><a href="#返回JSON数据" class="headerlink" title="返回JSON数据"></a>返回JSON数据</h2><h3 id="默认实现"><a href="#默认实现" class="headerlink" title="默认实现"></a>默认实现</h3><p><code>spring-boot-starter-web</code>默认将<code>jackson-databind</code>作为JSON处理器</p><p>此时对于字段忽略、日期格式化等可以通过注解实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern="yyyy-MM-dd")</span></span><br><span class="line">    <span class="keyword">private</span> Date publicationDate;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义转换器"><a href="#自定义转换器" class="headerlink" title="自定义转换器"></a>自定义转换器</h3><h4 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h4><p>首先，引入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后提供一个GsonHttpMessageConverter</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">GsonHttpMessageConverter <span class="title">gsonHttpMessageConverter</span><span class="params">()</span> </span>{</span><br><span class="line">        GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">        GsonBuilder builder = <span class="keyword">new</span> GsonBuilder();</span><br><span class="line">        builder.setDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        builder.excludeFieldsWithModifiers(Modifier.PROTECTED);</span><br><span class="line">        Gson gson = builder.create();</span><br><span class="line">        converter.setGson(gson);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>提供一个GsonHttpMessageConverter实例</li><li>设置Gson解析时日期的格式</li><li>设置Gson解析时修饰符为protected的字段被过滤</li><li>创建Gson对象放入GsonHttpMessageConverter的实例中并返回converter</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">protected</span> Float price;<span class="comment">//忽略</span></span><br><span class="line">    <span class="keyword">private</span> Date publicationDate;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="fastjson…"><a href="#fastjson…" class="headerlink" title="fastjson…"></a>fastjson…</h4><h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><h3 id="默认策略"><a href="#默认策略" class="headerlink" title="默认策略"></a>默认策略</h3><p><code>classpath</code>为<code>resources</code></p><ul><li><code>classpath:/META_INF/resources/</code></li><li><code>classpath:/resources/</code></li><li><code>classpath:/static/</code>(IDEA默认)</li><li><code>classpath:/public/</code></li></ul><h3 id="自定义策略"><a href="#自定义策略" class="headerlink" title="自定义策略"></a>自定义策略</h3><h4 id="配置文件中定义"><a href="#配置文件中定义" class="headerlink" title="配置文件中定义"></a>配置文件中定义</h4><p><code>application.properties</code>:</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/static/</span></span><br></pre></td></tr></tbody></table></figure><p>过滤规则为<code>/static/**</code>，静态资源位置为<code>classpath:/static/</code></p><h4 id="Java编码定义"><a href="#Java编码定义" class="headerlink" title="Java编码定义"></a>Java编码定义</h4><p>实现<code>WebMvcConfigurer</code>接口,然后实现<code>addResourceHandlers</code>方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">        registry</span><br><span class="line">            .addResourceHandler(<span class="string">"/static/**"</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="文件上传-…"><a href="#文件上传-…" class="headerlink" title="文件上传(…)"></a>文件上传(…)</h2><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h2><p><code>@ControllerAdvice</code> 是<code>@Controller</code>的增强版，主要用来处理全局数据，一般搭配<code>@ExceptionHandler</code>、<code>@ModelAttribute</code>以及<code>@Initbinder</code>使用</p><h3 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回ModelAndView</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> </span>{</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exampleException</span><span class="params">(Exception e)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"xxx"</span>);</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>resources/templates</code>目录下创建<code>error.html</code>:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"${msg}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在定义的<code>CustomExceptionHandler</code>类上添加<code>@ControllerAdvice</code>注解。<code>exampleException</code>方法的参数可以有异常实例、HttpServletResponse以及HttpServletRequest、Model等，返回值可以是一段JSON、一个ModelAndView、一个逻辑视图名等。</p><h3 id="添加全局数据"><a href="#添加全局数据" class="headerlink" title="添加全局数据"></a>添加全局数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalConfig</span> </span>{</span><br><span class="line">    <span class="meta">@ModelAttribute(value="info")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,String&gt; <span class="title">userInfo</span><span class="params">()</span></span>{</span><br><span class="line">     HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">"username"</span>,<span class="string">"w"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="number">12</span>);</span><br><span class="line">   <span class="keyword">return</span> map;   </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>在全局配置中添加<code>userInfo</code>方法，返回一个map。加入注解<code>@ModelAttribute</code>,其中的value表示这条返回数据的key，方法的返回值是返回数据的value。</li><li>此时在任意请求的Controller中，通过方法参数中的Model可以获取info的数据</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(Model model)</span> </span>{</span><br><span class="line">        Map&lt;String,String&gt; map = model.asMap();</span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()){</span><br><span class="line">            String key = iterator.next();</span><br><span class="line">            Object value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"---"</span>+value);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="请求参数预处理"><a href="#请求参数预处理" class="headerlink" title="请求参数预处理"></a>请求参数预处理</h3><p><code>@ControllerAdvice</code>结合<code>@InitBinder</code>能实现参数预处理，即表单数据绑定到实体类上时进行一些额外处理</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时Controller中同时接收两个实体类的数据，对于name属性会混淆，需要进行处理：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/book")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">book</span><span class="params">(<span class="meta">@ModelAttribute("b")</span> Book book,<span class="meta">@ModelAttribute("a")</span> Author author)</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> book.toString()+<span class="string">"---"</span>+author.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalConfig</span> </span>{</span><br><span class="line">    <span class="meta">@InitBinder("b")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init1</span><span class="params">(WebDataBinder binder)</span> </span>{</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">"b."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@InitBinder("a")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init2</span><span class="params">(WebDataBinder binder)</span> </span>{</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">"a."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>GlobalConfig</code>中，<code>@InitBinder("b")</code>表示该方法处理<code>@ModelAttribute("b")</code>对应的参数</li><li><code>@InitBinder("a")</code>表示该方法处理<code>@ModelAttribute("a")</code>对应的参数</li><li>每个方法中给相应的Field设置一个前缀，并且在浏览器请求中设置<code>a.name   b.name</code>即可区分</li><li><code>WebDataBinder</code>中还可以设置允许、禁止、必填的字段以及验证器等</li></ul><h2 id="自定义错误页-…"><a href="#自定义错误页-…" class="headerlink" title="自定义错误页(…)"></a>自定义错误页(…)</h2><p>Spring Boot中的错误默认由<code>BasicErrorController</code>类处理</p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>{</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">"*"</span>)</span><br><span class="line">            .allowedMethods(<span class="string">"*"</span>)</span><br><span class="line">            .maxAge(<span class="number">1800</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">"http://localhost:8081"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全局配置需要自定义类并实现<code>WebMvcConfigurer</code>接口，实现<code>addCorsMappings</code>方法</p><h2 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,HttpServletResponse response,Object handler)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"MyInterceptor1  preHandle..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,HttpServletResponse response,Object handler,ModelAndView modelAndView)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"MyInterceptor1  postHandle..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"MyInterceptor1  afterCompletion..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>拦截器中的方法按<code>preHandle</code>-&gt;<code>Controller</code>-&gt;<code>postHandle</code>-&gt;<code>afterCompletion</code>的顺序执行</p></li><li><p>只有当<code>preHandle</code>方法返回<code>true</code>时后面的方法才会执行</p></li><li>当拦截器链中存在多个拦截器时，<code>postHandle</code>在拦截器链内所有拦截器返回成功时才会调用</li><li><code>afterCompletion</code>只有<code>preHandle</code>返回<code>true</code>才调用，<strong>但</strong>若拦截器内的第一个拦截器的<code>preHandle</code>返回<code>false</code>，后面的方法都不会执行</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置拦截器。定义配置类进行拦截器的配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor1())</span><br><span class="line">            .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/xxx"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//addPathPatterns表示拦截路径</span></span><br><span class="line"><span class="comment">//excludePathPatterns表示排除的路径</span></span><br></pre></td></tr></tbody></table></figure><h2 id="启动系统任务"><a href="#启动系统任务" class="headerlink" title="启动系统任务"></a>启动系统任务</h2><p>Spring Boot对于像配置文件加载、数据库舒适化等操作提供了两种解决方案：</p><h3 id="1-CommandLineRunner"><a href="#1-CommandLineRunner" class="headerlink" title="1. CommandLineRunner"></a>1. CommandLineRunner</h3><p>Spring Boot项目在启动时会遍历所有<code>CommandLineRunner</code>的实现类并调用其中的<code>run</code>方法,当系统中有多个<code>CommandLineRunner</code>的实现类，使用<code>@Order</code>注解对这些实现类的调用顺序进行排序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加两个CommandLineRunner</span></span><br><span class="line"><span class="comment">//Order()中的数字越小越先执行</span></span><br><span class="line"><span class="comment">//run方法的参数是系统启动时传入的参数，即入口类main方法的参数</span></span><br><span class="line"><span class="comment">//在调用SpringApplication.run方法时被传入</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"Runner1"</span>+Arrays.toString(args));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner2</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"Runner2"</span>+Arrays.toString(args));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-ApplicationRunner"><a href="#2-ApplicationRunner" class="headerlink" title="2. ApplicationRunner"></a>2. ApplicationRunner</h3><p><code>ApplicationRunner</code>的用法和<code>CommandLineRunner</code>基本一致，区别体现在<code>run</code>方法的参数上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加两个ApplicationRunner</span></span><br><span class="line"><span class="comment">//Order()中的数字越小越先执行</span></span><br><span class="line"><span class="comment">//run方法的参数是ApplicationArguments对象</span></span><br><span class="line"><span class="comment">//getNonOptionArgs()获取参数</span></span><br><span class="line"><span class="comment">//getOptionNames()获取参数的key</span></span><br><span class="line"><span class="comment">//getOptionValues(key)获取key对应的value</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner1</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">"1-nonOptionArgs"</span>+nonOptionArgs);</span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        <span class="keyword">for</span>(String optionName : optionNames) {</span><br><span class="line">            System.out.println(<span class="string">"1-   key:"</span>+optionName+<span class="string">";value:"</span>+args.getOptionValues(optionName));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner2</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">"2-nonOptionArgs"</span>+nonOptionArgs);</span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        <span class="keyword">for</span>(String optionName : optionNames) {</span><br><span class="line">            System.out.println(<span class="string">"2-   key:"</span>+optionName+<span class="string">";value:"</span>+args.getOptionValues(optionName));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="路径映射"><a href="#路径映射" class="headerlink" title="路径映射"></a>路径映射</h2><p>对于一些不需要在控制器中加载数据的页面，可以直接配置路径映射，提高访问速度</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接在MVC配置中重写addViewControllers方法</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>{</span><br><span class="line">        registry.addViewController(<span class="string">"/login"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="配置AOP"><a href="#配置AOP" class="headerlink" title="配置AOP"></a>配置AOP</h2><h3 id="AOP：在系统运行时动态添加代码的方式"><a href="#AOP：在系统运行时动态添加代码的方式" class="headerlink" title="AOP：在系统运行时动态添加代码的方式"></a>AOP：在系统运行时动态添加代码的方式</h3><ul><li><code>Joinpoint</code>(连接点)：类里面可以被增强的方法为连接点。例如，想修改哪个方法的功能，那么该方法就是一个连接点</li><li><code>Pointcut</code>(切入点)：对<code>Joinpoint</code>进行拦截的定义为切入点。例如，拦截所有以<code>insert</code>开始的方法，这个定义即为切入点</li><li><code>Advice</code>(通知)：拦截到<code>Joinpoint</code>之后要做的事就是通知。例如，打印日志监控。通知分为前置通知、后置通知、异常通知、最终通知和环绕通知</li><li><code>Aspect</code>(切面)：<code>Pointcut</code>和<code>Advice</code>的结合</li><li><code>Target</code>(目标对象)：要增强的类称为<code>Target</code></li></ul><p>首先引入<code>spring-boot-starter-aop</code>依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后创建<code>UserService</code>类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.wan.project.service</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"get..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"delete..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来创建切面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>{</span><br><span class="line">    <span class="meta">@Pointcut("execution(* com.wan.project.service.*.*(...))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc1</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Before(value="pc1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint jp)</span> </span>{</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法开始执行..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@After(value="pc1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span> </span>{</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法执行结束..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@AfterReturning(value="pc1()",returning="result")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp,Object result)</span> </span>{</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法返回值为："</span>+result);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@AfterThrowing(value="pc1()",throwing="e")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint jp,Exception e)</span> </span>{</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法抛异常了，异常为："</span>+e.getMessage());</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Around(value="pc1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>@Aspect</code>表明这是一个切面类</li><li><p><code>pc1()</code>方法使用<code>@Pointcut</code>注解，这是一个切入点，为<code>service</code>包下所有类的所有方法</p><ul><li><code>execution</code>中的第一个<code>*</code>表示方法返回任意值</li><li><code>execution</code>中的第二个<code>*</code>表示<code>service</code>包下的任意类</li><li><code>execution</code>中的第三个<code>*</code>表示类中的任意方法，括号中的<code>..</code>表示方法参数任意</li></ul></li><li><p><code>@Before</code>表示这是前置通知，该方法在目标方法执行之前执行。通过<code>JoinPoint</code>参数可以获取目标方法的方法名、修饰符等信息</p></li><li><code>@After</code>表明这是后置通知，该方法在目标方法执行之后执行</li><li><code>@AfterReturning</code>表示这是返回通知，在该方法中可以获取目标方法的返回值</li><li><code>@AfterThrowing</code>表明这是异常通知，当目标方法发生异常时会调用</li><li><code>@Around</code>表明这是环绕通知。环绕通知功能最为强大，可以实现前置、后置、异常和返回通知的功能。目标方法进入环绕通知后，通过调用<code>ProceedingJoinPoint</code>对象的<code>proceed</code>方法使目标方法继续执行</li></ul><p>配置完成后，在<code>Controller</code>中调用<code>UserService</code>的方法，<code>LogAspect</code>的代码就会动态嵌入目标方法中执行</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="meta">@GetMapping("/getUserById")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/deleteUserById")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUserById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> userService.deleteUserById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Spring-Boot整合持久层"><a href="#Spring-Boot整合持久层" class="headerlink" title="Spring Boot整合持久层"></a>Spring Boot整合持久层</h1><h2 id="1-JdbcTemplate"><a href="#1-JdbcTemplate" class="headerlink" title="1. JdbcTemplate"></a>1. JdbcTemplate</h2><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connecter-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>application.properties</code>中配置数据库基本连接信息：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql:///test</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><p>创建实体类<code>Book</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建数据库访问层<code>BookDao</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"INSERT INTO book(name,author) VALUES (?,?)"</span>,book.getName(),book.getAuthor());</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"UPDATE book SET name=?,author=? WHERE id=?"</span>,book.getName(),book.getAuthor(),book.getId());</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"DELETE FROM book WHERE id=? "</span>,book.getId());</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"SELECT * FROM book WHERE id=?"</span>,id);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">"SELECT * FROM book"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Book.class));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>增删改的操作主要使用<code>update</code>和<code>batchUpdate</code>方法完成</li><li>查主要通过<code>query</code>和<code>queryForObject</code>方法完成</li><li>除此之外还有<code>execute</code>方法用来执行任意的SQL、<code>call</code>方法用来调用存储过程等</li><li>执行查询操作时，需要一个<code>RowMapper</code>将查询的列和实体类中的属性一一对应<ul><li>若列名与属性名相同，可以直接使用<code>BeanPropertyRowMapper</code></li><li>若不相同，则需要实现<code>RowMapper</code>接口，将其一一对应</li></ul></li></ul><p>创建<code>BookService</code>和<code>BookController</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.addBook(book);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateBook(book);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBook</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteBook(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBookById(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAllBooks();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookService bookService;</span><br><span class="line">    <span class="meta">@GetMapping("/bookOps")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookOps</span><span class="params">()</span> </span>{</span><br><span class="line">        Book b1 = <span class="keyword">new</span> Book();</span><br><span class="line">        b1.setName(<span class="string">"aaa"</span>);</span><br><span class="line">        b1.setAuthor(<span class="string">"bbb"</span>);</span><br><span class="line">        <span class="keyword">int</span> id = bookService.addBook(b1);</span><br><span class="line">        System.out.println(<span class="string">"addBook:"</span>+id);</span><br><span class="line">        </span><br><span class="line">        Book b2 = <span class="keyword">new</span> Book();</span><br><span class="line">        b2.setName(<span class="string">"aaa1"</span>);</span><br><span class="line">        b2.setAuthor(<span class="string">"bbb1"</span>);</span><br><span class="line">        b2.setId(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> updateBook = bookService.updateBook(b2);</span><br><span class="line">        System.out.println(<span class="string">"updateBook:"</span>+updateBook);</span><br><span class="line">        </span><br><span class="line">        Book b3 = bookService.getBookById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"getBookById:"</span>+b3);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> deleteBook = bookService.deleteBook(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"deleteBook:"</span>+deleteBook);</span><br><span class="line">        </span><br><span class="line">        List&lt;Book&gt; allBooks = bookService.getAllBooks();</span><br><span class="line">        System.out.println(<span class="string">"getAllBooks:"</span>+allBooks);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-MyBatis"><a href="#2-MyBatis" class="headerlink" title="2. MyBatis"></a>2. MyBatis</h2><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connecter-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>application.properties</code>中配置数据库基本连接信息：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql:///test</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><p>创建实体类<code>Book</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.wan.project.model.Book</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>BookMapper</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.wan.project.mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">Book <span class="title">getBookById</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>指明该类是一个<code>Mapper</code>的方法：</p><ul><li>在<code>BookMapper</code>上添加<code>@Mapper</code>注解，需要在每一个<code>Mapper</code>上都添加注解</li><li>在配置类上添加<code>@MapperScan("com.wan.project.mapper")</code>注解，表明扫描<code>com.wan.project.mapper</code>包下的所有接口作为<code>Mapper</code></li></ul><p>创建<code>BookMapper.xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.wan.project.mapper.BookMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"org.wan.project.model.Book"</span>&gt;</span></span><br><span class="line">    INSERT INTO book(name,author) VALUES (#{name},#{author});</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    DELETE FROM book WHERE id=#{id};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"org.wan.project.model.Book"</span>&gt;</span></span><br><span class="line">    UPDATE book SET name=#{name},author=#{author} WHERE id=#{id};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>,<span class="attr">resultType</span>=<span class="string">"org.wan.project.model.Book"</span>&gt;</span></span><br><span class="line">    SELECT * FROM book WHERE id=#{id};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllBooks"</span> <span class="attr">resultType</span>=<span class="string">"org.wan.project.model.Book"</span>&gt;</span></span><br><span class="line">    SELECT * FROM book;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>创建<code>BookService</code>和<code>BookController</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookMapper bookMapper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(book);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBook</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBook(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.getBookById(id);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.getAllBooks();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookService bookService;</span><br><span class="line">    <span class="meta">@GetMapping("/bookOps")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookOps</span><span class="params">()</span> </span>{</span><br><span class="line">        Book b1 = <span class="keyword">new</span> Book();</span><br><span class="line">        b1.setName(<span class="string">"aaa"</span>);</span><br><span class="line">        b1.setAuthor(<span class="string">"bbb"</span>);</span><br><span class="line">        <span class="keyword">int</span> id = bookService.addBook(b1);</span><br><span class="line">        System.out.println(<span class="string">"addBook:"</span>+id);</span><br><span class="line">        </span><br><span class="line">        Book b2 = <span class="keyword">new</span> Book();</span><br><span class="line">        b2.setName(<span class="string">"aaa1"</span>);</span><br><span class="line">        b2.setAuthor(<span class="string">"bbb1"</span>);</span><br><span class="line">        b2.setId(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> updateBook = bookService.updateBook(b2);</span><br><span class="line">        System.out.println(<span class="string">"updateBook:"</span>+updateBook);</span><br><span class="line">        </span><br><span class="line">        Book b3 = bookService.getBookById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"getBookById:"</span>+b3);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> deleteBook = bookService.deleteBook(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"deleteBook:"</span>+deleteBook);</span><br><span class="line">        </span><br><span class="line">        List&lt;Book&gt; allBooks = bookService.getAllBooks();</span><br><span class="line">        System.out.println(<span class="string">"getAllBooks:"</span>+allBooks);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置<code>pom.xml</code></p><p>在<code>Maven</code>工程中，<code>XML</code>配置文件建议写在<code>resources</code>目录下，但本项目的<code>Mapper.xml</code>写在包下，<code>Maven</code>在运行时会忽略包下的<code>XML</code>文件，因此需要在<code>pom.xml</code>中重新指明资源文件位置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-Spring-Data-JPA"><a href="#3-Spring-Data-JPA" class="headerlink" title="3. Spring Data JPA"></a>3. Spring Data JPA</h2><p>创建数据库，不用创建表</p><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connecter-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>application.properties</code>中配置数据库基本信息和JPA相关配置：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql:///jpa</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL57Dialect</span></span><br></pre></td></tr></tbody></table></figure><p>创建实体类<code>Book</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.wan.project.model.Book</span></span><br><span class="line"><span class="meta">@Entity(name = "t_book")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GenerateValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column(name = "book_name",nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>@Entity</code>:表示该类是一个实体类，项目启动时会根据该类自动生成一张表，表的名称为<code>@Entity</code>中<code>name</code>的值，如果不配置<code>name</code>，默认表名为类名</li><li><code>@Id</code>:表示该属性是一个主键，<code>@GenerateValue</code>表示主键自动生成，<code>strategy</code>表示主键的生成策略</li><li><code>@Column</code>定制生成字段的属性，<code>name</code>表示该属性对应的数据表中字段的名称，<code>nullable</code>表示该字段非空，默认生成表中字段名称就是实体类中属性的名称</li><li><code>@Transient</code>:表示在数据库中，该属性被忽略，不生成对应的字段</li></ul><p>创建<code>BookDao</code>接口，继承<code>JpaRepository</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBooksByAuthorStartingWith</span><span class="params">(String author)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query(value = "select * from t_book where id=(select max(id) from t_book)",nativeQuery = true)</span></span><br><span class="line">    <span class="function">Book <span class="title">getMaxIdBook</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query("select b from t_book b where b.id&gt;:id and b.author=:author")</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookByIdAndAuthor</span><span class="params">(<span class="meta">@Param("author")</span> String author,<span class="meta">@Param("id")</span> Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query("select b from t_book b where b.id&gt;?2 and b.name like %?1%")</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookByIdAndAuthor</span><span class="params">(String name,Integer id)</span></span>;<span class="comment">//注意参数的顺序</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果<code>BookDao</code>中的方法涉及修改操作，需要添加<code>@Modifying</code>注解添加事务</p><p>Jpa的既定规范</p><div class="table-container"><table><thead><tr><th>KeyWords</th><th>方法名举例</th><th>对应的SQL</th></tr></thead><tbody><tr><td>And</td><td>findByNameAndAge</td><td>where name=? and age=?</td></tr><tr><td>Or</td><td>findByNameOrAge</td><td>where name=? or age=?</td></tr><tr><td>Is</td><td>findByAgeIs</td><td>where age=?</td></tr><tr><td>Equals</td><td>findIdEquals</td><td>where id=?</td></tr><tr><td>Between</td><td>findByAgeBetween</td><td>where age between ? and ?</td></tr><tr><td>LessThan</td><td>findByAgeLessThan</td><td>where age&lt;?</td></tr><tr><td>LessThanEquals</td><td>findByAgeLessThanEquals</td><td>where age&lt;=?</td></tr><tr><td>GreaterThan</td><td>findByAgeGreaterThan</td><td>where age&gt;?</td></tr><tr><td>GreaterThanEquals</td><td>findByAgeGreaterThanEquals</td><td>where age&gt;=?</td></tr><tr><td>After</td><td>findByAgeAfter</td><td>where age&gt;?</td></tr><tr><td>Before</td><td>findByAgeBefore</td><td>where age&lt;?</td></tr><tr><td>IsNull</td><td>findByNameIsNull</td><td>where name is null</td></tr><tr><td>isNotNull,NotNull</td><td>findByNameNotNull</td><td>where name is not null</td></tr><tr><td>Not</td><td>findByGenderNot</td><td>where gender &lt;&gt;?</td></tr><tr><td>In</td><td>findByAgeIn</td><td>where age in(?)</td></tr><tr><td>NotIn</td><td>findByAgeNotIn</td><td>where age not in(?)</td></tr><tr><td>Like</td><td>findByNameLike</td><td>where name like?</td></tr><tr><td>NotLike</td><td>findByNameNotLike</td><td>where name not like?</td></tr><tr><td>StartingWith</td><td>findByNameStartingWith</td><td>where name like ‘?%’</td></tr><tr><td>EndingWith</td><td>findByNameEndingWith</td><td>where name like ‘%?’</td></tr><tr><td>Containing,Contains</td><td>findByNameContaining</td><td>where name like ‘%?%’</td></tr><tr><td>OrderBy</td><td>findByGreaterThanOrderByIdDesc</td><td>where age&gt;? order by id desc</td></tr><tr><td>True</td><td>findByEnabledTrue</td><td>where enabled=true</td></tr><tr><td>False</td><td>findByEnabledFalse</td><td>where enabled=false</td></tr><tr><td>IgnoreCase</td><td>findByNameIgnoreCase</td><td>where UPPER(name) = UPPER(?)</td></tr></tbody></table></div><p>创建<code>BookService</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line">    <span class="comment">//save方法由JpaRepository接口提供</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页查询，返回值Page&lt;Book&gt;，该对象包含总记录数、总页数、每页记录数、当前页记录数等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getBookByPage</span><span class="params">(Pageable pageable)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.findAll(pageable);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookByAuthorStartingWith</span><span class="params">(String author)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBookByAuthorStartingWith(author);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getMaxIdBook</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.getMaxIdBook();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookByIdAndAuthor</span><span class="params">(String author,Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBookByIdAndAuthor(author,id);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookByIdAndName</span><span class="params">(String name,Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.getBookByIdAndName(name,id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>BookController</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookService bookService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping("/findAll")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>{</span><br><span class="line">        PageRequest pageable = PageRequest.of(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        Page&lt;Book&gt; page = bookService.getBookByPage(pageable);</span><br><span class="line">        System.out.println(<span class="string">"总页数："</span>+page.getTotalPages());</span><br><span class="line">        System.out.println(<span class="string">"总记录数："</span>+page.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"查询结果："</span>+page.getContent());</span><br><span class="line">        System.out.println(<span class="string">"当前页数："</span>+page.getNumber()+<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"当前页记录数："</span>+page.getNumberOfElements());</span><br><span class="line">        System.out.println(<span class="string">"每页记录数："</span>+page.getSize());</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping("/search")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;Book&gt; bs1 = bookService.getBookByIdAndAuthor(<span class="string">"a"</span>,<span class="number">7</span>);</span><br><span class="line">        List&lt;Book&gt; bs2 = bookService.getBookByAuthorStartingWith(<span class="string">"b"</span>);</span><br><span class="line">        List&lt;Book&gt; bs3 = bookService.getBookByIdAndName(<span class="string">"ab"</span>,<span class="number">6</span>);</span><br><span class="line">        Book book = bookService.getMaxIdBook();</span><br><span class="line">        System.out.println(<span class="string">"bs1："</span>+bs1);</span><br><span class="line">        System.out.println(<span class="string">"bs2："</span>+bs2);</span><br><span class="line">        System.out.println(<span class="string">"bs3："</span>+bs3);</span><br><span class="line">        System.out.println(<span class="string">"book："</span>+book);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping("/save")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setAuthor(<span class="string">"xxx"</span>);</span><br><span class="line">        book.setName(<span class="string">"aaa"</span>);</span><br><span class="line">        bookSerevice.addBook(book);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-多数据源"><a href="#4-多数据源" class="headerlink" title="4. 多数据源"></a>4. 多数据源</h2><h3 id="1-JdbcTemplate多数据源"><a href="#1-JdbcTemplate多数据源" class="headerlink" title="1. JdbcTemplate多数据源"></a>1. JdbcTemplate多数据源</h3><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connecter-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>application.properties</code>中配置数据库连接信息</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据源1</span></span><br><span class="line"><span class="meta">spring.datasource.one.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.one.url</span>=<span class="string">jdbc:mysql:///test-1</span></span><br><span class="line"><span class="meta">spring.datasource.one.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.one.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据源2</span></span><br><span class="line"><span class="meta">spring.datasource.two.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.two.url</span>=<span class="string">jdbc:mysql:///test-2</span></span><br><span class="line"><span class="meta">spring.datasource.two.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.two.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><p>创建<code>DataSourceConfig</code>配置数据源，根据<code>application.properties</code>配置生成两个数据源</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties("spring.datasource.one")</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsOne</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DuridDataSourceBuilder.create().builder();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties("spring.datasource.two")</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dsTwo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DuridDataSourceBuilder.create().builder();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>DataSourceConfig</code>提供两个数据源：<code>dsOne</code>和<code>dsTwo</code>，默认方法名即实例名</li><li><code>@ConfigurationProperties</code>注解表示使用不同前缀的配置文件来创建不同的<code>DataSource</code>实例</li></ul><p>配置<code>JdbcTemplate</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JdbcTemplate <span class="title">jdbcTemplateOne</span><span class="params">(<span class="meta">@Qualifier("dsOne")</span> DataSource dataSource)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JdbcTemplate <span class="title">jdbcTemplateTwo</span><span class="params">(<span class="meta">@Qualifier("dsTwo")</span> DataSource dataSource)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>JdbcTemplateConfig</code>提供两个<code>JdbcTemplate</code>实例，每个实例需要提供<code>DataSource</code>，并且通过<code>@Qualifier</code>注解查找不同名称的<code>DataSource</code>实例注入</li></ul><p>创建实体类<code>Book</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>BookController</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Resource(name = "jdbaTemplateOne")</span></span><br><span class="line">    JdbcTemplate jdbaTemplateOne;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Quailfier("jdbcTemplateTwo")</span></span><br><span class="line">    JdbcTemplate jdbaTemplateTwo;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注入<code>JdbcTemplate</code>的两种方式</p><ul><li><code>@Resource</code>，指明<code>name</code>属性</li><li><code>@Autowired</code>结合<code>@Qualifier</code>(效果等同与<code>@Resource</code>) </li></ul><h3 id="2-MyBatis多数据源"><a href="#2-MyBatis多数据源" class="headerlink" title="2. MyBatis多数据源"></a>2. MyBatis多数据源</h3><p>依赖配置，<code>DataSourceConfig</code>，<code>application.properties</code>，实体类<code>Book</code>同上</p><p>配置<code>MyBatis</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(value = "com.wan.project.mapper1",sqlSessionFactoryRef = "sqlSessionFactoryBean1")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfigOne</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier("dsOne")</span></span><br><span class="line">    DataSource dsOne;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionFactory <span class="title">sqlSessionFactoryBea1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        SqlSessionFactoryBean ssfb = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        ssfb.setDataSource(dsOne);</span><br><span class="line">        <span class="keyword">return</span> ssfb.getObject();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplate1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> SqlSessionTemplate(sqlSessionFactoryBea1());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(value = "com.wan.project.mapper2",sqlSessionFactoryRef = "sqlSessionFactoryBean2")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfigOne</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier("dsTwo")</span></span><br><span class="line">    DataSource dsTwo;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionFactory <span class="title">sqlSessionFactoryBea2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        SqlSessionFactoryBean ssfb = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        ssfb.setDataSource(dsTwo);</span><br><span class="line">        <span class="keyword">return</span> ssfb.getObject();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplate2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> SqlSessionTemplate(sqlSessionFactoryBea2());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>@MapperScan</code>注解指定<code>Mapper</code>接口所在位置，同时指定<code>SqlSessionFactory</code>的实例名，该位置下的<code>Mapper</code>使用<code>SqlSessionFactory</code>实例</li><li>创建<code>SqlSessionFactory</code>实例，并将<code>DataSource</code>实例设置给<code>SqlSessionFactory</code>，该<code>SqlSessionFactory</code>实例就是<code>@MapperScan</code>中<code>sqlSessionFactoryRef</code>参数指定的实例</li><li>提供<code>SqlSessionTemplate</code>实例，这是一个线程安全类，用于管理<code>MyBatis</code>中的<code>SqlSession</code>操作</li></ul><p>创建<code>Mapper</code>及其相应的<code>Mapper</code>映射文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.wan.project.mapper1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper1</span> </span>{</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.wan.project.mapper1.BookMapper1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllBooks"</span> <span class="attr">resultType</span>=<span class="string">"org.wan.project.model.Book"</span>&gt;</span></span><br><span class="line">    SELECT * FROM book;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.wan.project.mapper2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper2</span> </span>{</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getAllBooks</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.wan.project.mapper2.BookMapper2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllBooks"</span> <span class="attr">resultType</span>=<span class="string">"org.wan.project.model.Book"</span>&gt;</span></span><br><span class="line">    SELECT * FROM book;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>创建<code>Controller</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookMapper1 bookMapper1;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookMapper2 bookMapper2;</span><br><span class="line">    <span class="meta">@GetMapping("/test")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;Book&gt; books1 = bookMapper1.getAllBooks();</span><br><span class="line">        List&lt;Book&gt; books2 = bookMapper2.getAllBooks();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-JPA多数据源"><a href="#3-JPA多数据源" class="headerlink" title="3. JPA多数据源"></a>3. JPA多数据源</h3><p>添加依赖并修改<code>application.properties</code></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据源1</span></span><br><span class="line"><span class="meta">spring.datasource.one.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.one.url</span>=<span class="string">jdbc:mysql:///test-1</span></span><br><span class="line"><span class="meta">spring.datasource.one.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.one.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据源2</span></span><br><span class="line"><span class="meta">spring.datasource.two.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.two.url</span>=<span class="string">jdbc:mysql:///test-2</span></span><br><span class="line"><span class="meta">spring.datasource.two.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.two.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.properties.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.properties.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.hbm2ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL57Dialect</span></span><br></pre></td></tr></tbody></table></figure><p><code>DataSourceConfig</code>同上</p><p>创建实体类<code>User</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.wan.project.model.User</span></span><br><span class="line"><span class="meta">@Entity(name = "t_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GenerateValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>JPA</code>配置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = "com.wan.project.dao1",</span></span><br><span class="line"><span class="meta">                      entityManagerFactoryRef = "entityManagerFactoryBeanOne",</span></span><br><span class="line"><span class="meta">                      transactionManagerRef = "platformTranscationManagerOne")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigOne</span> </span>{</span><br><span class="line">    <span class="meta">@Resource(name = "dsOne")</span></span><br><span class="line">    DataSource dsOne;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JpaProperties jpaProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryBeanOne</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dsOne)</span><br><span class="line">            .properties(jpaProperties.getProperties())</span><br><span class="line">            .packages(<span class="string">"com.wan.project.model"</span>)</span><br><span class="line">            .persistenceUnit(<span class="string">"pu1"</span>)</span><br><span class="line">            .builder();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">platformTransactionManagerOne</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>{</span><br><span class="line">        LocalContainerEntityManagerFactoryBean factoryOne = entityManagerFactoryBeanOne(builder);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(factoryOne.getObject());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = "com.wan.project.dao2",</span></span><br><span class="line"><span class="meta">                      entityManagerFactoryRef = "entityManagerFactoryBeanTwo",</span></span><br><span class="line"><span class="meta">                      transactionManagerRef = "platformTranscationManagerTwo")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigOne</span> </span>{</span><br><span class="line">    <span class="meta">@Resource(name = "dsTwo")</span></span><br><span class="line">    DataSource dsTwo;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JpaProperties jpaProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryBeanTwo</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dsTwo)</span><br><span class="line">            .properties(jpaProperties.getProperties())</span><br><span class="line">            .packages(<span class="string">"com.wan.project.model"</span>)</span><br><span class="line">            .persistenceUnit(<span class="string">"pu2"</span>)</span><br><span class="line">            .builder();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">platformTransactionManagerTwo</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>{</span><br><span class="line">        LocalContainerEntityManagerFactoryBean factoryOne = entityManagerFactoryBeanTwo(builder);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(factoryOne.getObject());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>@EnableJpaRepositories</code>注解进行<code>JPA</code>配置，主要配置三个属性</p><ul><li><code>basePackages</code>:指定<code>Repository</code>的位置</li><li><code>entityManagerFactoryRef</code>:指定实体类管理工厂<code>Bean</code>的名称</li><li><code>transcationManagerRef</code>:指定事务管理器的引用名称，此处的引用名称就是<code>JpaConfigOne</code>类中注册的<code>Bean</code>的名称(默认<code>Bean</code>名称为方法名)</li></ul></li><li><p>创建<code>LocalContainerEntityManagerFactoryBean</code>,该<code>Bean</code>用于提供<code>EntityManager</code>实例，该类的创建过程：</p><ul><li>首先配置数据源</li><li>设置JPA相关设置(<code>JpaProperties</code>由系统自动加载)</li><li>设置实体类所在位置</li><li>配置持久化单元名(若项目中只有一个<code>EntityManagerFactory</code>，<code>persistenceUint</code>可以省略，否则必须明确指定)</li></ul></li><li><p>项目中有多个<code>LocalContainerEntityManagerFactoryBean</code>实例时，<code>@Primary</code>表示该实例优先使用</p></li><li><p><code>JpaTransactionManage</code>提供对单个<code>EntityManagerFactory</code>的事务支持，专门用于解决<code>JPA</code>的事务管理</p></li></ul><p>创建<code>Repository</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.wan.project.dao1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao1</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.wan.project.dao2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao2</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>Controller</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao1 userDao1;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao2 userDao2;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping("/test")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setAge(<span class="number">22</span>);</span><br><span class="line">        u1.setName(<span class="string">"wan"</span>);</span><br><span class="line">        userDao1.save(u1);</span><br><span class="line">        </span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setAge(<span class="number">23</span>);</span><br><span class="line">        u2.setName(<span class="string">"li"</span>);</span><br><span class="line">        userDao2.save(u2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Spring-Boot整合NoSQL"><a href="#Spring-Boot整合NoSQL" class="headerlink" title="Spring Boot整合NoSQL"></a>Spring Boot整合NoSQL</h1><h2 id="1-Redis"><a href="#1-Redis" class="headerlink" title="1. Redis"></a>1. Redis</h2><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><p>下载<code>Redis</code>:</p><p><code>wget http://download.redis.io/releases/redis-4.0.10.tar.gz</code></p><p>解压并编译：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-4.0.10.tar.gz</span><br><span class="line">cd redis-4.0.10</span><br><span class="line">make MALLOC=libc</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>配置<code>Redis</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 后台运行</span><br><span class="line">daemonize yes</span><br><span class="line"># 关闭该设置，使外网可以连接</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line"># 关闭保护模式</span><br><span class="line">protected-mode no</span><br></pre></td></tr></tbody></table></figure><p>配置<code>CentOS</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止开机启动</span></span><br><span class="line">systemctl disable firewalld.service </span><br></pre></td></tr></tbody></table></figure><p><code>Redis</code>启动与关闭</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动(指定redis.conf)</span></span><br><span class="line">redis-server redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">redis-cli shutdown</span><br></pre></td></tr></tbody></table></figure><h3 id="Redis整合"><a href="#Redis整合" class="headerlink" title="Redis整合"></a>Redis整合</h3><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配置<code>Redis</code>和连接池</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.2.2</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">1ms</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.shutdown-timeout</span>=<span class="string">100ms</span></span><br></pre></td></tr></tbody></table></figure><p>创建实体类<code>Book</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>Controller</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTenplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@GetMapping("/test")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">        ValueOperations&lt;String,String&gt; ops1 = stringRedisTemplate.opsForValue();</span><br><span class="line">        ops1.set(<span class="string">"name"</span>,<span class="string">"www"</span>);</span><br><span class="line">        System.out.println(ops1.get(<span class="string">"name"</span>));</span><br><span class="line">        ValueOperations ops2 = redisTemplate.opsForValue();</span><br><span class="line">        Book b1 = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">"fff"</span>);</span><br><span class="line">        ops2.set(<span class="string">"b1"</span>,b1);</span><br><span class="line">        Book b2 = (Book)ops.get(<span class="string">"b1"</span>);</span><br><span class="line">        System.out.println(b2;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>StringRedisTemplate</code>是<code>RedisTemplate</code>的子类，<code>StringRedisTemplate</code>中的<code>key</code>和<code>value</code>都是<code>String</code>，采用的序列化方案是<code>StringSerializer</code>；而<code>RedisTemplate</code>可以操作对象，采用的序列化方案是<code>JdkSerializationRedisSerializer</code></p><h3 id="Redis集群整合-…"><a href="#Redis集群整合-…" class="headerlink" title="Redis集群整合(…)"></a>Redis集群整合(…)</h3><h2 id="2-MongoDB"><a href="#2-MongoDB" class="headerlink" title="2. MongoDB"></a>2. MongoDB</h2><h3 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h3><p>下载<code>MongoDB</code></p><p><code>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.0.tgz</code></p><p>解压并重命名</p><p><code>tar -zxvf mongodb-linux-x86_64-4.0.0.tgz</code></p><p><code>mv mongodb-linux-x86_64-4.0.0 mongodb</code></p><p>配置<code>MongoDB</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd mongodb</span><br><span class="line">mkdir db</span><br><span class="line">mkdir logs</span><br></pre></td></tr></tbody></table></figure><p>在<code>bin</code>目录下创建<code>mongo.conf</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/xxx/mongodb/db</span><br><span class="line">logpath=/xxx/mogodb/logs</span><br><span class="line">port=27017</span><br><span class="line"># 以守护进程方式运行</span><br><span class="line">fork=true</span><br></pre></td></tr></tbody></table></figure><p>在<code>bin</code>目录下启动与关闭</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">./mongod -f -config mongo.conf --bind ip_all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入</span></span><br><span class="line">./mongo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">./mongod -shutdown -config mongo.conf</span><br></pre></td></tr></tbody></table></figure><h3 id="MongoDB整合"><a href="#MongoDB整合" class="headerlink" title="MongoDB整合"></a>MongoDB整合</h3><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配置<code>MongoDB</code></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.data.mongodb.database</span>=<span class="string">test</span></span><br><span class="line"><span class="meta">spring.data.mongodb.host</span>=<span class="string">192.168.2.2</span></span><br><span class="line"><span class="meta">spring.data.mongodb.port</span>=<span class="string">27017</span></span><br><span class="line"><span class="comment">#验证登录信息的库 </span></span><br><span class="line"><span class="comment">#spring.data.mongodb.authentication-database=admin</span></span><br><span class="line"><span class="comment"># spring.data.mongodb.username=xxx</span></span><br><span class="line"><span class="comment"># spring.data.mongodb.password=123</span></span><br></pre></td></tr></tbody></table></figure><p>创建实体类<code>Book</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>Controller</code>，使用<code>MongoTemplate</code>(还可以使用<code>MongoRepository</code>)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MongoTemplate mongoTemplate;</span><br><span class="line">    <span class="meta">@GetMapping("/test")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Book b1 = <span class="keyword">new</span> Book();</span><br><span class="line">        b1.setId(<span class="number">1</span>);</span><br><span class="line">        b1.setName(<span class="string">"www"</span>);</span><br><span class="line">        books.add(b1);</span><br><span class="line">        mongoTemplate.insertAll(books);</span><br><span class="line">        List&lt;Book&gt; list = mongoTemplate.findAll(Book.class);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        Book book = mongoTemplate.findById(<span class="number">1</span>,Book.class);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-Session共享"><a href="#3-Session共享" class="headerlink" title="3. Session共享"></a>3. Session共享</h2><p><code>Session</code>共享配置</p><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.2.2</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br></pre></td></tr></tbody></table></figure><p>创建<code>Controller</code>，(配置完成后 ，就可以使用 <code>Spring Session</code> 了，其实就是使用普通的 <code>HttpSession</code> ，其他的 <code>Session</code> 同步到 <code>Redis</code> 等操作，框架已经自动帮你完成了)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    <span class="meta">@Value("${server.port}")</span></span><br><span class="line">    Integer port;</span><br><span class="line">    <span class="meta">@GetMapping("/set")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(HttpSession session)</span> </span>{</span><br><span class="line">        session.setAttribute(<span class="string">"user"</span>, <span class="string">"wan"</span>);</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(port);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/get")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(HttpSession session)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> session.getAttribute(<span class="string">"user"</span>) + <span class="string">":"</span> + port;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行项目</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nohup表示不挂断程序运行，&amp;表示后台运行</span></span><br><span class="line">nohup java -jar xxx.jar --server.port=8080 &amp;</span><br><span class="line">nohup java -jar xxx.jar --server.port=8081 &amp;</span><br></pre></td></tr></tbody></table></figure><p><code>Nginx</code>负载均衡</p><p>下载<code>Nginx</code>并解压</p><p><code>wget https://nginx.org/download/nginx-1.14.0.tar.gz</code></p><p><code>tar -zxvf nginx-1.14.0.tar.gz</code></p><p>进入解压目录执行编译安装 </p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.14.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>完成后，在<code>Nginx</code>安装目录下启动<code>Nginx</code>(默认端口80)</p><p><code>./sbin/nginx</code></p><p>然后修改<code>nginx.conf</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream wan.org{</span><br><span class="line">server 127.0.0.1:8080 weight=1;</span><br><span class="line">server 127.0.0.1:8081 weight=2;</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">listen       80;</span><br><span class="line">server_name  localhost;</span><br><span class="line">#...</span><br><span class="line">location / {</span><br><span class="line">proxy_pass     http://wan.org;</span><br><span class="line">proxy_redirect default;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>upstream</code>表示配置上游服务器</li><li><code>wan.org</code>表示服务器集群的名字，随意取</li><li><code>server</code>表示单独的服务</li><li><code>weight</code>表示服务权重，即有多少比例的请求从<code>Nginx</code>转发到该服务器</li><li><code>location</code>中<code>proxy_pass</code>表示请求转发的地址，<code>/</code>表示拦截所有请求，转发到配置的服务器集群中</li></ul><p>重启<code>Nginx</code></p><p><code>./sbin/nginx -s reload</code></p><h1 id="Spring-Boot构建RESTful服务-…"><a href="#Spring-Boot构建RESTful服务-…" class="headerlink" title="Spring Boot构建RESTful服务(…)"></a>Spring Boot构建RESTful服务(…)</h1><h2 id="1-JPA实现REST"><a href="#1-JPA实现REST" class="headerlink" title="1. JPA实现REST"></a>1. JPA实现REST</h2><h2 id="2-MongoDB实现REST"><a href="#2-MongoDB实现REST" class="headerlink" title="2. MongoDB实现REST"></a>2. MongoDB实现REST</h2><h1 id="开发者工具与单元测试"><a href="#开发者工具与单元测试" class="headerlink" title="开发者工具与单元测试"></a>开发者工具与单元测试</h1><h2 id="1-devtools-…"><a href="#1-devtools-…" class="headerlink" title="1. devtools(…)"></a>1. devtools(…)</h2><h2 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2. 单元测试"></a>2. 单元测试</h2><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>创建测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01ApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>@RunWith</code>，将<code>JUint</code>执行类修改为<code>SpringRunner</code>，<code>SpringRunner</code>是<code>SpringFramework</code>中测试类<code>SpringJUint4ClassRunner</code>的别名</li><li><code>@SpringBootTest</code>提供<code>SprinTestContext</code>中的常规测试功能外，还提供其他特性：<ul><li>默认的<code>ContextLoader</code></li><li>自动搜索<code>@SpringBootConfiguration</code></li><li>自定义环境属性</li><li>支持不同的<code>webEnvironment</code>，主要有四种：<ul><li><code>MOCK</code></li><li><code>RANDOM_PORT</code></li><li><code>DEFINED_PORT</code></li><li><code>NONE</code>(一般不适于<code>Web</code>测试)</li></ul></li></ul></li><li><code>@Test</code>来自于<code>JUint</code>,<code>JUint</code>的其他注解也可以使用</li></ul><p><code>Service</code>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">" !"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01ApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        String hello = helloService.sayHello(<span class="string">"W"</span>);</span><br><span class="line">        Assert.assertThat(hello,Matchers.is(<span class="string">"Hello W !"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Controller</code>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span>+name+<span class="string">" !"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@PostMapping("/book")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBook</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> book.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01ApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloController helloController;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebApplicaionContext wac;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>{</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        MvcResult mvcResult = mockMvc</span><br><span class="line">            .perform( MockMvcRequestBuilders</span><br><span class="line">            .get(<span class="string">"/hello"</span>)</span><br><span class="line">           .contentType(Media.APPLICATION_FORM_URLENCODED)</span><br><span class="line">            .param(<span class="string">"name"</span>,<span class="string">"W"</span>))</span><br><span class="line">            .addExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .addDo(MockMvcResultHandlers.print())</span><br><span class="line">            .addReturn();</span><br><span class="line">        System.out.println(mvcResult.getResponse().getContentAsString());</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">"W"</span>);</span><br><span class="line">        String s = om.writeValueAsString(book);</span><br><span class="line">        MvcResult mvcResult = mockMvc</span><br><span class="line">            .perform( MockMvcRequestBuilders</span><br><span class="line">            .post(<span class="string">"/book"</span>)</span><br><span class="line">           .contentType(Media.APPLICATION_JSON)</span><br><span class="line">            .content(s))</span><br><span class="line">            .addExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .addReturn();</span><br><span class="line">        System.out.println(mvcResult.getResponse().getContentAsString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>注入<code>WebApplicationContext</code>模拟<code>ServletContext</code>环境</li><li>声明<code>MockMvc</code>对象，并且在测试方法执行之前进行<code>MockMvc</code>的初始化</li><li><code>perform</code>方法开启一个<code>RequestBuilder</code>请求，具体请求通过<code>MockMvcRequestBuilders</code>构建</li></ul><p><code>JSON</code>测试(…)</p><h1 id="Spring-Boot缓存"><a href="#Spring-Boot缓存" class="headerlink" title="Spring Boot缓存"></a>Spring Boot缓存</h1><h2 id="1-Ehcache-2-x缓存-…"><a href="#1-Ehcache-2-x缓存-…" class="headerlink" title="1. Ehcache 2.x缓存(…)"></a>1. Ehcache 2.x缓存(…)</h2><h2 id="2-Redis单机缓存"><a href="#2-Redis单机缓存" class="headerlink" title="2. Redis单机缓存"></a>2. Redis单机缓存</h2><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>添加配置</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.2.2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cache.cache-names</span>=<span class="string">c1</span></span><br></pre></td></tr></tbody></table></figure><p>开启缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"> SpringApplication.run(Application.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>核心注解</p><ul><li>@CacheConfig:这个注解在类上使用，用来描述该类中所有方法使用的缓存名称</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = "c1")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>@Cacheable:一般加在查询方法上，表示将一个方法的返回值缓存起来，默认情况下，缓存的key就是方法的参数，缓存的value就是方法的返回值</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(key = "#id")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span> <span class="params">(Integer id,String username)</span> </span>{</span><br><span class="line">    System.out.println(<span class="string">"getUserById"</span>);</span><br><span class="line">    <span class="keyword">return</span> getUserFromDBById(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>@CachePut:一般加在更新方法上，当数据库中的数据更新后，缓存中的数据也要跟着更新，使用该注解，可以将方法的返回值自动更新到已经存在的key上</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(key = "#user.id")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">updateUserById</span><span class="params">(User user)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>@CacheEvict:一般加在删除方法上，当数据库中的数据删除后，相关的缓存数据也要自动清除，该注解在使用的时候也可以配置按照某种条件删除（condition属性）或者或者配置清除所有缓存（allEntries属性）</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">    <span class="comment">//在这里执行删除操作， 删除是去数据库中删除</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-Redis集群缓存-…"><a href="#3-Redis集群缓存-…" class="headerlink" title="3. Redis集群缓存(…)"></a>3. Redis集群缓存(…)</h2><h1 id="Spring-Boot安全管理"><a href="#Spring-Boot安全管理" class="headerlink" title="Spring Boot安全管理"></a>Spring Boot安全管理</h1><h2 id="1-Spring-Security"><a href="#1-Spring-Security" class="headerlink" title="1. Spring Security"></a>1. Spring Security</h2><h2 id="2-基于数据库的认证"><a href="#2-基于数据库的认证" class="headerlink" title="2. 基于数据库的认证"></a>2. 基于数据库的认证</h2><h2 id="3-高级配置"><a href="#3-高级配置" class="headerlink" title="3. 高级配置"></a>3. 高级配置</h2><h2 id="4-OAuth-2"><a href="#4-OAuth-2" class="headerlink" title="4. OAuth 2"></a>4. OAuth 2</h2><h2 id="5-Shiro"><a href="#5-Shiro" class="headerlink" title="5. Shiro"></a>5. Shiro</h2><h1 id="Spring-Boot整合WebSocket"><a href="#Spring-Boot整合WebSocket" class="headerlink" title="Spring Boot整合WebSocket"></a>Spring Boot整合WebSocket</h1><h1 id="消息服务"><a href="#消息服务" class="headerlink" title="消息服务"></a>消息服务</h1><h2 id="1-JMS"><a href="#1-JMS" class="headerlink" title="1. JMS"></a>1. JMS</h2><h2 id="2-AMQP"><a href="#2-AMQP" class="headerlink" title="2. AMQP"></a>2. AMQP</h2><h1 id="企业开发"><a href="#企业开发" class="headerlink" title="企业开发"></a>企业开发</h1><h2 id="1-邮件发送"><a href="#1-邮件发送" class="headerlink" title="1. 邮件发送"></a>1. 邮件发送</h2><h2 id="2-定时任务"><a href="#2-定时任务" class="headerlink" title="2. 定时任务"></a>2. 定时任务</h2><h2 id="3-批处理"><a href="#3-批处理" class="headerlink" title="3. 批处理"></a>3. 批处理</h2><h2 id="4-Swagger2"><a href="#4-Swagger2" class="headerlink" title="4. Swagger2"></a>4. Swagger2</h2><h2 id="5-数据校验"><a href="#5-数据校验" class="headerlink" title="5. 数据校验"></a>5. 数据校验</h2><h1 id="应用监控"><a href="#应用监控" class="headerlink" title="应用监控"></a>应用监控</h1><h2 id="1-监控端点配置"><a href="#1-监控端点配置" class="headerlink" title="1. 监控端点配置"></a>1. 监控端点配置</h2><h2 id="2-监控信息可视化"><a href="#2-监控信息可视化" class="headerlink" title="2. 监控信息可视化"></a>2. 监控信息可视化</h2><h2 id="3-邮件报警"><a href="#3-邮件报警" class="headerlink" title="3. 邮件报警"></a>3. 邮件报警</h2><h1 id="项目构建与部署"><a href="#项目构建与部署" class="headerlink" title="项目构建与部署"></a>项目构建与部署</h1><h2 id="1-构建JAR"><a href="#1-构建JAR" class="headerlink" title="1. 构建JAR"></a>1. 构建JAR</h2><h2 id="2-构建WAR"><a href="#2-构建WAR" class="headerlink" title="2. 构建WAR"></a>2. 构建WAR</h2>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之简单工厂</title>
      <link href="2020/11/07/she-ji-mo-shi-zhi-jian-dan-gong-han/"/>
      <url>2020/11/07/she-ji-mo-shi-zhi-jian-dan-gong-han/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前提假设：现在有一个新开的奶茶店<code>Store</code>,只能制作一种奶茶。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/design-pattern1.png" alt="image-20201203104847731"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MilkTea.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>{</span><br><span class="line">System.out.println(<span class="string">"制作奶茶"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Store.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> MilkTea <span class="title">createMilkTea</span><span class="params">()</span></span>{</span><br><span class="line">MilkTea milkTea = <span class="keyword">new</span> MilkTea();</span><br><span class="line">milkTea.prepare();</span><br><span class="line"><span class="keyword">return</span> milkTea;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p> 奶茶店的生意越来越好，老板决定推出几种新口味的奶茶</p></blockquote><p>将<code>MilkTea</code>类设置为抽象类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MilkTea.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建<code>LemonMilkTea</code>和<code>AppleMilkTea</code>两个类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LemonMilkTea.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LemonMilkTea</span> <span class="keyword">extends</span> <span class="title">MilkTea</span></span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"制作柠檬奶茶"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AppleMilkTea.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleMilkTea</span> <span class="keyword">extends</span> <span class="title">MilkTea</span></span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"制作苹果奶茶"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Store.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> MilkTea <span class="title">createMilkTea</span><span class="params">(String type)</span> </span>{</span><br><span class="line">MilkTea milkTea = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">"lemon"</span>)) {</span><br><span class="line">milkTea = <span class="keyword">new</span> LemonMilkTea();</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"apple"</span>)) {</span><br><span class="line">milkTea = <span class="keyword">new</span> AppleMilkTea();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//暂不考虑milkTea==null的情况</span></span><br><span class="line">milkTea.prepare();</span><br><span class="line"><span class="keyword">return</span> milkTea;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>现在复杂的场景来了，随着业务的发展，有的口味不受用户喜欢，销量惨淡，老板要将这些口味的奶茶砍掉，并且重新创造新的口味，于是在原来的<code>createMilkTea</code>方法中需要不断的重复添加和删除<code>if-else</code>语句，并且可能在<code>Store</code>的业务中不仅仅只有<code>createNilkTea</code>一个方法，其他的方法也可能会包含上述的大量<code>if-else</code>添加删除操作，所以需要将创造<code>milkTea</code>的代码抽离出来，用另外一个对象来进行操控，这个对象就可以称之为“工厂”。</p></blockquote><p>创建工厂<code>SimpleFactory.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> MilkTea <span class="title">createMilkTea</span><span class="params">(String type)</span> </span>{</span><br><span class="line">MilkTea milkTea = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">"lemon"</span>)) {</span><br><span class="line">milkTea = <span class="keyword">new</span> LemonMilkTea();</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"apple"</span>)) {</span><br><span class="line">milkTea = <span class="keyword">new</span> AppleMilkTea();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> milkTea;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Store.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>{</span><br><span class="line">SimpleFactory factory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Store</span><span class="params">(SimpleFactory factory)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.factory = factory;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MilkTea <span class="title">createMilkTea</span><span class="params">(String type)</span> </span>{</span><br><span class="line">MilkTea milkTea = factory.createMilkTea(type);</span><br><span class="line"><span class="comment">//暂不考虑milkTea==null的情况</span></span><br><span class="line">milkTea.prepare();</span><br><span class="line"><span class="keyword">return</span> milkTea;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>简单工厂其实不是一个设计模式，反而像是一种编程习惯。</p><p>参考书籍：Head First设计模式第四章“烘烤OO的精华：工厂模式”</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/design-pattern1.png" alt="image-20201107205416084"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex入门</title>
      <link href="2020/11/04/vuex-ru-men/"/>
      <url>2020/11/04/vuex-ru-men/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/vuejs/vuex/dev/docs/.vuepress/public/vuex.png" alt="Centralized State Management for Vue.js."></p><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>初始化项目，项目目录为：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  babel.config.js</span><br><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br><span class="line">│  README.md</span><br><span class="line">│  </span><br><span class="line">├─node_modules       </span><br><span class="line">├─public</span><br><span class="line">│      favicon.ico</span><br><span class="line">│      index.html</span><br><span class="line">│      </span><br><span class="line">└─src</span><br><span class="line">    │  App.vue</span><br><span class="line">    │  main.js</span><br><span class="line">    │  </span><br><span class="line">    ├─assets</span><br><span class="line">    │      logo.png</span><br><span class="line">    │      </span><br><span class="line">    ├─components</span><br><span class="line">    │      HelloWorld.vue</span><br><span class="line">    │      </span><br><span class="line">    └─store</span><br><span class="line">            index.js</span><br></pre></td></tr></tbody></table></figure><p>初始<code>App.vue</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;HelloWorld /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from "./components/HelloWorld.vue";</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: "App",</span><br><span class="line">  components: {</span><br><span class="line">    HelloWorld,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>初始<code>HelloWorld.vue</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="hello"&gt;</span><br><span class="line">    &lt;h1&gt;Vuex 示例&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: "HelloWorld",</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>初始化的<code>Vuex</code>在<code>/src/store</code>目录下的<code>index.js</code>:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    state: {},</span><br><span class="line">    mutations: {},</span><br><span class="line">    actions: {},</span><br><span class="line">    modules: {}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>此时页面显示效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201104165246857.png" alt="image-20201104165246857"></p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>在组件中引入<code>Vuex</code>中的状态</p><ol><li><p>直接引入</p><p>直接修改<code>HelloWorld.vue</code>的h标签</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{ this.$store.state.msg }}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>index.js</code>中加入</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">state: {</span><br><span class="line">        msg: <span class="string">'this is vuex --- Vuex'</span></span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><p>显示结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201105084551745.png" alt="image-20201105084551745"></p></li><li><p>计算属性引入</p><p>在<code>HelloWorld.vue</code>中增加计算属性，h标签和上面保持一致</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">    computed: {</span><br><span class="line">        <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.msg</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>显示结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201105085912982.png" alt="image-20201105085912982"></p></li><li><p><code>mapState</code>辅助函数</p><p>修改<code>HelloWorld.vue</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="hello"&gt;</span><br><span class="line">    &lt;h1&gt;{{ msg }}&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;{{ msgAlias }}&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;{{ msgAddLocation }}&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import {</span><br><span class="line">    mapState</span><br><span class="line">} from 'vuex'</span><br><span class="line">export default {</span><br><span class="line">    name: "HelloWorld",</span><br><span class="line">    data(){</span><br><span class="line">      return{</span><br><span class="line">        localMsg:'local'</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    computed: mapState({</span><br><span class="line">        msg: state =&gt; state.msg,</span><br><span class="line">        msgAlias: 'msg',</span><br><span class="line">        msgAddLocation(state) {</span><br><span class="line">          return state.msg+this.localMsg</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>显示结果为：</p><p><img src="C:\Users\wan\AppData\Roaming\Typora\typora-user-images\image-20201105091214317.png" alt="image-20201105091214317"></p><p>当映射的计算属性名称和<code>state</code>的子节点名称相同，可以给<code>mapState</code>传一个字符串数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">        <span class="string">'msg'</span></span><br><span class="line">    ])</span><br></pre></td></tr></tbody></table></figure><p>此时显示结果为：</p><p><img src="C:\Users\wan\AppData\Roaming\Typora\typora-user-images\image-20201105091719949.png" alt="image-20201105091719949"></p></li></ol><ol><li><p>对象展开运算符<code>...mapState</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:{</span><br><span class="line">    ...mapState([<span class="string">'msg'</span>]),</span><br><span class="line">    ...mapState({</span><br><span class="line">        message:<span class="string">'msg'</span></span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p><code>getter</code>可以视为<code>store</code>的计算属性，其第一个参数为<code>state</code></p><p>修改<code>index.js</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    state: {</span><br><span class="line">        msg: <span class="string">'this is vuex --- Vuex by mapState'</span>,</span><br><span class="line">        name: <span class="string">'wonderful '</span></span><br><span class="line">    },</span><br><span class="line">    getters: {</span><br><span class="line">        getMsg: <span class="function"><span class="params">state</span> =&gt;</span> state.msg,</span><br><span class="line">        getName: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> state.name + getters.getMsg</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>修改<code>HelloWorld.vue</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: {</span><br><span class="line">    <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getName</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>显示结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201105093838536.png" alt="image-20201105093838536"></p><p><code>mapGetters</code>辅助函数</p><p>修改<code>HelloWorld.vue</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="hello"&gt;</span><br><span class="line">    &lt;h1&gt;{{ msg }}&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;{{ name }}&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import {</span><br><span class="line">    mapGetters</span><br><span class="line">} from 'vuex'</span><br><span class="line">export default {</span><br><span class="line">    name: "HelloWorld",</span><br><span class="line">    computed: mapGetters({</span><br><span class="line">      msg: 'getMsg',</span><br><span class="line">      name: 'getName'</span><br><span class="line">    })</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>使用对象展开运算符<code>...mapGetters</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="hello"&gt;</span><br><span class="line">    &lt;h1&gt;{{ getMsg }}&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;{{ getName }}&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import {</span><br><span class="line">    mapGetters</span><br><span class="line">} from 'vuex'</span><br><span class="line">export default {</span><br><span class="line">    name: "HelloWorld",</span><br><span class="line">    computed: {</span><br><span class="line">        ...mapGetters(['getMsg', 'getName'])</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>上面两种写法的显示结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/image-20201105095102215.png" alt="image-20201105095102215"></p><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><p>更改<code>Vuex</code>的<code>store</code>中状态的唯一方法是提交<code>mutation</code></p><p>修改的<code>HelloWorld.vue</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="hello"&gt;</span><br><span class="line">    &lt;h1 @mouseover="onmouseover"&gt;{{ count }}&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import {</span><br><span class="line">    mapGetters</span><br><span class="line">} from 'vuex'</span><br><span class="line">export default {</span><br><span class="line">    name: "HelloWorld",</span><br><span class="line">    computed: mapGetters({</span><br><span class="line">      msg: 'getMsg',</span><br><span class="line">      name: 'getName',</span><br><span class="line">      count: 'getCount'</span><br><span class="line">    }),</span><br><span class="line">    methods:{</span><br><span class="line">      onmouseover(){</span><br><span class="line">        this.$store.commit('increment')</span><br><span class="line">      },</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>修改后的<code>index.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    state: {</span><br><span class="line">        msg: <span class="string">'this is vuex --- Vuex by mapState'</span>,</span><br><span class="line">        name: <span class="string">'wonderful '</span>,</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    },</span><br><span class="line">    getters: {</span><br><span class="line">        getMsg: <span class="function"><span class="params">state</span> =&gt;</span> state.msg,</span><br><span class="line">        getName: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> state.name + getters.getMsg,</span><br><span class="line">        getCount: <span class="function"><span class="params">state</span> =&gt;</span> state.count</span><br><span class="line">    },</span><br><span class="line">    mutations: {</span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> {</span><br><span class="line">            state.count++</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    actions: {},</span><br><span class="line">    modules: {}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>此时鼠标在数字上移动时，数字会递增。</p><p>在提交<code>commit</code>时也可以传入额外的参数，即<code>mutation</code>的载荷(<code>payload</code>)</p><p>对上述例子进行少许改动：</p><p><code>HelloWorld.vue</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:{</span><br><span class="line">    <span class="function"><span class="title">onmouseover</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.$store.commit(<span class="string">'increment'</span>,<span class="number">10</span>)</span><br><span class="line">    },</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>index.js</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: {</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state, payload</span>)</span> {</span><br><span class="line">        state.count += payload</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>对于<code>payload</code>，也可以使用对象风格：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="hello"&gt;</span><br><span class="line">    &lt;h1 @mouseover="onmouseover"&gt;{{ count+' '+name }}&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import {</span><br><span class="line">    mapGetters</span><br><span class="line">} from 'vuex'</span><br><span class="line">export default {</span><br><span class="line">    name: "HelloWorld",</span><br><span class="line">    computed: mapGetters({</span><br><span class="line">        msg: 'getMsg',</span><br><span class="line">        name: 'getName',</span><br><span class="line">        count: 'getCount'</span><br><span class="line">    }),</span><br><span class="line">    methods: {</span><br><span class="line">        onmouseover() {</span><br><span class="line">            this.$store.commit('increment', {</span><br><span class="line">                count: 10,</span><br><span class="line">                msg: 'new',</span><br><span class="line">                name: 'thanks'</span><br><span class="line">            })</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>index.js</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    state: {</span><br><span class="line">        msg: <span class="string">'msg'</span>,</span><br><span class="line">        name: <span class="string">'name '</span>,</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    },</span><br><span class="line">    getters: {</span><br><span class="line">        getMsg: <span class="function"><span class="params">state</span> =&gt;</span> state.msg,</span><br><span class="line">        getName: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> state.name + getters.getMsg,</span><br><span class="line">        getCount: <span class="function"><span class="params">state</span> =&gt;</span> state.count</span><br><span class="line">    },</span><br><span class="line">    mutations: {</span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params">state, payload</span>)</span> {</span><br><span class="line">            state.count += payload.count</span><br><span class="line">            state.msg += payload.msg</span><br><span class="line">            state.name += payload.name</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    actions: {},</span><br><span class="line">    modules: {}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><code>mapMutations</code>辅助函数</p><p>修改<code>HelloWorld.vue</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class="hello"&gt;</span><br><span class="line">    &lt;h1 @mouseover="onmouseover"&gt;{{ count }}&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import {</span><br><span class="line">    mapGetters,</span><br><span class="line">    mapMutations</span><br><span class="line">} from 'vuex'</span><br><span class="line">export default {</span><br><span class="line">    name: "HelloWorld",</span><br><span class="line">    computed: mapGetters({</span><br><span class="line">        msg: 'getMsg',</span><br><span class="line">        name: 'getName',</span><br><span class="line">        count: 'getCount'</span><br><span class="line">    }),</span><br><span class="line">    methods: {</span><br><span class="line">        onmouseover() {</span><br><span class="line">            this.add({</span><br><span class="line">                count: 10</span><br><span class="line">            })</span><br><span class="line">        },</span><br><span class="line">        ...mapMutations(['increment']),</span><br><span class="line">        ...mapMutations({</span><br><span class="line">          add:'increment'//将increment映射为add</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>在 <code>Vuex</code> 中，<strong><code>mutation</code>都是同步事务</strong>,<code>store.commit('increment')</code>中，任何由<code>increment</code>导致的状态变更都应该在此刻完成。</p></blockquote><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p><code>Action</code>类似于<code>mutation</code>，不同在于：</p><ul><li><code>Action</code>提交的是<code>mutation</code>，而不是直接变更状态</li><li><code>Action</code>可以包含任意<strong>异步</strong>操作</li></ul><p>注册一个<code>Action</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: {</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">context</span>)</span> {</span><br><span class="line">        context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述写法等同于以下写法(<strong>ES2015 的 <a href="https://github.com/lukehoban/es6features#destructuring">参数解构</a></strong>)：<br></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: {</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">{commit}</span>)</span> {</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p><code>Action</code>函数接受一个与<code>store</code>实例具有相同方法和属性的<code>context</code>对象，因此可以调用<code>context.commit</code>提交<code>mutation</code>，或者通过<code>context.state</code>和<code>context.getters</code>来获取<code>state</code>和<code>getters</code></p><blockquote><p><code>context</code>对象并不是<code>store</code>实例本身</p></blockquote><p><code>Action</code>通过<code>store.dispatch</code>方法触发：</p><p><code>store.dispatch('increment')</code></p><p>修改<code>HelloWorld.vue</code>中的<code>mouseover</code>函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">onmouseover</span>(<span class="params"></span>)</span> {</span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">'increment'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不同于<code>mutation</code>，我们可以在<code>Action</code>中执行异步操作：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">increment</span>(<span class="params">context</span>)</span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    }, <span class="number">1000</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Actions</code>支持同样的载荷方式和对象方式进行分发：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.dispatch(<span class="string">'increment'</span>, {</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.dispatch({</span><br><span class="line">  type: <span class="string">'increment'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><code>mapActions</code>辅助函数</p><p>修改<code>HelloWorld.vue</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {</span><br><span class="line">    mapGetters,</span><br><span class="line">    mapMutations,</span><br><span class="line">    mapActions</span><br><span class="line">} <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">    computed: mapGetters({</span><br><span class="line">        msg: <span class="string">'getMsg'</span>,</span><br><span class="line">        name: <span class="string">'getName'</span>,</span><br><span class="line">        count: <span class="string">'getCount'</span></span><br><span class="line">    }),</span><br><span class="line">    methods: {</span><br><span class="line">        <span class="function"><span class="title">onmouseover</span>(<span class="params"></span>)</span> {</span><br><span class="line">            <span class="built_in">this</span>.increment()</span><br><span class="line">            <span class="comment">//this.add()</span></span><br><span class="line">        },</span><br><span class="line">        ...mapActions([<span class="string">'increment'</span>]),</span><br><span class="line">        ...mapActions({</span><br><span class="line">          add: <span class="string">'increment'</span></span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p><code>Action</code>组合</p><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常处理</title>
      <link href="2020/08/19/java-yi-chang-chu-li/"/>
      <url>2020/08/19/java-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Java异常处理手段"><a href="#Java异常处理手段" class="headerlink" title="Java异常处理手段"></a>Java异常处理手段</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><h4 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">File f= <span class="keyword">new</span> File(<span class="string">"d:/test.exe"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line">System.out.println(<span class="string">"试图打开 d:/test.exe"</span>);</span><br><span class="line"><span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">}<span class="keyword">catch</span>(FileNotFoundException e){</span><br><span class="line">System.out.println(<span class="string">"d:/test.exe不存在"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用异常的父类catch"><a href="#使用异常的父类catch" class="headerlink" title="使用异常的父类catch"></a>使用异常的父类catch</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">         </span><br><span class="line">        File f= <span class="keyword">new</span> File(<span class="string">"d:/test.exe"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/test.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">        }<span class="keyword">catch</span>(Exception e){</span><br><span class="line">            System.out.println(<span class="string">"d:/test.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }   </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="多异常捕捉"><a href="#多异常捕捉" class="headerlink" title="多异常捕捉"></a>多异常捕捉</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"> </span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/test.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/test.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            Date d = sdf.parse(<span class="string">"2016-06-03"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            System.out.println(<span class="string">"d:/test.exe不存在"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ParseException e) {</span><br><span class="line">            System.out.println(<span class="string">"日期格式解析错误"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="多异常捕捉2"><a href="#多异常捕捉2" class="headerlink" title="多异常捕捉2"></a>多异常捕捉2</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"> </span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/test.exe"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(<span class="string">"试图打开 d:/test.exe"</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">"成功打开"</span>);</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">            Date d = sdf.parse(<span class="string">"2016-06-03"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException | ParseException e) {</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException)</span><br><span class="line">                System.out.println(<span class="string">"d:/test.exe不存在"</span>);</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException)</span><br><span class="line">                System.out.println(<span class="string">"日期格式解析错误"</span>);</span><br><span class="line"> </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>无论是否出现异常，finally中的代码一定会被执行</p><h3 id="throw和throws"><a href="#throw和throws" class="headerlink" title="throw和throws"></a>throw和throws</h3><blockquote><p>throw抛出的异常如果不处理，会传递到父方法</p></blockquote><ol><li>throws 出现在方法声明上，而throw通常都出现在方法体内。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</li></ol><h2 id="Java异常分类"><a href="#Java异常分类" class="headerlink" title="Java异常分类"></a>Java异常分类</h2><h3 id="可查异常CheckedException"><a href="#可查异常CheckedException" class="headerlink" title="可查异常CheckedException"></a>可查异常CheckedException</h3><p>可查异常是必须进行处理的异常，要么进行try-catch，要么抛出。如果不处理，编译器不会通过。</p><h3 id="运行时异常RuntimeException"><a href="#运行时异常RuntimeException" class="headerlink" title="运行时异常RuntimeException"></a>运行时异常RuntimeException</h3><p>常见的运行时异常有：</p><ul><li>ArithmeticException</li><li>ArrayIndexOutOfBoundsException</li><li>NullPointerException</li></ul><h3 id="错误Error"><a href="#错误Error" class="headerlink" title="错误Error"></a>错误Error</h3><p>错误是指系统级别的异常，例如OutOfMemoryError</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心技术卷一</title>
      <link href="2020/08/19/java-he-xin-ji-zhu-juan-yi/"/>
      <url>2020/08/19/java-he-xin-ji-zhu-juan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h1><ul><li>[x] P164</li></ul><h3 id="安装库源文件和文档"><a href="#安装库源文件和文档" class="headerlink" title="安装库源文件和文档"></a>安装库源文件和文档</h3><p>库源文件在jdk/src.zip中</p><p>使用<code>jar xvf  jdk/src.zip</code>解压</p><p>更多源代码访问<a href="http://jdk8.java.net">网站</a></p><p>文档独立于JDK，需要单独下载</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a += b += c <span class="comment">//等价于a += (b += c)  右结合运算符</span></span><br></pre></td></tr></tbody></table></figure><p>不要使用<code>==</code>来检测两个字符串是否相等，该运算符只能确定两个字符串是否放置在同一位置上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = "Hello";</span><br><span class="line">if(s1=="Hello")...//可能为true</span><br><span class="line">if(s1.substring(0,3)=="Hel")...//可能为false</span><br></pre></td></tr></tbody></table></figure><h4 id="多态与动态绑定"><a href="#多态与动态绑定" class="headerlink" title="多态与动态绑定"></a>多态与动态绑定</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Manager是Employee的子类</span></span><br><span class="line">Manager boss = <span class="keyword">new</span> Manager();</span><br><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">2</span>];</span><br><span class="line">staff[<span class="number">0</span>] = boss;</span><br><span class="line">staff[<span class="number">1</span>] = employee;</span><br><span class="line"><span class="keyword">for</span>(Employee e:staff){</span><br><span class="line">    System.out.plintln(e.getSalaty())</span><br><span class="line">}</span><br><span class="line"><span class="comment">//当e引用Employee对象是，调用Employee类中的getSalary()</span></span><br><span class="line"><span class="comment">//当e引用Manager对象是，调用Manager类中的getSalary()</span></span><br><span class="line"><span class="comment">//一个对象变量(如：e)可以指示多种实际类型的现象叫多态(polymorphism)</span></span><br><span class="line"><span class="comment">//在运行时能够自动选择调用哪个方法的现象叫做动态绑定(dynamic binding)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的类型转换</span></span><br><span class="line">Manager boss = (Manager)staff[<span class="number">0</span>];  <span class="comment">//</span></span><br><span class="line">Manager boss = (Manager)staff[<span class="number">1</span>];  <span class="comment">//由上向下的转换 error</span></span><br><span class="line"><span class="comment">//可以在转换之前进行判断</span></span><br><span class="line"><span class="keyword">if</span>(staff[<span class="number">1</span>] <span class="keyword">instanceof</span> Manager){</span><br><span class="line">    boss = (Manager)staff[<span class="number">1</span>];</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="一般情况下，应该尽量少用类型转换和instanceof"><a href="#一般情况下，应该尽量少用类型转换和instanceof" class="headerlink" title="一般情况下，应该尽量少用类型转换和instanceof"></a>一般情况下，应该尽量少用类型转换和instanceof</h5><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hashCode方法定义在Object类中，因此每个对象都有一个默认的散列码，其值为对象的存储地址</span></span><br><span class="line">String s = <span class="string">"OK"</span>;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">System.out.println(s.hasCode()+<span class="string">" "</span>+sb.hashCode());</span><br><span class="line">String t = <span class="keyword">new</span> String(<span class="string">"OK"</span>);</span><br><span class="line">StringBuilder tb = <span class="keyword">new</span> StringBuilder(t);</span><br><span class="line">System.out.println(t.hasCode()+<span class="string">" "</span>+tb.hashCode());</span><br><span class="line"><span class="comment">//结果:   对象     散列码</span></span><br><span class="line"><span class="comment">//  s       2556</span></span><br><span class="line"><span class="comment">//        sb      20526976</span></span><br><span class="line"><span class="comment">//        t       2556</span></span><br><span class="line"><span class="comment">//        tb      20527144</span></span><br><span class="line"><span class="comment">//s和t的散列码相同，因为字符串的散列码是由内容导出的</span></span><br><span class="line"><span class="comment">//sb和tb散列码不同，因为StringBuilder没有定义hashCode方法，其散列码由Object类默认的hashCode方法导出的对象存储地址</span></span><br></pre></td></tr></tbody></table></figure><h5 id="建议自定义类中添加toString方法"><a href="#建议自定义类中添加toString方法" class="headerlink" title="建议自定义类中添加toString方法"></a>建议自定义类中添加toString方法</h5><h3 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">3</span>);<span class="comment">//将会自动变成</span></span><br><span class="line">list.add(Integer.valueOf(<span class="number">3</span>));</span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> n = list.get(i);<span class="comment">//将会自动变成</span></span><br><span class="line"><span class="keyword">int</span> n = list.get(i).intValue();</span><br></pre></td></tr></tbody></table></figure><ul><li><h5 id="自动装箱规范要求boolean-byte-char-lt-127-介于-128-127之间的short和int被包装到固定的对象中。"><a href="#自动装箱规范要求boolean-byte-char-lt-127-介于-128-127之间的short和int被包装到固定的对象中。" class="headerlink" title="自动装箱规范要求boolean,byte,char<=127,介于 -128~127之间的short和int被包装到固定的对象中。"></a>自动装箱规范要求boolean,byte,char&lt;=127,介于 -128~127之间的short和int被包装到固定的对象中。</h5></li><li><h5 id="如果在一个表达式中混合使用Integer和Double类型，Integer就会自动拆箱，提升为double，再装箱为Double"><a href="#如果在一个表达式中混合使用Integer和Double类型，Integer就会自动拆箱，提升为double，再装箱为Double" class="headerlink" title="如果在一个表达式中混合使用Integer和Double类型，Integer就会自动拆箱，提升为double，再装箱为Double"></a>如果在一个表达式中混合使用Integer和Double类型，Integer就会自动拆箱，提升为double，再装箱为Double</h5></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    ...</span><br><span class="line">}<span class="keyword">catch</span>(Exception e){</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>[x] P239</li></ul><h1 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h1><h3 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据对象属性的拷贝程度（基本数据类型和引用类型）分为浅拷贝和深拷贝</span></span><br><span class="line"><span class="comment">//浅拷贝：创建一个新对象，拥有原始对象属性值的精确拷贝。若属性是基本数据类型，拷贝的就是属性的值；</span></span><br><span class="line"><span class="comment">//如果属性是引用类型，拷贝的就是内存地址</span></span><br><span class="line"><span class="comment">//因此当一个对象改变了这个地址就会影响到另外的对象</span></span><br><span class="line"><span class="comment">//即默认拷贝构造函数只是对对象进行浅拷贝复制（逐个成员一次拷贝），即只复制对象空间而不复制资源</span></span><br><span class="line"><span class="comment">//实现浅拷贝的类需要实现Cloneable接口，覆盖clone方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝：在拷贝引用类型属性时，为其另辟独立的内存空间，实现真正内容上的拷贝</span></span><br><span class="line"><span class="comment">//逐层实现Cloneable接口</span></span><br></pre></td></tr></tbody></table></figure><ul><li>[x] 258</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的异常都是由Throwable继承而来，在下一层分解为Error和Exception两个分支</span></span><br><span class="line"><span class="comment">//Error类描述Java运行时系统的内部错误和资源耗尽错误</span></span><br><span class="line"><span class="comment">//Exception又分解为两个分支</span></span><br><span class="line"><span class="comment">//一个分支派生于RuntimeException，另一个分支包含其他异常</span></span><br><span class="line"><span class="comment">//由程序错误导致的异常属于RuntimeException</span></span><br><span class="line"><span class="comment">//程序本身没有问题，但由于像I/O错误这类问题导致的异常属于其他异常</span></span><br></pre></td></tr></tbody></table></figure><h5 id="派生于RuntimeException的异常包含以下情况："><a href="#派生于RuntimeException的异常包含以下情况：" class="headerlink" title="派生于RuntimeException的异常包含以下情况："></a>派生于RuntimeException的异常包含以下情况：</h5><ul><li>错误的类型转换</li><li>数组访问越界</li><li>访问null指针</li></ul><h5 id="不是派生于RuntimeException的异常："><a href="#不是派生于RuntimeException的异常：" class="headerlink" title="不是派生于RuntimeException的异常："></a>不是派生于RuntimeException的异常：</h5><ul><li>试图在文件尾部后面读取数据</li><li>试图打开一个不存在的文件</li><li>试图根据给定的字符串查找Class对象，但这个字符串表示的类并不存在</li></ul><h5 id="规则：如果出现RuntimeException异常，那么就一定是你的问题"><a href="#规则：如果出现RuntimeException异常，那么就一定是你的问题" class="headerlink" title="规则：如果出现RuntimeException异常，那么就一定是你的问题"></a>规则：如果出现RuntimeException异常，那么就一定是你的问题</h5><ul><li>数组下标越界异常：ArrayIndexOutOfBoundsException</li><li>null指针异常：NullPointerException</li></ul><h5 id="Java语言规范将派生于Error类或者RuntimeException类的所有异常称为非受查异常-unchecked-其他异常称为受查异常-checked"><a href="#Java语言规范将派生于Error类或者RuntimeException类的所有异常称为非受查异常-unchecked-其他异常称为受查异常-checked" class="headerlink" title="Java语言规范将派生于Error类或者RuntimeException类的所有异常称为非受查异常(unchecked),其他异常称为受查异常(checked)"></a>Java语言规范将派生于Error类或者RuntimeException类的所有异常称为<em>非受查异常</em>(unchecked),其他异常称为受查异常(checked)</h5><p>运行时异常,不可查，不需要显示捕捉</p><p>可查异常，必须显示捕捉或者抛出</p><h4 id="断言和日志"><a href="#断言和日志" class="headerlink" title="断言和日志"></a>断言和日志</h4><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h1 id="Java核心技术与面试指南"><a href="#Java核心技术与面试指南" class="headerlink" title="Java核心技术与面试指南"></a>Java核心技术与面试指南</h1><ul><li>[ ] P96</li><li>[ ] P87</li><li>[ ] P107</li></ul><p>定义基本数据类型的变量，对象的引用，还有函数调用的现场保存都使用<code>JVM</code>栈空间</p><p>通过<code>new</code>和构造器创建的对象放在堆空间，堆事垃圾收集器管理的主要区域</p><p>栈用光StackOverflowError</p><p>堆和常量池不足OutOfMemoryError</p><ul><li>两个对象相同(equals返回true)，则对象的hashCode值一定相同</li><li>当两个对象的hashCode相同，它们并不一定相同</li><li>equals：<ul><li>自反性(x.equals(x)==true)</li><li>对称性(x.equals(y)==true)(y.equals(x)==true)</li><li>传递性(x.equals(y)==true)(y.equals(z)==true)(x.equals(z)==true)</li><li>一致性(x,y引用的对象信息没有改变时，x.equals(y)返回值不变)</li></ul></li></ul><p>sleep()进入阻塞态 对应TIMED_WAITING</p><p>yield()进入就绪态 </p><p>join() 对应WAITING</p><h5 id="两阶段终止模式"><a href="#两阶段终止模式" class="headerlink" title="两阶段终止模式"></a>两阶段终止模式</h5><p>InterruptException会重置isInterrupted为false</p><p>isInterrupted不会清除打断标记</p><p>Interrupted会清除打断标记</p><h5 id="Transient-阻止用此关键字修饰的变量序列化，当对象反序列化时该变量不会被持久化和恢复，只能修饰变量"><a href="#Transient-阻止用此关键字修饰的变量序列化，当对象反序列化时该变量不会被持久化和恢复，只能修饰变量" class="headerlink" title="Transient:阻止用此关键字修饰的变量序列化，当对象反序列化时该变量不会被持久化和恢复，只能修饰变量"></a>Transient:阻止用此关键字修饰的变量序列化，当对象反序列化时该变量不会被持久化和恢复，只能修饰变量</h5><h5 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h5><ul><li>按流向分：输入流和输出流</li><li>按操作单元分：字节流和字符流</li><li><p>按流的角色分：节点流和处理流</p></li><li><p>InputStream/Reader:所有输入流的基类，前者字节输入流，后者字符输入流</p></li><li><p>OutputStream/Writer：所有输出流的基类，前者字节输出流，后者字符输出流</p></li><li><p>Reader-字符读取</p><ul><li>节点流<ul><li>FileReader(文件操作)</li><li>PipedReader(管道操作)</li><li>CharArrayReader(数组操作)</li></ul></li><li>处理流<ul><li>BufferedReader(缓冲操作)</li><li>InputStreamReader(转化控制)</li></ul></li></ul></li><li>Writer-字符写出<ul><li>节点流<ul><li>FileWriter</li><li>PipedWriter</li><li>CharArrayWriter</li></ul></li><li>处理流<ul><li>BufferedWriter</li><li>OutputStreamWriter</li><li>PrintWriter(打印控制)</li></ul></li></ul></li><li>InputStream-字节读取<ul><li>节点流<ul><li>FileInputStream</li><li>PipedInputStream</li><li>ByteArrayInputStream</li></ul></li><li>处理流<ul><li>BufferedInputStream</li><li>DataInputStream(基本数据类型操作)</li><li>ObjectInputStream(对象序列化操作)</li><li>SequenceInputStream</li></ul></li></ul></li><li><p>OutputStream-字节读出</p><ul><li>节点流<ul><li>FileOutputStream</li><li>PipedOutputStream</li><li>ByteArrayOutputStream</li></ul></li><li>处理流<ul><li>BufferedOutputStream</li><li>DataOutputStream</li><li>ObjectOutputStream</li><li>PrintStream</li></ul></li></ul></li><li><p>BIO：同步阻塞I/O</p></li><li>NIO：同步非阻塞I/O</li><li>AIO：异步非阻塞I/O（NIO2）</li></ul><p>synchronized</p><p>语法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象){</span><br><span class="line">    临界区</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>){</span><br><span class="line">            count++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//锁方法相当于锁this对象</span></span><br><span class="line"><span class="comment">//-----------------------------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (Test.class){</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//锁静态方法相当于锁类对象</span></span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><p>private与final提供安全的意义所在，开闭原则中的闭</p><p>常见的线程安全类</p><ul><li>String</li><li>Integer等包装类</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>HashTable</li><li>java.util.concurrent包下的类</li></ul><p>这里线程安全是指，多个线程调用同一个实例的某个方法时，是线程安全的，即</p><ul><li>它们的每个方法是原子的</li><li>但它们多个方法的组合不是原子的</li></ul><p><strong>==与equals()</strong>:</p><p><strong>compareTo()</strong>:</p><h2 id="关于JVM、JDK、JRE"><a href="#关于JVM、JDK、JRE" class="headerlink" title="关于JVM、JDK、JRE"></a>关于JVM、JDK、JRE</h2><p>Java虚拟机(JVM)是运行Java字节码的虚拟机，JVM针对不同系统有不同的实现。</p><p>Java程序从源代码到运行一般有三步：</p><p><code>*.java文件</code>—&gt;<code>*.class文件</code>—&gt;机器可执行的二进制代码</p><p>JDK(Java Develpoment Kit)，是功能齐全的Java SDK，拥有JRE的一切并且还有编译器(javac)和工具(如javadoc和jdb)，能够创建和编译程序。</p><p>JRE是Java运行时环境，是运行已编译Java程序所需所有内容的集合，包括JVM，Java类库，Java命令和其他的基础构件，不能创建新程序。</p><h2 id="关于重写-override-与重载-overload"><a href="#关于重写-override-与重载-overload" class="headerlink" title="关于重写(override)与重载(overload)"></a>关于重写(override)与重载(overload)</h2><p><strong>重载</strong></p><p>完整描述一个方法，需要指出方法名和参数类型，这就是方法的签名。当多个方法有相同名字、不同参数就会产生重载。返回类型不是方法签名的一部分。</p><p><strong>重写</strong></p><p>子类对父类的允许访问的方法的实现进行重新编写，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</p><h2 id="关于封装、继承、多态"><a href="#关于封装、继承、多态" class="headerlink" title="关于封装、继承、多态"></a>关于封装、继承、多态</h2><p><strong>封装</strong></p><p>封装是把一个对象的属性私有化，并提供一些可以被外部访问的属性的方法。</p><p><strong>继承</strong></p><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或功能，也可以使用父类的功能。</p><blockquote><p>需要注意的三点：</p><ol><li>子类拥有父类对象所有的属性和方法(包括私有属性和私有方法)，但父类中的私有属性和方法子类无法访问，只是拥有。</li><li>子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li></ol></blockquote><p><strong>多态</strong></p><p>多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在程序运行期间才能决定。</p><p>在Java中有两种方式实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><p><strong>继承与实现</strong></p><p><strong>继承与组合</strong></p><p><strong>Java只有值传递</strong></p><p><strong>成员变量和方法作用域</strong></p><ul><li>default：表明该成员变量或者方法只有自己和其位于同一个包的内可见,其他包内的类不能访问,即便是它的子类。</li><li>public：表明该成员变量或者方法是对所有类或者对象都是可见的,所有类或者对象都可以直接访问。</li><li>protected：表明成员变量或者方法对类自身,与同在一个包中的其他类可见,其他包下的类不可访问,除非是他的子类。</li><li>private：表明该成员变量或者方法是私有的,只有当前类对其具有访问权限,除此之外其他类或者对象都没有访问权限.子类也没有访问权限。</li></ul><h2 id="关于接口和抽象类"><a href="#关于接口和抽象类" class="headerlink" title="关于接口和抽象类"></a>关于接口和抽象类</h2><ul><li><p>在Java中，接口不是类，而是对类的一组需求描述，并且不能通过new实例化一个接口，但是可以声明接口的变量，接口变量必须引用实现了接口的类对象。</p></li><li><p>接口中方法默认标记为<code>public</code>，域标记为<code>public static final</code></p></li><li><p>每个类只能继承一个抽象类，但是可以实现多个接口</p></li></ul><h2 id="关于-与equals"><a href="#关于-与equals" class="headerlink" title="关于==与equals"></a>关于==与equals</h2><p>==：作用是判断两个对象的地址是否相等。若对象是基本数据类型时比较对象的值，若对象是引用数据类型则比较内存地址。</p><p>equals：作用是判断两个对象是否相等，若类没有覆盖equals方法，此时equals相当于==；若类覆盖了equals方法，则通过equals来比较对象的内容是否相等。</p><h2 id="关于hashCode与equals"><a href="#关于hashCode与equals" class="headerlink" title="关于hashCode与equals"></a>关于hashCode与equals</h2><p>只有在HashMap、HashSet、HashTable等本质是散列表的数据结构中使用对象时，hashCode和equals才有关系，此时需要重写hashCode和equals。</p><blockquote><p>对象相同，hashCode一定相同</p><p>hashCode相同，对象不一定相同</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java核心技术卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="2020/08/08/docker/"/>
      <url>2020/08/08/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04安装Docker"><a href="#Ubuntu18-04安装Docker" class="headerlink" title="Ubuntu18.04安装Docker"></a>Ubuntu18.04安装Docker</h1><blockquote><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">参考</a></p></blockquote><p>1.更换国内软件源，推荐中国科技大学的源，稳定速度快（可选）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><p>2.安装需要的包</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https ca-certificates software-properties-common curl</span><br></pre></td></tr></tbody></table></figure><p>3.添加 GPG 密钥，并添加 Docker-ce 软件源，这里还是以中国科技大学的 Docker-ce 源为例</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="line">$(lsb_release -cs) stable"</span><br></pre></td></tr></tbody></table></figure><p>4.添加成功后更新软件包缓存</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><p>5.安装 Docker-ce</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></tbody></table></figure><p>6.设置开机自启动并启动 Docker-ce（安装成功后默认已设置并启动，可忽略）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></tbody></table></figure><p>7.测试运行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure><p>8.添加当前用户到 docker 用户组，可以不用 sudo 运行 docker（可选）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></tbody></table></figure><p>9.测试添加用户组（可选）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></tbody></table></figure><p>10.更改docker源</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 没有就新建</span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"># 修改配置</span><br><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]</span><br><span class="line">}</span><br><span class="line"># 使配置文件生效</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"># 重启Docker</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></tbody></table></figure><div class="table-container"><table><thead><tr><th>国内Docker镜像仓库名称</th><th>链接</th></tr></thead><tbody><tr><td>Docker 官方中国区</td><td><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></td></tr><tr><td>网易</td><td><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></td></tr><tr><td>中国科学技术大学</td><td><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></td></tr><tr><td>阿里云</td><td>https://&lt;你的ID&gt;.mirror.aliyuncs.com</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/26010.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Ubuntu18.04 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python深度学习</title>
      <link href="2020/08/07/python-shen-du-xue-xi/"/>
      <url>2020/08/07/python-shen-du-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="神经网络的数据表示"><a href="#神经网络的数据表示" class="headerlink" title="神经网络的数据表示"></a>神经网络的数据表示</h3><h4 id="标量（0D张量）"><a href="#标量（0D张量）" class="headerlink" title="标量（0D张量）"></a>标量（0D张量）</h4><p>仅包含一个数字的张量叫作标量（scalar，也叫标量张量、零维张量、0D张量）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array(<span class="number">12</span>) <span class="comment"># array(12)</span></span><br><span class="line">x.ndim <span class="comment"># 0</span></span><br></pre></td></tr></tbody></table></figure><h4 id="向量（1D张量）"><a href="#向量（1D张量）" class="headerlink" title="向量（1D张量）"></a>向量（1D张量）</h4><p>数字组成的数组叫作向量（vector）或者一维张量（1D张量）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">12</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">14</span>,<span class="number">7</span>])</span><br><span class="line">x <span class="comment"># array([12,  3,  6, 14,  7])</span></span><br><span class="line">x.ndim <span class="comment"># 1</span></span><br></pre></td></tr></tbody></table></figure><p>这个向量有5个元素，称为<strong>5D向量</strong>。5D向量只有一个轴，沿着轴有5个维度，而5D张量有5个轴（沿着每个轴可能有任意个维度）</p><blockquote><p>维度（dimensionality）可以表示沿着某个轴上的元素个数</p></blockquote><h4 id="矩阵（2D张量）"><a href="#矩阵（2D张量）" class="headerlink" title="矩阵（2D张量）"></a>矩阵（2D张量）</h4><p>向量组成的数组叫作矩阵（matrix）或二维张量（2D张量）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">    [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>]</span><br><span class="line">])</span><br><span class="line">x <span class="comment"># array([[ 1,  2,  3,  4,  5],[11, 12, 13, 14, 15],[21, 22, 23, 24, 25]])</span></span><br><span class="line">x.ndim <span class="comment"># 2</span></span><br></pre></td></tr></tbody></table></figure><h4 id="张量的关键属性"><a href="#张量的关键属性" class="headerlink" title="张量的关键属性"></a>张量的关键属性</h4><ul><li>轴的个数。如3D张量有3个轴，矩阵有2个轴，在<code>Numpy</code>库中也叫<code>ndim</code></li><li>形状。是一个整数元组，表示张量沿每个轴的维度大小，如矩阵（3，5）、3D张量（3，3，5）；向量的形状只包含一个元素，如（5，）；标量的形状为空，即（）</li><li>数据类型。在<code>Python</code>库中也叫<code>dtype</code>。</li></ul><p>例如在<code>MNIST</code>数据集中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_images.ndim <span class="comment"># 3</span></span><br><span class="line">train_images.shape <span class="comment"># (60000,28,28)</span></span><br><span class="line">train_images.dtype <span class="comment"># unit8</span></span><br></pre></td></tr></tbody></table></figure><p>即<code>train_images</code>是一个由8位整数组成的3D向量，仔细来讲，是60000个矩阵组成的数组，每个矩阵由28x28个整数组成。</p><h4 id="在Numpy中操作张量——张量切片操作"><a href="#在Numpy中操作张量——张量切片操作" class="headerlink" title="在Numpy中操作张量——张量切片操作"></a>在Numpy中操作张量——张量切片操作</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train_images.shape = (60000, 28, 28)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择第10~99个数字，将其放在形状为(90, 28, 28)的数组中</span></span><br><span class="line">my_slice = train_images[<span class="number">10</span>:<span class="number">100</span>]</span><br><span class="line">my_slice.shape  <span class="comment">#(90, 28, 28)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面两种写法与上面写法相同</span></span><br><span class="line">my_slice = train_images[<span class="number">10</span>:<span class="number">100</span>, :, :]</span><br><span class="line">my_slice.shape  <span class="comment">#(90, 28, 28)</span></span><br><span class="line"></span><br><span class="line">my_slice = train_images[<span class="number">10</span>:<span class="number">100</span>, <span class="number">0</span>:<span class="number">28</span>, <span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">my_slice.shape  <span class="comment">#(90, 28, 28)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有图像的右下角选出14像素x14像素的区域</span></span><br><span class="line">my_slice = train_images[:, <span class="number">14</span>:, <span class="number">14</span>:]</span><br><span class="line">my_slice.shape  <span class="comment">#(60000, 14, 14)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有图像的中心选出14像素x14像素的区域</span></span><br><span class="line">my_slice = train_images[:, <span class="number">7</span>:<span class="number">-7</span>, <span class="number">7</span>:<span class="number">-7</span>]</span><br><span class="line">my_slice.shape  <span class="comment">#(60000, 14, 14)</span></span><br></pre></td></tr></tbody></table></figure><p><code>a:b</code>表示切片沿着每个张量轴的起始索引<code>a</code>和结束索引<code>b</code>，<code>:</code>表示选择整个轴</p><h4 id="数据批量"><a href="#数据批量" class="headerlink" title="数据批量"></a>数据批量</h4><p>深度学习的所有数据张量的第一个轴都是样本轴（simple axis 也叫样本维度），在MNIST数据集中，样本就是数字图像。一般深度模型不会同时处理整个数据集，而是将数据拆分成小批量。对于这种批量，第一个轴叫作批量轴或批量维度。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MNIST数据集的第一个批量，批量大小为128</span></span><br><span class="line">batch = train_images[:<span class="number">128</span>]</span><br><span class="line"><span class="comment"># 下一个批量</span></span><br><span class="line">batch = train_images[<span class="number">128</span>:<span class="number">256</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>向量数据：2D张量，形状为(samples, features)<ul><li>人口统计数据集，其中包括每个人的年龄、邮编和收入，每个人可以表示为3个值的向量，而整个数据集包含100000个人，因此可以存储在形状为<code>(100000, 3)</code>的2D张量中</li><li>文本文档数据集，将每个文档表示为每个单词在其中出现的次数，每个文档可以被编码为包含20000个值的向量，整个数据集包含500个文档，因此可以存储在形状为<code>(500, 20000)</code>的张量中</li></ul></li><li>时间序列数据或序列数据：3D张量，形状为(samples,timesteps,features)<ul><li>股票价格数据集，每一分钟，将股票的当前价格、前一分钟的最高价格和前一分钟的最低价格保存下来。因此每分钟被编码成一个<strong>3D向量</strong>，整个交易日被编码为一个形状为(390,3)的2D张量，而250天的数据就可以保存为形状为<code>(250, 390, 3)</code>的3D张量中</li><li>推文数据集，将每条推文编码为280个字符组成的序列，每个字符又来自128个字符组成的字母表。每个字符编码为128的二进制向量，每条推文编码为形状为<code>(280, 128)</code>的2D张量，而包含100万条推文的数据集可以编码为形状为<code>(100000, 280, 128)</code> 的张量</li></ul></li><li>图像：4D张量，形状为(samples,height,width,channels)或(samples,channels,height,width)<ul><li>图像通常具有三个维度：高度、宽度和颜色深度。灰度图像（如MNIST数字图像）只有一个颜色通道，因此可以保存在2D张量中。按照惯例，图像张量始终是3D张量。如果图像大小为256x256，那么128张灰度图像组成的批量可以保存在形状为<code>(128, 256, 256, 1)</code>的张量中</li></ul></li><li>视频：5D张量，形状为(samples,frames,height,width,channels)或(samples,frames,channels,height,width)<ul><li>视频可以看作是一系列帧，每一帧都是一张彩色图像。由于每一帧保存在形状为(height, width, color_depth)的3D张量中，因此一系列帧保存在(frames, ,height,width,color_depth)的4D张量中。例如一个以每秒4帧采样的60秒视频片段，视频尺寸为144x256，这个视频共有240帧，形状为<code>(4, 240, 144, 256, 3)</code></li></ul></li></ul><h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><p>较小的张量会被广播，以匹配较大张量的形状，包含以下两步：</p><ul><li>向较小的张量添加轴，使其ndim与较大的张量相同</li><li>将较小的张量沿着新轴重复，使其形状与较大的张量相同</li></ul><p>例如，X.shape=(32, 10)，Y.shape=(10, )，首先将Y变为Y.shape=(1, 10)，再将其沿着新轴重复32次得到Y.shape=(32, 10)</p><h4 id="张量变形"><a href="#张量变形" class="headerlink" title="张量变形"></a>张量变形</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = np.array(([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line">x  <span class="comment">#array([[0, 1],[2, 3],[4, 5]])</span></span><br><span class="line">x.shape  <span class="comment">#(3, 2)</span></span><br><span class="line">x = x.reshape((<span class="number">6</span>, <span class="number">1</span>))</span><br><span class="line">x  <span class="comment">#array([[0],[1],[2],[3],[4],[5]])</span></span><br><span class="line">x.shape  <span class="comment"># (6, 1)</span></span><br><span class="line">x = x.reshape((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">x  <span class="comment">#array([[0, 1, 2],[3, 4, 5]])</span></span><br><span class="line">x.shape  <span class="comment">#(2,3)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="神经网络剖析"><a href="#神经网络剖析" class="headerlink" title="神经网络剖析"></a>神经网络剖析</h3><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/1596804041440.png" alt="Python深度学习/网络、层、损失函数和优化器之间的关系"></p><h4 id="层：深度学习的基础组件"><a href="#层：深度学习的基础组件" class="headerlink" title="层：深度学习的基础组件"></a>层：深度学习的基础组件</h4><ul><li>2D张量通常用密集连接层（也叫全连接层、密集层），对应Keras的Dense类来处理</li><li>3D张量通常用循环层，对应Keras的LSTM类来处理</li><li>4D张量通常用二维卷积层，对应Keras的Conv2D来处理</li></ul><h4 id="模型：层构成的网络"><a href="#模型：层构成的网络" class="headerlink" title="模型：层构成的网络"></a>模型：层构成的网络</h4><p>深度学习模型是层构成的有向无环图。最常见的就是层的线性堆叠，将单一输入映射为单一输出。常见的网络拓扑结构还有双分支网络、多头网络、Inception模块</p><h4 id="损失函数与优化器：配置学习过程的关键"><a href="#损失函数与优化器：配置学习过程的关键" class="headerlink" title="损失函数与优化器：配置学习过程的关键"></a>损失函数与优化器：配置学习过程的关键</h4><ul><li>损失函数（目标函数）——在训练过程中需要将其最小化，衡量当前任务是否已经成功完成</li><li>优化器——决定如何基于损失函数对网络进行更新，执行的是随机梯度下降（SGD）的某个变体</li></ul><h2 id="深度学习实践"><a href="#深度学习实践" class="headerlink" title="深度学习实践"></a>深度学习实践</h2><h2 id="深度学习用于计算机视觉"><a href="#深度学习用于计算机视觉" class="headerlink" title="深度学习用于计算机视觉"></a>深度学习用于计算机视觉</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Keras </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras</title>
      <link href="2020/08/03/keras/"/>
      <url>2020/08/03/keras/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“我要忘了你的样子，像鱼忘了海的味道——像鱼”</p></blockquote><h2 id="1-Keras-Sequentical顺序模型"><a href="#1-Keras-Sequentical顺序模型" class="headerlink" title="1. Keras Sequentical顺序模型"></a>1. Keras Sequentical顺序模型</h2><p>顺序模型是多个网络层的线性堆叠，可以通过将网络层实例的列表传递给<code>Sequential</code>的构造器，创建一个<code>Sequential</code>模型：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense,Activation</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">    Dense(<span class="number">32</span>, input_shape=(<span class="number">784</span>,)),</span><br><span class="line">    Activition(<span class="string">'relu'</span>),</span><br><span class="line">    Dense(<span class="number">10</span>),</span><br><span class="line">    Activition(<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></tbody></table></figure><p>或者使用<code>.add()</code>方法将各层添加到模型中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">32</span>, input_dim=<span class="number">784</span>))</span><br><span class="line">model.add(Activition(<span class="string">'relu'</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="指定输入数据的尺寸"><a href="#指定输入数据的尺寸" class="headerlink" title="指定输入数据的尺寸"></a>指定输入数据的尺寸</h3><p>模型需要知道它所期望的输入尺寸，所以顺序模型的第一层需要接收关于输入尺寸的信息，其余层可以自动推断尺寸。方法如下：</p><ul><li>传递一个<code>input_shape</code>参数，它是一个表示尺寸的元组 (一个由整数或 <code>None</code> 组成的元组，其中 <code>None</code> 表示可能为任何正整数)。在 <code>input_shape</code> 中不包含数据的 batch 大小。</li><li>某些2D层，如<code>Dense</code>，支持通过参数<code>input_dim</code>指定输入尺寸；某些3D时序层支持<code>input_dim</code>和<code>input_length</code>参数。</li><li>如果你需要为你的输入指定一个固定的 batch 大小（这对 stateful RNNs 很有用），你可以传递一个 <code>batch_size</code> 参数给一个层。如果你同时将 <code>batch_size=32</code> 和 <code>input_shape=(6, 8)</code> 传递给一个层，那么每一批输入的尺寸就为 <code>(32，6，8)</code>。</li></ul><p>以下代码是等价的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">32</span>, input_shape=(<span class="number">784</span>,)))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">32</span>, input_dim=<span class="number">784</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="模型编译"><a href="#模型编译" class="headerlink" title="模型编译"></a>模型编译</h3><p>在训练模型之前，需要配置学习过程，通过<code>compile</code>方法完成。它接收三个参数：</p><ul><li>优化器optimizer。</li><li>损失函数loss，模型试图最小化的目标函数。</li><li>评估标准metrics。</li></ul><p>一些例子：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多分类问题</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,loss=<span class="string">'categorical_crossentropy'</span>,metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二分类问题</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,loss=<span class="string">'binary_crossentropy'</span>,metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均方误差回归问题</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义评估标准函数</span></span><br><span class="line"><span class="keyword">import</span> keras.backend <span class="keyword">as</span> K</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean_pred</span>(<span class="params">y_true, y_pred</span>):</span></span><br><span class="line">    <span class="keyword">return</span> K.mean(y_pred)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>, mean_pred])</span><br></pre></td></tr></tbody></table></figure><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>Keras模型在输入数据和标签的Numpy矩阵上进行训练，使用<code>fit</code>函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于二分类</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>,input_dim=<span class="number">100</span>))</span><br><span class="line">mdoel.add(Dense(<span class="number">1</span>,activation=<span class="string">'sigmoid'</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,loss=<span class="string">'binary_crossentropy'</span>,metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成虚拟数据</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.random.random((<span class="number">1000</span>, <span class="number">100</span>))</span><br><span class="line">labels = np.random.randint(<span class="number">2</span>, size=(<span class="number">1000</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型，以 32 个样本为一个 batch 进行迭代</span></span><br><span class="line">model.fit(data, labels, epochs=<span class="number">10</span>, batch_size=<span class="number">32</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于多分类</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>,input_dim=<span class="number">100</span>))</span><br><span class="line">mdoel.add(Dense(<span class="number">10</span>,activation=<span class="string">'softmax'</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,loss=<span class="string">'categorical_crossentropy'</span>,metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成虚拟数据</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.random.random((<span class="number">1000</span>, <span class="number">100</span>))</span><br><span class="line">labels = np.random.randint(<span class="number">10</span>, size=(<span class="number">1000</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将标签转换为分类的 one-hot 编码</span></span><br><span class="line">one_hot_labels = keras.utils.to_categorical(labels, num_classes=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型，以 32 个样本为一个 batch 进行迭代</span></span><br><span class="line">model.fit(data, one_hot_labels, epochs=<span class="number">10</span>, batch_size=<span class="number">32</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="基于多层感知器（MLP）的softmax多分类："><a href="#基于多层感知器（MLP）的softmax多分类：" class="headerlink" title="基于多层感知器（MLP）的softmax多分类："></a>基于多层感知器（MLP）的softmax多分类：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense,Activation,Dropout</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成虚拟数据</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x_train = np.random.random((<span class="number">1000</span>, <span class="number">20</span>))</span><br><span class="line">y_train = keras.utils.to_categorical(np.random.randint(<span class="number">10</span>, size=(<span class="number">1000</span>, <span class="number">1</span>)), num_classes=<span class="number">10</span>)</span><br><span class="line">x_test = np.random.random((<span class="number">100</span>, <span class="number">20</span>))</span><br><span class="line">y_test = keras.utils.to_categorical(np.random.randint(<span class="number">10</span>, size=(<span class="number">100</span>, <span class="number">1</span>)), num_classes=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment"># Dense(64) 是一个具有 64 个隐藏神经元的全连接层。</span></span><br><span class="line"><span class="comment"># 在第一层必须指定所期望的输入数据尺寸,在这里，是一个 20 维的向量。</span></span><br><span class="line">model.add(Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>, input_dim=<span class="number">20</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line">sgd = SGD(lr=<span class="number">0.01</span>, decay=<span class="number">1e-6</span>, momentum=<span class="number">0.9</span>, nesterov=<span class="literal">True</span>)</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">'categorical_crossentropy'</span>,</span><br><span class="line">              optimizer=sgd,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train,</span><br><span class="line">          epochs=<span class="number">20</span>,</span><br><span class="line">          batch_size=<span class="number">128</span>)</span><br><span class="line">score = model.evaluate(x_test, y_test, batch_size=<span class="number">128</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="基于多层感知器的二分类："><a href="#基于多层感知器的二分类：" class="headerlink" title="基于多层感知器的二分类："></a>基于多层感知器的二分类：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成虚拟数据</span></span><br><span class="line">x_train = np.random.random((<span class="number">1000</span>, <span class="number">20</span>))</span><br><span class="line">y_train = np.random.randint(<span class="number">2</span>, size=(<span class="number">1000</span>, <span class="number">1</span>))</span><br><span class="line">x_test = np.random.random((<span class="number">100</span>, <span class="number">20</span>))</span><br><span class="line">y_test = np.random.randint(<span class="number">2</span>, size=(<span class="number">100</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">64</span>, input_dim=<span class="number">20</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train,</span><br><span class="line">          epochs=<span class="number">20</span>,</span><br><span class="line">          batch_size=<span class="number">128</span>)</span><br><span class="line">score = model.evaluate(x_test, y_test, batch_size=<span class="number">128</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="类似-VGG-的卷积神经网络："><a href="#类似-VGG-的卷积神经网络：" class="headerlink" title="类似 VGG 的卷积神经网络："></a>类似 VGG 的卷积神经网络：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成虚拟数据</span></span><br><span class="line">x_train = np.random.random((<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">3</span>))</span><br><span class="line">y_train = keras.utils.to_categorical(np.random.randint(<span class="number">10</span>, size=(<span class="number">100</span>, <span class="number">1</span>)), num_classes=<span class="number">10</span>)</span><br><span class="line">x_test = np.random.random((<span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">3</span>))</span><br><span class="line">y_test = keras.utils.to_categorical(np.random.randint(<span class="number">10</span>, size=(<span class="number">20</span>, <span class="number">1</span>)), num_classes=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment"># 输入: 3 通道 100x100 像素图像 -&gt; (100, 100, 3) 张量。</span></span><br><span class="line"><span class="comment"># 使用 32 个大小为 3x3 的卷积滤波器。</span></span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, input_shape=(<span class="number">100</span>, <span class="number">100</span>, <span class="number">3</span>)))</span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line"></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line"></span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dense(<span class="number">256</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line">sgd = SGD(lr=<span class="number">0.01</span>, decay=<span class="number">1e-6</span>, momentum=<span class="number">0.9</span>, nesterov=<span class="literal">True</span>)</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=sgd)</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">10</span>)</span><br><span class="line">score = model.evaluate(x_test, y_test, batch_size=<span class="number">32</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="2-Keras-函数式API"><a href="#2-Keras-函数式API" class="headerlink" title="2.     Keras 函数式API"></a>2.     Keras 函数式API</h2><h3 id="例一：全连接网络"><a href="#例一：全连接网络" class="headerlink" title="例一：全连接网络"></a>例一：全连接网络</h3><ul><li>网络层的实例是可调用的，它以张量为参数，并且返回一个张量</li><li>输入和输出均为张量，它们都可以用来定义一个模型（<code>Model</code>）</li><li>这样的模型同 <code>Keras</code> 的 <code>Sequential</code> 模型一样，都可以被训练</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Dense</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分返回一个张量</span></span><br><span class="line">inputs = Input(shape=(<span class="number">784</span>,))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 层的实例是可调用的，以张量为参数，并且返回一个张量</span></span><br><span class="line">x = Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>)(inputs)</span><br><span class="line">x = Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>)(x)</span><br><span class="line">predictions = Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分创建一个包含输入层和三个全连接层的模型</span></span><br><span class="line">model = Model(inputs=inputs, outputs=predictions)</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,loss=<span class="string">'categorical_crossentropy'</span>,metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(data, labels) <span class="comment"># 开始训练</span></span><br></pre></td></tr></tbody></table></figure><h3 id="所有的模型都可调用，就像网络层一样"><a href="#所有的模型都可调用，就像网络层一样" class="headerlink" title="所有的模型都可调用，就像网络层一样"></a>所有的模型都可调用，就像网络层一样</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> TimeDistributed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入张量是20个时间步的序列</span></span><br><span class="line"><span class="comment"># 每一个时间为一个784维的向量</span></span><br><span class="line">input_sequences = Input(shape=(<span class="number">20</span>,<span class="number">784</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分将我们之前定义的模型应用于输入序列中的每个时间步。</span></span><br><span class="line"><span class="comment"># 之前定义的模型的输出是一个 10-way softmax，</span></span><br><span class="line"><span class="comment"># 因而下面的层的输出将是维度为 10 的 20 个向量的序列。</span></span><br><span class="line">processed_sequences = TimeDistributed(model)(input_sequences)</span><br></pre></td></tr></tbody></table></figure><h3 id="多输入多输出模型"><a href="#多输入多输出模型" class="headerlink" title="多输入多输出模型"></a>多输入多输出模型</h3><p>我们试图预测 Twitter 上的一条新闻标题有多少转发和点赞数。模型的主要输入将是新闻标题本身，即一系列词语，但是为了增添趣味，我们的模型还添加了其他的辅助输入来接收额外的数据，例如新闻标题的发布的时间等。 该模型也将通过两个损失函数进行监督学习。较早地在模型中使用主损失函数，是深度学习模型的一个良好正则方法。</p><p>模型结构如下图所示：</p><p><img src="../../../Wanfengyueluo.github.io/source/_posts/Keras/1596629447012.png" alt="1596629447012"></p><p>主要输入接收新闻标题本身，即一个整数序列（每个整数编码一个词）。 这些整数在 1 到 10,000 之间（10,000 个词的词汇表），且序列长度为 100 个词。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Embedding, LSTM, Dense</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标题输入：接收一个含有 100 个整数的序列，每个整数在 1 到 10000 之间。</span></span><br><span class="line"><span class="comment"># 注意我们可以通过传递一个 "name" 参数来命名任何层。</span></span><br><span class="line">main_input = Input(shape=(<span class="number">100</span>,), dtype=<span class="string">'int32'</span>, name=<span class="string">'main_input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Embedding 层将输入序列编码为一个稠密向量的序列，</span></span><br><span class="line"><span class="comment"># 每个向量维度为 512。</span></span><br><span class="line">x = Embedding(output_dim=<span class="number">512</span>, input_dim=<span class="number">10000</span>, input_length=<span class="number">100</span>)(main_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LSTM 层把向量序列转换成单个向量，</span></span><br><span class="line"><span class="comment"># 它包含整个序列的上下文信息</span></span><br><span class="line">lstm_out = LSTM(<span class="number">32</span>)(x)</span><br></pre></td></tr></tbody></table></figure><p>在这里，我们插入辅助损失，使得即使在模型主损失很高的情况下，LSTM 层和 Embedding 层都能被平稳地训练。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auxiliary_output = Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>, name=<span class="string">'aux_output'</span>)(lstm_out)</span><br></pre></td></tr></tbody></table></figure><p>此时，我们将辅助输入数据与 LSTM 层的输出连接起来，输入到模型中：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">auxiliary_input = Input(shape=(<span class="number">5</span>,), name=<span class="string">'aux_input'</span>)</span><br><span class="line">x = keras.layers.concatenate([lstm_out, auxiliary_input])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆叠多个全连接网络层</span></span><br><span class="line">x = Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>)(x)</span><br><span class="line">x = Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>)(x)</span><br><span class="line">x = Dense(<span class="number">64</span>, activation=<span class="string">'relu'</span>)(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后添加主要的逻辑回归层</span></span><br><span class="line">main_output = Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>, name=<span class="string">'main_output'</span>)(x)</span><br></pre></td></tr></tbody></table></figure><p>然后定义一个具有两个输入和两个输出的模型：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Model(inputs=[main_input, auxiliary_input], outputs=[main_output, auxiliary_output])</span><br></pre></td></tr></tbody></table></figure><p>现在编译模型，并给辅助损失分配一个 0.2 的权重。如果要为不同的输出指定不同的 <code>loss_weights</code> 或 <code>loss</code>，可以使用列表或字典。 在这里，我们给 <code>loss</code> 参数传递单个损失函数，这个损失将用于所有的输出。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>, loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              loss_weights=[<span class="number">1.</span>, <span class="number">0.2</span>])</span><br></pre></td></tr></tbody></table></figure><p>我们可以通过传递输入数组和目标数组的列表来训练模型：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.fit([headline_data, additional_data], [labels, labels],</span><br><span class="line">          epochs=<span class="number">50</span>, batch_size=<span class="number">32</span>)</span><br></pre></td></tr></tbody></table></figure><p>由于输入和输出均被命名了（在定义时传递了一个 <code>name</code> 参数），我们也可以通过以下方式编译模型：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              loss={<span class="string">'main_output'</span>: <span class="string">'binary_crossentropy'</span>, <span class="string">'aux_output'</span>: <span class="string">'binary_crossentropy'</span>},</span><br><span class="line">              loss_weights={<span class="string">'main_output'</span>: <span class="number">1.</span>, <span class="string">'aux_output'</span>: <span class="number">0.2</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后使用以下方式训练：</span></span><br><span class="line">model.fit({<span class="string">'main_input'</span>: headline_data, <span class="string">'aux_input'</span>: additional_data},</span><br><span class="line">          {<span class="string">'main_output'</span>: labels, <span class="string">'aux_output'</span>: labels},</span><br><span class="line">          epochs=<span class="number">50</span>, batch_size=<span class="number">32</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="共享网络层"><a href="#共享网络层" class="headerlink" title="共享网络层"></a>共享网络层</h3><p>函数式 API 的另一个用途是使用共享网络层的模型。我们来看看共享层。</p><p>来考虑推特推文数据集。我们想要建立一个模型来分辨两条推文是否来自同一个人（例如，通过推文的相似性来对用户进行比较）。</p><p>实现这个目标的一种方法是建立一个模型，将两条推文编码成两个向量，连接向量，然后添加逻辑回归层；这将输出两条推文来自同一作者的概率。模型将接收一对对正负表示的推特数据。</p><p>由于这个问题是对称的，编码第一条推文的机制应该被完全重用来编码第二条推文（权重及其他全部）。这里我们使用一个共享的 LSTM 层来编码推文。</p><p>让我们使用函数式 API 来构建它。首先我们将一条推特转换为一个尺寸为 <code>(280, 256)</code> 的矩阵，即每条推特 280 字符，每个字符为 256 维的 one-hot 编码向量 （取 256 个常用字符）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, LSTM, Dense</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line">tweet_a = Input(shape=(<span class="number">280</span>, <span class="number">256</span>))</span><br><span class="line">tweet_b = Input(shape=(<span class="number">280</span>, <span class="number">256</span>))</span><br></pre></td></tr></tbody></table></figure><p>要在不同的输入上共享同一个层，只需实例化该层一次，然后根据需要传入你想要的输入即可：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一层可以输入一个矩阵，并返回一个 64 维的向量</span></span><br><span class="line">shared_lstm = LSTM(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们重用相同的图层实例多次，图层的权重也会被重用 (它其实就是同一层)</span></span><br><span class="line">encoded_a = shared_lstm(tweet_a)</span><br><span class="line">encoded_b = shared_lstm(tweet_b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后再连接两个向量：</span></span><br><span class="line">merged_vector = keras.layers.concatenate([encoded_a, encoded_b], axis=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再在上面添加一个逻辑回归层</span></span><br><span class="line">predictions = Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)(merged_vector)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个连接推特输入和预测的可训练的模型</span></span><br><span class="line">model = Model(inputs=[tweet_a, tweet_b], outputs=predictions)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit([data_a, data_b], labels, epochs=<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><p>让我们暂停一会，看看如何读取共享层的输出或输出尺寸。</p><h3 id="层「节点」的概念"><a href="#层「节点」的概念" class="headerlink" title="层「节点」的概念"></a>层「节点」的概念</h3><p>每当你在某个输入上调用一个层时，都将创建一个新的张量（层的输出），并且为该层添加一个「节点」，将输入张量连接到输出张量。当多次调用同一个图层时，该图层将拥有多个节点索引 (0, 1, 2…)。</p><p>在之前版本的 Keras 中，可以通过 <code>layer.get_output()</code> 来获得层实例的输出张量，或者通过 <code>layer.output_shape</code> 来获取其输出形状。现在你依然可以这么做（除了 <code>get_output()</code> 已经被 <code>output</code> 属性替代）。但是如果一个层与多个输入连接呢？</p><p>只要一个层仅仅连接到一个输入，就不会有困惑，<code>.output</code> 会返回层的唯一输出：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = Input(shape=(<span class="number">280</span>, <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">lstm = LSTM(<span class="number">32</span>)</span><br><span class="line">encoded_a = lstm(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> lstm.output == encoded_a</span><br></pre></td></tr></tbody></table></figure><p>但是如果该层有多个输入，那就会出现问题：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = Input(shape=(<span class="number">280</span>, <span class="number">256</span>))</span><br><span class="line">b = Input(shape=(<span class="number">280</span>, <span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">lstm = LSTM(<span class="number">32</span>)</span><br><span class="line">encoded_a = lstm(a)</span><br><span class="line">encoded_b = lstm(b)</span><br><span class="line"></span><br><span class="line">lstm.output</span><br><span class="line">&gt;&gt; AttributeError: Layer lstm_1 has multiple inbound nodes,</span><br><span class="line">hence the notion of <span class="string">"layer output"</span> <span class="keyword">is</span> ill-defined.</span><br><span class="line">Use `get_output_at(node_index)` instead.</span><br></pre></td></tr></tbody></table></figure><p>好吧，通过下面的方法可以解决：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> lstm.get_output_at(<span class="number">0</span>) == encoded_a</span><br><span class="line"><span class="keyword">assert</span> lstm.get_output_at(<span class="number">1</span>) == encoded_b</span><br></pre></td></tr></tbody></table></figure><p>够简单，对吧？</p><p><code>input_shape</code> 和 <code>output_shape</code> 这两个属性也是如此：只要该层只有一个节点，或者只要所有节点具有相同的输入/输出尺寸，那么「层输出/输入尺寸」的概念就被很好地定义，并且将由 <code>layer.output_shape</code> / <code>layer.input_shape</code> 返回。但是比如说，如果将一个 <code>Conv2D</code> 层先应用于尺寸为 <code>(32，32，3)</code> 的输入，再应用于尺寸为 <code>(64, 64, 3)</code> 的输入，那么这个层就会有多个输入/输出尺寸，你将不得不通过指定它们所属节点的索引来获取它们：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = Input(shape=(<span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>))</span><br><span class="line">b = Input(shape=(<span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">conv = Conv2D(<span class="number">16</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>)</span><br><span class="line">conved_a = conv(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到目前为止只有一个输入，以下可行：</span></span><br><span class="line"><span class="keyword">assert</span> conv.input_shape == (<span class="literal">None</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">conved_b = conv(b)</span><br><span class="line"><span class="comment"># 现在 `.input_shape` 属性不可行，但是这样可以：</span></span><br><span class="line"><span class="keyword">assert</span> conv.get_input_shape_at(<span class="number">0</span>) == (<span class="literal">None</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">assert</span> conv.get_input_shape_at(<span class="number">1</span>) == (<span class="literal">None</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="Inception-模型"><a href="#Inception-模型" class="headerlink" title="Inception 模型"></a>Inception 模型</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D, Input</span><br><span class="line"></span><br><span class="line">input_img = Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">tower_1 = Conv2D(<span class="number">64</span>, (<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>)(input_img)</span><br><span class="line">tower_1 = Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>)(tower_1)</span><br><span class="line"></span><br><span class="line">tower_2 = Conv2D(<span class="number">64</span>, (<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>)(input_img)</span><br><span class="line">tower_2 = Conv2D(<span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>)(tower_2)</span><br><span class="line"></span><br><span class="line">tower_3 = MaxPooling2D((<span class="number">3</span>, <span class="number">3</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">'same'</span>)(input_img)</span><br><span class="line">tower_3 = Conv2D(<span class="number">64</span>, (<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">'same'</span>, activation=<span class="string">'relu'</span>)(tower_3)</span><br><span class="line"></span><br><span class="line">output = keras.layers.concatenate([tower_1, tower_2, tower_3], axis=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="卷积层上的残差连接"><a href="#卷积层上的残差连接" class="headerlink" title="卷积层上的残差连接"></a>卷积层上的残差连接</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, Input</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入张量为 3 通道 256x256 图像</span></span><br><span class="line">x = Input(shape=(<span class="number">256</span>, <span class="number">256</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 3 输出通道（与输入通道相同）的 3x3 卷积核</span></span><br><span class="line">y = Conv2D(<span class="number">3</span>, (<span class="number">3</span>, <span class="number">3</span>), padding=<span class="string">'same'</span>)(x)</span><br><span class="line"><span class="comment"># 返回 x + y</span></span><br><span class="line">z = keras.layers.add([x, y])</span><br></pre></td></tr></tbody></table></figure><h3 id="共享视觉模型"><a href="#共享视觉模型" class="headerlink" title="共享视觉模型"></a>共享视觉模型</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D, Input, Dense, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，定义视觉模型</span></span><br><span class="line">digit_input = Input(shape=(<span class="number">27</span>, <span class="number">27</span>, <span class="number">1</span>))</span><br><span class="line">x = Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>))(digit_input)</span><br><span class="line">x = Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>))(x)</span><br><span class="line">x = MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>))(x)</span><br><span class="line">out = Flatten()(x)</span><br><span class="line"></span><br><span class="line">vision_model = Model(digit_input, out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，定义区分数字的模型</span></span><br><span class="line">digit_a = Input(shape=(<span class="number">27</span>, <span class="number">27</span>, <span class="number">1</span>))</span><br><span class="line">digit_b = Input(shape=(<span class="number">27</span>, <span class="number">27</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视觉模型将被共享，包括权重和其他所有</span></span><br><span class="line">out_a = vision_model(digit_a)</span><br><span class="line">out_b = vision_model(digit_b)</span><br><span class="line"></span><br><span class="line">concatenated = keras.layers.concatenate([out_a, out_b])</span><br><span class="line">out = Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>)(concatenated)</span><br><span class="line"></span><br><span class="line">classification_model = Model([digit_a, digit_b], out)</span><br></pre></td></tr></tbody></table></figure><h3 id="视觉问答模型"><a href="#视觉问答模型" class="headerlink" title="视觉问答模型"></a>视觉问答模型</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, LSTM, Embedding, Dense</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model, Sequential</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，让我们用 Sequential 来定义一个视觉模型。</span></span><br><span class="line"><span class="comment"># 这个模型会把一张图像编码为向量。</span></span><br><span class="line">vision_model = Sequential()</span><br><span class="line">vision_model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, padding=<span class="string">'same'</span>, input_shape=(<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>)))</span><br><span class="line">vision_model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">vision_model.add(MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">vision_model.add(Conv2D(<span class="number">128</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">vision_model.add(Conv2D(<span class="number">128</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">vision_model.add(MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">vision_model.add(Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">vision_model.add(Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">vision_model.add(Conv2D(<span class="number">256</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">'relu'</span>))</span><br><span class="line">vision_model.add(MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">vision_model.add(Flatten())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在让我们用视觉模型来得到一个输出张量：</span></span><br><span class="line">image_input = Input(shape=(<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>))</span><br><span class="line">encoded_image = vision_model(image_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，定义一个语言模型来将问题编码成一个向量。</span></span><br><span class="line"><span class="comment"># 每个问题最长 100 个词，词的索引从 1 到 9999.</span></span><br><span class="line">question_input = Input(shape=(<span class="number">100</span>,), dtype=<span class="string">'int32'</span>)</span><br><span class="line">embedded_question = Embedding(input_dim=<span class="number">10000</span>, output_dim=<span class="number">256</span>, input_length=<span class="number">100</span>)(question_input)</span><br><span class="line">encoded_question = LSTM(<span class="number">256</span>)(embedded_question)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接问题向量和图像向量：</span></span><br><span class="line">merged = keras.layers.concatenate([encoded_question, encoded_image])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后在上面训练一个 1000 词的逻辑回归模型：</span></span><br><span class="line">output = Dense(<span class="number">1000</span>, activation=<span class="string">'softmax'</span>)(merged)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终模型：</span></span><br><span class="line">vqa_model = Model(inputs=[image_input, question_input], outputs=output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下一步就是在真实数据上训练模型。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="视频问答模型"><a href="#视频问答模型" class="headerlink" title="视频问答模型"></a>视频问答模型</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> TimeDistributed</span><br><span class="line"></span><br><span class="line">video_input = Input(shape=(<span class="number">100</span>, <span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 这是基于之前定义的视觉模型（权重被重用）构建的视频编码</span></span><br><span class="line">encoded_frame_sequence = TimeDistributed(vision_model)(video_input)  <span class="comment"># 输出为向量的序列</span></span><br><span class="line">encoded_video = LSTM(<span class="number">256</span>)(encoded_frame_sequence)  <span class="comment"># 输出为一个向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是问题编码器的模型级表示，重复使用与之前相同的权重：</span></span><br><span class="line">question_encoder = Model(inputs=question_input, outputs=encoded_question)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让我们用它来编码这个问题：</span></span><br><span class="line">video_question_input = Input(shape=(<span class="number">100</span>,), dtype=<span class="string">'int32'</span>)</span><br><span class="line">encoded_video_question = question_encoder(video_question_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这就是我们的视频问答模式：</span></span><br><span class="line">merged = keras.layers.concatenate([encoded_video, encoded_video_question])</span><br><span class="line">output = Dense(<span class="number">1000</span>, activation=<span class="string">'softmax'</span>)(merged)</span><br><span class="line">video_qa_model = Model(inputs=[video_input, video_question_input], outputs=output)</span><br></pre></td></tr></tbody></table></figure><h2 id="3-Sequential模型API"><a href="#3-Sequential模型API" class="headerlink" title="3. Sequential模型API"></a>3. Sequential模型API</h2><h3 id="Sequential模型方法"><a href="#Sequential模型方法" class="headerlink" title="Sequential模型方法"></a>Sequential模型方法</h3><h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h4><p>用于配置训练模型</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">compile</span>(optimizer,loss=<span class="literal">None</span>,metrics=<span class="literal">None</span>,loss_weights=<span class="literal">None</span>,sample_weight=<span class="literal">None</span>,weighted_metrics=<span class="literal">None</span>,traget_tensors=<span class="literal">None</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><strong>optimizer</strong>: 字符串（优化器名）或者优化器对象。</li><li><strong>loss</strong>: 字符串（目标函数名）或目标函数。</li><li><strong>metrics</strong>: 在训练和测试期间的模型评估标准。</li><li><strong>loss_weights</strong>: 指定标量系数（Python浮点数）的可选列表或字典，用于加权不同模型输出的损失贡献。</li><li><strong>sample_weight_mode</strong>: 如果你需要执行按时间步采样权重（2D 权重），请将其设置为 <code>temporal</code>。</li><li><strong>weighted_metrics</strong>: 在训练和测试期间，由 sample_weight 或 class_weight 评估和加权的度量标准列表。</li><li><strong>target_tensors</strong>: 默认情况下，Keras 将为模型的目标创建一个占位符，在训练过程中将使用目标数据。</li></ul><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><ul><li><strong>ValueError</strong>: 如果 <code>optimizer</code>, <code>loss</code>, <code>metrics</code> 或 <code>sample_weight_mode</code> 这些参数不合法。</li></ul><h4 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h4><p>以固定数量的轮次训练模型</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fit(x=<span class="literal">None</span>, y=<span class="literal">None</span>, batch_size=<span class="literal">None</span>, epochs=<span class="number">1</span>, verbose=<span class="number">1</span>, callbacks=<span class="literal">None</span>, validation_split=<span class="number">0.0</span>, validation_data=<span class="literal">None</span>, shuffle=<span class="literal">True</span>, class_weight=<span class="literal">None</span>, sample_weight=<span class="literal">None</span>, initial_epoch=<span class="number">0</span>, steps_per_epoch=<span class="literal">None</span>, validation_steps=<span class="literal">None</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><ul><li><strong>x</strong>: 训练数据的 Numpy 数组。 如果模型中的输入层被命名，你也可以传递一个字典，将输入层名称映射到 Numpy 数组。 如果从本地框架张量馈送（例如 TensorFlow 数据张量）数据，x 可以是 <code>None</code>（默认）。</li><li><strong>y</strong>: 目标（标签）数据的 Numpy 数组。 如果模型中的输出层被命名，你也可以传递一个字典，将输出层名称映射到 Numpy 数组。 如果从本地框架张量馈送（例如 TensorFlow 数据张量）数据，y 可以是 <code>None</code>（默认）。</li><li><strong>batch_size</strong>: 整数或 <code>None</code>。每次提度更新的样本数。如果未指定，默认为 32.</li><li><strong>epochs</strong>: 整数。训练模型迭代轮次。一个轮次是在整个 <code>x</code> 或 <code>y</code> 上的一轮迭代。请注意，与 <code>initial_epoch</code> 一起，<code>epochs</code> 被理解为 「最终轮次」。模型并不是训练了 <code>epochs</code> 轮，而是到第 <code>epochs</code> 轮停止训练。</li><li><strong>verbose</strong>: 0, 1 或 2。日志显示模式。 0 = 安静模式, 1 = 进度条, 2 = 每轮一行。</li><li><strong>callbacks</strong>: 一系列的 <code>keras.callbacks.Callback</code> 实例。一系列可以在训练时使用的回调函数。</li><li><strong>validation_split</strong>: 在 0 和 1 之间浮动。用作验证集的训练数据的比例。模型将分出一部分不会被训练的验证数据，并将在每一轮结束时评估这些验证数据的误差和任何其他模型指标。验证数据是混洗之前 <code>x</code> 和<code>y</code> 数据的最后一部分样本中。</li><li><strong>validation_data</strong>: 元组 <code>(x_val，y_val)</code> 或元组 <code>(x_val，y_val，val_sample_weights)</code>，用来评估损失，以及在每轮结束时的任何模型度量指标。模型将不会在这个数据上进行训练。这个参数会覆盖 <code>validation_split</code>。</li><li><strong>shuffle</strong>: 布尔值（是否在每轮迭代之前混洗数据）或者 字符串 (<code>batch</code>)。<code>batch</code> 是处理 HDF5 数据限制的特殊选项，它对一个 batch 内部的数据进行混洗。当 <code>steps_per_epoch</code> 非 <code>None</code> 时，这个参数无效。</li><li><strong>class_weight</strong>: 可选的字典，用来映射类索引（整数）到权重（浮点）值，用于加权损失函数（仅在训练期间）。这可能有助于告诉模型 「更多关注」来自代表性不足的类的样本。</li><li><strong>sample_weight</strong>: 训练样本的可选 Numpy 权重数组，用于对损失函数进行加权（仅在训练期间）。您可以传递与输入样本长度相同的平坦（1D）Numpy 数组（权重和样本之间的 1：1 映射），或者在时序数据的情况下，可以传递尺寸为 <code>(samples, sequence_length)</code> 的 2D 数组，以对每个样本的每个时间步施加不同的权重。在这种情况下，你应该确保在 <code>compile()</code> 中指定 <code>sample_weight_mode="temporal"</code>。</li><li><strong>initial_epoch</strong>: 开始训练的轮次（有助于恢复之前的训练）。</li><li><strong>steps_per_epoch</strong>: 在声明一个轮次完成并开始下一个轮次之前的总步数（样品批次）。使用 TensorFlow 数据张量等输入张量进行训练时，默认值 <code>None</code> 等于数据集中样本的数量除以 batch 的大小，如果无法确定，则为 1。</li><li><strong>validation_steps</strong>: 只有在指定了 <code>steps_per_epoch</code>时才有用。停止前要验证的总步数（批次样本）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-8</title>
      <link href="2020/08/01/2020-8/"/>
      <url>2020/08/01/2020-8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“愿你逐梦成真，不负年少所想”</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/2020.8.jpg" alt="你好，八月~"></p><span id="more"></span><h1 id="2020-8"><a href="#2020-8" class="headerlink" title="2020.8"></a>2020.8</h1><h2 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h2><h3 id="632-最小区间"><a href="#632-最小区间" class="headerlink" title="632.最小区间"></a>632.最小区间</h3><p>官方题解<span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ul><li>问题转化：给定 k个列表，需要找到最小区间，使得每个列表都至少有一个数在该区间中。该问题可以转化为，从 k个列表中各取一个数，使得这 k个数中的最大值与最小值的差最小。</li><li>由于 k个列表都是升序排列的，因此对每个列表维护一个指针，通过指针得到列表中的元素，指针右移之后指向的元素一定大于或等于之前的元素。</li><li>使用最小堆维护 k个指针指向的元素中的最小值，同时维护堆中元素的最大值。初始时，k个指针都指向下标 0，最大元素即为所有列表的下标 0位置的元素中的最大值。每次从堆中取出最小值，根据最大值和最小值计算当前区间，如果当前区间小于最小区间则用当前区间更新最小区间，然后将对应列表的指针右移，将新元素加入堆中，并更新堆中元素的最大值。</li><li>如果一个列表的指针超出该列表的下标范围，则说明该列表中的所有元素都被遍历过，堆中不会再有该列表中的元素，因此退出循环。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] smallestRange(List&lt;List&lt;Integer&gt;&gt; nums) {</span><br><span class="line"><span class="keyword">int</span> rangeLeft = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rangeRight = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">int</span> minRange = rangeRight - rangeLeft;</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">int</span> size = nums.size();</span><br><span class="line"><span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">PriorityQueue&lt;Integer&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> nums.get(o1).get(next[o1]) - nums.get(o2).get(next[o2]);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">priorityQueue.offer(i);</span><br><span class="line">max = Math.max(max, nums.get(i).get(<span class="number">0</span>));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line"><span class="keyword">int</span> minIndex = priorityQueue.poll();</span><br><span class="line"><span class="keyword">int</span> curRange = max - nums.get(minIndex).get(next[minIndex]);</span><br><span class="line"><span class="keyword">if</span> (curRange &lt; minRange) {</span><br><span class="line">minRange = curRange;</span><br><span class="line">rangeLeft = nums.get(minIndex).get(next[minIndex]);</span><br><span class="line">rangeRight = max;</span><br><span class="line">}</span><br><span class="line">next[minIndex]++;</span><br><span class="line"><span class="keyword">if</span> (next[minIndex] == nums.get(minIndex).size()) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">priorityQueue.offer(minIndex);</span><br><span class="line">max = Math.max(max, nums.get(minIndex).get(next[minIndex]));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{rangeLeft, rangeRight};</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记</title>
      <link href="2020/07/13/ji-qi-xue-xi-bi-ji/"/>
      <url>2020/07/13/ji-qi-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习笔记"><a href="#机器学习笔记" class="headerlink" title="机器学习笔记"></a>机器学习笔记</h1><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h3 id="决策树的划分选择"><a href="#决策树的划分选择" class="headerlink" title="决策树的划分选择"></a>决策树的划分选择</h3><h4 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h4><p>”信息熵“（information entropy）是度量样本集合纯度最常用的一种指标</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/信息熵定义.png" alt="信息熵定义"></p><p>”信息增益“（information gain）</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/信息增益.png" alt="信息增益"></p><blockquote><p>ID3算法采用”信息增益“</p></blockquote><p>”增益率“（gain ratio）</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/增益率定义.png" alt="增益率定义"></p><blockquote><p>C4.5算法采用”增益率“</p></blockquote><p>“基尼指数”（Gini index）</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/基尼指数.png" alt="基尼指数"></p><blockquote><p>CART采用基尼指数</p></blockquote><h3 id="决策树的剪枝处理"><a href="#决策树的剪枝处理" class="headerlink" title="决策树的剪枝处理"></a>决策树的剪枝处理</h3><p>剪枝（pruning）是决策树学习算法对付”过拟合“的主要手段。剪枝的基本策略有”预剪枝“（prepruning）和”后剪枝“（post-pruning）</p><ul><li>预剪枝是指在决策树生成过程中，对每个结点在划分前先进行估计，若当前节点的划分不能带来决策树泛化性能的提升，则停止划分并将当前结点标记为叶结点</li><li>后剪枝则是先从训练集生成一颗完整的决策树，然后自底向上地对非叶结点进行考察，若将该结点对应的子树替换为叶结点能带来决策树泛化性能提升，则将该子树替换为叶结点</li></ul><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h3 id="神经元模型"><a href="#神经元模型" class="headerlink" title="神经元模型"></a>神经元模型</h3><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/M-P神经元模型.png" alt="M-P神经元模型"></p><p>常用的神经元激活函数</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/典型的神经元激活函数.png" alt="典型的神经元激活函数"></p><h3 id="感知机与多层网络"><a href="#感知机与多层网络" class="headerlink" title="感知机与多层网络"></a>感知机与多层网络</h3><p>感知机（Perceptron）由两层神经元组成，输入层接受外界输入信号后传递给输出层，输出层是M-P神经元，也称”阈值逻辑单元“（threshold logic unit）</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/两个输入神经元的感知机网络结构.png" alt="两个输入神经元的感知机网络结构"></p><p>感知机可以容易的实现逻辑与、或、非运算</p><h3 id="误差逆传播算法"><a href="#误差逆传播算法" class="headerlink" title="误差逆传播算法"></a>误差逆传播算法</h3><p>多层网络的学习能力比单层感知机强得多，欲训练多层网络，需要更强大的算法，误差逆传播算法（error BackPropagation,简称BP）就是其中最杰出的代表</p><h3 id="全局最小与局部极小"><a href="#全局最小与局部极小" class="headerlink" title="全局最小与局部极小"></a>全局最小与局部极小</h3><h3 id="其他常见神经网络"><a href="#其他常见神经网络" class="headerlink" title="其他常见神经网络"></a>其他常见神经网络</h3><h4 id="RBF网络"><a href="#RBF网络" class="headerlink" title="RBF网络"></a>RBF网络</h4><h4 id="ART网络"><a href="#ART网络" class="headerlink" title="ART网络"></a>ART网络</h4><h4 id="SOM网络"><a href="#SOM网络" class="headerlink" title="SOM网络"></a>SOM网络</h4><h4 id="级联相关网络"><a href="#级联相关网络" class="headerlink" title="级联相关网络"></a>级联相关网络</h4><h4 id="Elman网络"><a href="#Elman网络" class="headerlink" title="Elman网络"></a>Elman网络</h4><h4 id="Boltzmann机"><a href="#Boltzmann机" class="headerlink" title="Boltzmann机"></a>Boltzmann机</h4><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计学习方法</title>
      <link href="2020/06/10/tong-ji-xue-xi-fang-fa/"/>
      <url>2020/06/10/tong-ji-xue-xi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="李航《统计学习方法》笔记"><a href="#李航《统计学习方法》笔记" class="headerlink" title="李航《统计学习方法》笔记"></a>李航《统计学习方法》笔记</h1><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><h3 id="统计学习的特点"><a href="#统计学习的特点" class="headerlink" title="统计学习的特点"></a>统计学习的特点</h3><ol><li>以计算机及网络为平台，建立在计算机及网络之上</li><li>以数据为研究对象，是数据驱动的学科</li><li>目的是对数据进行预测与分析</li><li>以方法为中心，统计学习方法构建模型并应用模型进行预测与分析</li><li>是概率论、统计学、信息论、计算理论、最优化理论及计算机科学等多个领域的交叉学科</li></ol><h3 id="统计学习的方法"><a href="#统计学习的方法" class="headerlink" title="统计学习的方法"></a>统计学习的方法</h3><p>统计学习由监督学习(supervised learning)、非监督学习(unsupervised learning)、半监督学习(semi-supervised learning)和强化学习(reinforcement learning)等组成，在讨论监督学习的情况下，统计学习方法的三要素为模型(model)、策略(strategy)和算法(algorithm)。</p><p>​    实现统计学习方法的步骤：</p><ol><li><p>得到一个有限的训练数据集合</p><ol><li>去饿顶包含所有可能的模型的假设空间，即学习模型的集合</li><li>确定模型选择的准则，即学习的策略</li><li>实现求解最优模型的算法，即学习的算法</li><li>通过学习方法选择最优模型</li><li>利用学习的最优模型对新数据进行预测或分析</li></ol></li></ol><h3 id="监督学习的基本概念"><a href="#监督学习的基本概念" class="headerlink" title="监督学习的基本概念"></a>监督学习的基本概念</h3><ol><li><p>输入空间、特征空间和输出空间</p><p>在监督学习中，将输入和输出所有可能取值的集合分别称为输入空间和输出空间，每一个具体的输入是一个实例，通常由特征向量表示，所有特征向量存在的空间称为特征空间。根据输入变量X和输出变量Y的不同类型，对预测任务进行分类：</p><ul><li>X和Y均为连续变量的预测问题称为<strong>回归问题</strong></li><li>Y为有限个离散变量的预测问题称为<strong>分类问题</strong></li><li>X和Y均为变量序列的预测问题称为<strong>标注问题</strong></li></ul></li></ol><h3 id="统计学习三要素"><a href="#统计学习三要素" class="headerlink" title="统计学习三要素"></a>统计学习三要素</h3><ol><li><p>模型</p><p>在监督学习过程中，模型就是要学习的条件概率分布或决策函数</p></li><li><p>策略</p><p>策略就是按照什么样的准则学习或者选择最优模型,<strong>损失函数度量模型一次预测的好坏,风险函数度量平均意义下模型预测的好坏.</strong></p><ul><li><p>损失函数(loss function，或代价函数(cost function))，度量模型一次预测的好坏，损失函数的值越小，模型就越好</p><ul><li><p>0-1损失函数</p><script type="math/tex; mode=display">L(Y,f(X))=\begin{cases} 0，Y=f(X)\\ 1， Y\neq f(X)\end{cases}</script><ul><li><p>平方损失函数</p><script type="math/tex; mode=display">L(Y,f(X))=(Y-f(X))^2</script></li><li><p>绝对损失函数</p><script type="math/tex; mode=display">  L(Y,f(X))=|Y-f(X)|</script></li><li><p>对数损失函数</p><script type="math/tex; mode=display">  L(Y,P(Y|X))=-\log P(Y|X)</script></li></ul></li></ul></li><li><p>风险函数，度量平均意义下模型预测的好坏,由于模型输入、输出(X,Y)是随机变量，遵循联合分布P(X,Y)，所以损失函数的期望是</p><script type="math/tex; mode=display">R_{exp}(f)=E_P[L(Y,f(X))]=\int_{x*y}L(y,f(x))P(x,y)dxdy</script><p>这是理论模型f(X)关于联合分布P(X,Y)的平均意义下的损失，称为风险函数(risk function，或期望损失(expected loss))</p><p>给定训练数据集</p><script type="math/tex; mode=display">T=\{(x1,y1),(x2,y2),\cdots,(x_N,y_N)\}</script><p>模型f(X)关于训练数据集的平均损失称为经验风险(empirical risk)或经验损失(empirical loss)，记作</p><script type="math/tex; mode=display">R_{emp}(f)=\frac{1}{N}\sum_{i=1}^{N}L(y_i,f(x_i))</script><p>根据大数定律，当样本容量N趋于无穷大时，经验风险趋于期望风险，由于现实原因，用经验风险估计期望风险并不理想，所以要对经验风险进行一定的矫正，即经验风险最小化和结构风险最小化两个基本策略，极大似然估计是经验风险最小化的一个例子；贝叶斯估计种的最大后验概率估计是结构风险最小化的一个例子.</p><p>按照经验风险最小化求最优模型就是求解最优化问题:</p><script type="math/tex; mode=display">\min _{f \in \mathcal{F}} \frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)</script><p>当样本容量足够大时,经验风险最小化能保证很好的学习效果,但是当样本容量小,经验风险最小化学习容易产生”过拟合”现象<strong>.结构风险最小化</strong>是为了防止过拟合而提出的策略.结构风险最小化等价于正则化.结构风险在经验风险基础上加上表示模型复杂度的正则化项或罚项,其定义为:</p><script type="math/tex; mode=display">R_{\mathrm{srm}}(f)=\frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)+\lambda J(f)</script><p>其中$J(f)$为模型的复杂度,模型越复杂,复杂度就越大.结构风险最小化策略认为结构风险最小的模型是最优的模型.所以求解最优模型就是求解最优化问题:</p><script type="math/tex; mode=display">\min _{f \in \mathcal{F}} \frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)+\lambda J(f)</script><p>最终,<strong>监督学习问题就变成经验风险或结构风险函数的最优化问题.</strong></p></li></ul></li></ol><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p>正则化的一般形式:</p><script type="math/tex; mode=display">\min _{f \in \mathcal{F}} \frac{1}{N} \sum_{i=1}^{N} L\left(y_{i}, f\left(x_{i}\right)\right)+\lambda J(f)</script><p>正则化项有不同的形式.例如回归问题中,损失函数是平方损失</p><ul><li><p>正则化项是参数向量的$L_{2}$范数:</p><script type="math/tex; mode=display">L(w)=\frac{1}{N} \sum_{i=1}^{N}\left(f\left(x_{i} ; w\right)-y_{i}\right)^{2}+\frac{\lambda}{2}\|w\|^{2}</script></li><li><p>正则化项时参数向量的$L_{1}$范数:</p><script type="math/tex; mode=display">L(w)=\frac{1}{N} \sum_{i=1}^{N}\left(f\left(x_{i} ; w\right)-y_{i}\right)^{2}+\lambda\|w\|_{1}</script></li></ul><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><h2 id="K近邻法"><a href="#K近邻法" class="headerlink" title="K近邻法"></a>K近邻法</h2><ul><li><p>$k$近邻法是基本且简单的分类与回归方法。其基本做法是：对给定的训练实例点和输入实例点，首先确定输入实例点的k个最近邻训练实例点，然后利用这$k$个训练实例点的类的多数来预测输入实例点的类。</p></li><li><p>$k$近邻法三要素：距离度量、$k$值的选择和分类决策规则。常用的距离度量是欧氏距离及更一般的$L_{p}$距离。$k$值小时，$k$近邻模型更复杂；$k$值大时，$k$近邻模型更简单。常用的分类决策规则是多数表决，对应于经验风险最小化。</p></li><li>$k$近邻法的实现需要考虑如何快速搜索$k$个最近邻点。$kd$树是一种便于对$k$维空间中的数据进行快速检索的数据结构。</li></ul><h2 id="朴素贝叶斯法"><a href="#朴素贝叶斯法" class="headerlink" title="朴素贝叶斯法"></a>朴素贝叶斯法</h2><ul><li>最终需要实现</li></ul><script type="math/tex; mode=display">y=\arg \max _{c_{k}} P\left(Y=c_{k}\right) \prod_{j=1}^{n} P\left(X^{(j)}=x^{(j)} \mid Y=c_{k}\right)</script><ul><li><p>概率为0时会使用拉普拉斯平滑</p></li><li><p>朴素贝叶斯法的基本假设是添加独立性：</p><script type="math/tex; mode=display">\begin{aligned}P\left(X=x \mid Y=c_{k}\right) &=P\left(X^{(1)}=x^{(1)}, \cdots, X^{(n)}=x^{(n)} \mid Y=c_{k}\right) \\&=\prod_{j=1}^{n} P\left(X^{(j)}=x^{(j)} \mid Y=c_{k}\right)\end{aligned}</script></li></ul><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h3 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h3><p>若$X$是一个有限取值的离散随机变量，其概率分布为：</p><script type="math/tex; mode=display">P\left(X=x_{i}\right)=p_{i}, \quad i=1,2, \cdots, n</script><p>则随机变量$X$的熵定义为：</p><script type="math/tex; mode=display">H(X)=-\sum_{i=1}^{n} p_{i} \log p_{i}</script><p>信息增益：</p><script type="math/tex; mode=display">g(D,A) = H(D) - H(D|A)</script><p>算法步骤：</p><p>输入：训练数据集D和特征A</p><p>输出：特征A对数据集D的信息增益$g(D,A)$</p><ol><li><p>计算数据集D的经验熵$H(D)$</p><script type="math/tex; mode=display">H(D)=-\sum_{k=1}^{K} \frac{\left|C_{k}\right|}{|D|} \log _{2} \frac{\left|C_{k}\right|}{|D|}</script></li><li><p>计算特征A对数据集D的经验条件熵$H(D|A)$</p><script type="math/tex; mode=display">H(D \mid A)=\sum_{i=1}^{n} \frac{\left|D_{i}\right|}{|D|} H\left(D_{i}\right)=-\sum_{i=1}^{n} \frac{\left|D_{i}\right|}{|D|} \sum_{k=1}^{K} \frac{\left|D_{i k}\right|}{\left|D_{i}\right|} \log _{2} \frac{\left|D_{i k}\right|}{\left|D_{i}\right|}</script></li><li><p>计算信息增益</p><script type="math/tex; mode=display">g(D,A) = H(D) - H(D|A)</script></li></ol><h3 id="信息增益比"><a href="#信息增益比" class="headerlink" title="信息增益比"></a>信息增益比</h3><p>以信息增益作为划分训练数据集的特征，存在偏向于选择取值较多的特征的问题，可以使用信息增益比进行校正。</p><script type="math/tex; mode=display">g_{R}(D, A)=\frac{g(D, A)}{H_{A}(D)}</script><p>其中，</p><script type="math/tex; mode=display">H_{A}(D)=-\sum_{i=1}^{n} \frac{\left|D_{i}\right|}{|D|} \log _{2} \frac{\left|D_{i}\right|}{|D|}</script><h3 id="基尼指数"><a href="#基尼指数" class="headerlink" title="基尼指数"></a>基尼指数</h3><p>对于给定的数据集D，其基尼指数为：</p><script type="math/tex; mode=display">\operatorname{Gini}(D)=1-\sum_{k=1}^{K}\left(\frac{\left|C_{k}\right|}{|D|}\right)^{2}</script><p>在特征A的条件下，集合D的基尼指数为：</p><script type="math/tex; mode=display">\operatorname{Gini}(D, A)=\frac{\left|D_{1}\right|}{|D|} \operatorname{Gini}\left(D_{1}\right)+\frac{\left|D_{2}\right|}{|D|} \operatorname{Gini}\left(D_{2}\right)</script><ul><li>ID3算法，信息增益</li><li><p>C4.5算法，信息增益比</p></li><li><p>CART算法，基尼指数</p></li></ul><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><h2 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h2><h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 统计学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop学习笔记</title>
      <link href="2020/06/07/hadoop-xue-xi-bi-ji/"/>
      <url>2020/06/07/hadoop-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop基础"><a href="#Hadoop基础" class="headerlink" title="Hadoop基础"></a>Hadoop基础</h1><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/hdfsarchitecture.png" alt="HDFS Architecture"></p><h3 id="1-NameNode"><a href="#1-NameNode" class="headerlink" title="1. NameNode"></a>1. NameNode</h3><ul><li>管理HDFS的名称空间</li><li>配置副本策略</li><li>管理数据块（Block）映射信息</li><li>处理客户端读写请求</li></ul><h3 id="2-DataNode"><a href="#2-DataNode" class="headerlink" title="2. DataNode"></a>2. DataNode</h3><ul><li>存储实际的数据块</li><li>执行数据块的读写操作</li></ul><h3 id="3-Client"><a href="#3-Client" class="headerlink" title="3. Client"></a>3. Client</h3><ul><li>文件切分，文件上传HDFS时，CLient将文件切分成Block，然后进行上传</li><li>与NameNode交互，获取文件的位置信息</li><li>与DataNode交互，读取或写入数据</li><li>Client提供一些命令来管理HDFS，比如NameNode格式化</li><li>Client通过一些命令来访问HDFS，比如对HDFS增删改查操作</li></ul><h3 id="4-Secondary-NameNode"><a href="#4-Secondary-NameNode" class="headerlink" title="4.Secondary NameNode"></a>4.Secondary NameNode</h3><ul><li>辅助NameNode，分担工作量，比如定期合并fsimage和edits，并推送给NameNode</li><li>紧急情况下，辅助恢复nameNode</li><li>并非NameNode的热备，不能马上替换挂掉的NameNode并提供服务</li></ul><h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键汇总</title>
      <link href="2020/06/01/idea-kuai-jie-jian-hui-zong/"/>
      <url>2020/06/01/idea-kuai-jie-jian-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Ctrl-快捷键"><a href="#一、Ctrl-快捷键" class="headerlink" title="一、Ctrl 快捷键"></a><strong>一、Ctrl 快捷键</strong></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + F    在当前文件进行文本查找 （必备）</span><br><span class="line">Ctrl + R    在当前文件进行文本替换 （必备）</span><br><span class="line">Ctrl + Z    撤销 （必备）</span><br><span class="line">Ctrl + Y    删除光标所在行 或 删除选中的行 （必备）</span><br><span class="line">Ctrl + X    剪切光标所在行 或 剪切选择内容</span><br><span class="line">Ctrl + C    复制光标所在行 或 复制选择内容</span><br><span class="line">Ctrl + D    复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）Ctrl + W    递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围（必备）</span><br><span class="line">Ctrl + E    显示最近打开的文件记录列表 （必备）</span><br><span class="line">Ctrl + N    根据输入的 名/类名 查找类文件 （必备）</span><br><span class="line">Ctrl + G    在当前文件跳转到指定行处</span><br><span class="line">Ctrl + J    插入自定义动态代码模板 （必备）</span><br><span class="line">Ctrl + P    方法参数提示显示 （必备）</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Q    光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</span><br><span class="line">Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义 （必备）</span><br><span class="line">Ctrl + B    进入光标所在的方法/变量的接口或是定义处，等效于 </span><br><span class="line">Ctrl + 左键单击 （必备）</span><br><span class="line">Ctrl + K    版本控制提交项目，需要此项目有加入到版本控制才可用</span><br><span class="line">Ctrl + T    版本控制更新项目，需要此项目有加入到版本控制才可用</span><br><span class="line">Ctrl + H    显示当前类的层次结构</span><br><span class="line">Ctrl + O    选择可重写的方法</span><br><span class="line">Ctrl + I    选择可继承的方法</span><br><span class="line">Ctrl + +    展开代码</span><br><span class="line">Ctrl + -    折叠代码</span><br><span class="line">Ctrl + /    释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</span><br><span class="line">Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义 （必备）</span><br><span class="line">Ctrl + B    进入光标所在的方法/变量的接口或是定义处，等效于 </span><br><span class="line">Ctrl + 左键单击 （必备）</span><br><span class="line">Ctrl + K    版本控制提交项目，需要此项目有加入到版本控制才可用</span><br><span class="line">Ctrl + T    版本控制更新项目，需要此项目有加入到版本控制才可用</span><br><span class="line">Ctrl + H    显示当前类的层次结构</span><br><span class="line">Ctrl + O    选择可重写的方法</span><br><span class="line">Ctrl + I    选择可继承的方法</span><br><span class="line">Ctrl + +    展开代码</span><br><span class="line">Ctrl + -    折叠代码</span><br><span class="line">Ctrl + /    释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + [    移动光标到当前所在代码的花括号开始位置</span><br><span class="line">Ctrl + ]    移动光标到当前所在代码的花括号结束位置</span><br><span class="line">Ctrl + F1   在光标所在的错误代码处显示错误信息 （必备）</span><br><span class="line">Ctrl + F3   调转到所选中的词的下一个引用位置 （必备）</span><br><span class="line">Ctrl + F4   关闭当前编辑文件</span><br><span class="line">Ctrl + F8   在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点Ctrl + F9   执行 Make Project 操作</span><br><span class="line">Ctrl + F11  选中文件 / 文件夹，使用助记符设定 / 取消书签 （必备）</span><br><span class="line">Ctrl + F12  弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</span><br><span class="line">Ctrl + Tab  编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + End  跳到文件尾</span><br><span class="line">Ctrl + Home 跳到文件头</span><br><span class="line">Ctrl + Space  基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 </span><br><span class="line">Ctrl +逗号 （必备）</span><br><span class="line">Ctrl + Delete      删除光标后面的单词或是中文句 （必备）</span><br><span class="line">Ctrl +BackSpace    删除光标前面的单词或是中文句 （必备）</span><br><span class="line">Ctrl +1,2,3...9    定位到对应数值的书签位置 （必备）</span><br><span class="line">Ctrl + 左键单击     在打开的文件标题上，弹出该文件路径 （必备）</span><br><span class="line">Ctrl + 光标定位按   </span><br><span class="line">Ctrl 不要松开，会显示光标所在的类信息摘要</span><br><span class="line">Ctrl + 左方向键     光标跳转到当前单词 / 中文句的左侧开头位置 （必备）</span><br><span class="line">Ctrl + 右方向键     光标跳转到当前单词 / 中文句的右侧开头位置 （必备）</span><br><span class="line">Ctrl + 前方向键     等效于鼠标滚轮向前效果 （必备）</span><br><span class="line">Ctrl + 后方向键     等效于鼠标滚轮向后效果 （必备）</span><br></pre></td></tr></tbody></table></figure><p><strong>二、Alt 快捷键</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Alt + `   显示版本控制常用操作菜单弹出层 （必备）</span><br><span class="line">Alt + Q   弹出一个提示，显示当前类的声明 / 上下文信息</span><br><span class="line">Alt + F1  显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备）</span><br><span class="line">Alt + F2  对于前面页面，显示各类浏览器打开目标选择弹出层</span><br><span class="line">Alt + F3  选中文本，逐个往下查找相同文本，并高亮显示</span><br><span class="line">Alt + F7  查找光标所在的方法 / 变量 / 类被调用的地方</span><br><span class="line">Alt + F8  在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</span><br><span class="line">Alt + Home   定位 / 显示到当前文件的 Navigation Bar</span><br><span class="line">Alt + Enter  IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</span><br><span class="line">Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 （必备）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Alt + 左方向键     切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）</span><br><span class="line">Alt + 右方向键     按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）</span><br><span class="line">Alt + 前方向键     当前光标跳转到当前文件的前一个方法名位置 （必备）</span><br><span class="line">Alt + 后方向键     当前光标跳转到当前文件的后一个方法名位置 （必备）</span><br><span class="line">Alt +1,2,3...9    显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备）</span><br></pre></td></tr></tbody></table></figure><h1 id="三、Shift-快捷键"><a href="#三、Shift-快捷键" class="headerlink" title="三、Shift 快捷键"></a><strong>三、Shift 快捷键</strong></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Shift + F1   如果有外部文档可以连接外部文档</span><br><span class="line">Shift + F2   跳转到上一个高亮错误 或 警告位置</span><br><span class="line">Shift + F3   在查找模式下，查找匹配上一个</span><br><span class="line">Shift + F4   对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留</span><br><span class="line">Shift + F6   对文件 / 文件夹 重命名</span><br><span class="line">Shift + F7   在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</span><br><span class="line">Shift + F8   在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</span><br><span class="line">Shift + F9   等效于点击工具栏的 Debug 按钮</span><br><span class="line">Shift + F10  等效于点击工具栏的 Run 按钮</span><br><span class="line">Shift + F11  弹出书签显示层 （必备）</span><br><span class="line">Shift + Tab    取消缩进 （必备）</span><br><span class="line">Shift + ESC    隐藏当前 或 最后一个激活的工具窗口</span><br><span class="line">Shift + End    选中光标到当前行尾位置</span><br><span class="line">Shift + Home   选中光标到当前行头位置</span><br><span class="line">Shift + Enter    开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备）Shift + 左键单击      在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备）Shift + 滚轮前后滚动   当前文件的横向滚动轴滚动 （必备）</span><br></pre></td></tr></tbody></table></figure><h1 id="四、Ctrl-Alt-快捷键"><a href="#四、Ctrl-Alt-快捷键" class="headerlink" title="四、Ctrl + Alt 快捷键"></a><strong>四、Ctrl + Alt 快捷键</strong></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + L   格式化代码，可以对当前文件和整个包目录使用 （必备）</span><br><span class="line">Ctrl + Alt + O   优化导入的类，可以对当前文件和整个包目录使用 （必备）</span><br><span class="line">Ctrl + Alt + I   光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</span><br><span class="line">Ctrl + Alt + T   对选中的代码弹出环绕选项弹出层 （必备）</span><br><span class="line">Ctrl + Alt + J   弹出模板选择窗口，将选定的代码加入动态模板中</span><br><span class="line">Ctrl + Alt + H   调用层次</span><br><span class="line">Ctrl + Alt + B   在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</span><br><span class="line">Ctrl + Alt + V   快速引进变量</span><br><span class="line">Ctrl + Alt + Y   同步、刷新</span><br><span class="line">Ctrl + Alt + S   打开 IntelliJ IDEA 系统设置 （必备）</span><br><span class="line">Ctrl + Alt + F7  显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + F11 切换全屏模式</span><br><span class="line">Ctrl + Alt + Enter   光标所在行上空出一行，光标定位到新行 （必备）</span><br><span class="line">Ctrl + Alt + Home    弹出跟当前文件有关联的文件弹出层</span><br><span class="line">Ctrl + Alt + Space   类名自动完成</span><br><span class="line">Ctrl + Alt + 左方向键    退回到上一个操作的地方 （必备）</span><br><span class="line">Ctrl + Alt + 右方向键    前进到上一个操作的地方 （必备）</span><br><span class="line">Ctrl + Alt + 前方向键    在查找模式下，跳到上个查找的文件</span><br><span class="line">Ctrl + Alt + 后方向键    在查找模式下，跳到下个查找的文件</span><br></pre></td></tr></tbody></table></figure><p> <strong>五、Ctrl + Shift 快捷键</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + F  根据输入内容查找整个项目 或 指定目录内文件 （必备）</span><br><span class="line">Ctrl + Shift + R  根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</span><br><span class="line">Ctrl + Shift + J  自动将下一行合并到当前行末尾 （必备）</span><br><span class="line">Ctrl + Shift + Z  取消撤销 （必备）</span><br><span class="line">Ctrl + Shift + W  递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</span><br><span class="line">Ctrl + Shift + N  通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</span><br><span class="line">Ctrl + Shift + U  对选中的代码进行大 / 小写轮流转换 （必备）</span><br><span class="line">Ctrl + Shift + T  对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + C  复制当前文件磁盘路径到剪贴板 （必备）</span><br><span class="line">Ctrl + Shift + V  弹出缓存的最近拷贝的内容管理器弹出层</span><br><span class="line">Ctrl + Shift + E  显示最近修改的文件列表的弹出层</span><br><span class="line">Ctrl + Shift + H  显示方法层次结构</span><br><span class="line">Ctrl + Shift + B  跳转到类型声明处 （必备）</span><br><span class="line">Ctrl + Shift + I  快速查看光标所在的方法 或 类的定义</span><br><span class="line">Ctrl + Shift + A  查找动作 / 设置</span><br><span class="line">Ctrl + Shift + /  代码块注释 （必备）</span><br><span class="line">Ctrl + Shift + [  选中从光标所在位置到它的顶部中括号位置 （必备）</span><br><span class="line">Ctrl + Shift + ]  选中从光标所在位置到它的底部中括号位置 （必备）</span><br><span class="line">Ctrl + Shift + +  展开所有代码 （必备）</span><br><span class="line">Ctrl + Shift + -  折叠所有代码 （必备）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + F7    高亮显示所有该选中文本，按 Esc 高亮消失 （必备）</span><br><span class="line">Ctrl + Shift + F8    在 Debug 模式下，指定断点进入条件</span><br><span class="line">Ctrl + Shift + F9    编译选中的文件 / 包 / Module</span><br><span class="line">Ctrl + Shift + F12   编辑器最大化 （必备）</span><br><span class="line">Ctrl + Shift + Space 智能代码提示</span><br><span class="line">Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备）</span><br><span class="line">Ctrl + Shift +Backspace  退回到上次修改的地方 （必备）</span><br><span class="line">Ctrl + Shift +1,2,3...9  快速添加指定数值的书签 （必备）</span><br><span class="line">Ctrl + Shift + 左键单击   把光标放在某个类变量上，按此快捷键可以直接定位到该类中（必备）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + 左方向键    在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句（必备）</span><br><span class="line">Ctrl + Shift + 右方向键    在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句（必备）</span><br><span class="line">Ctrl + Shift + 前方向键    光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）</span><br><span class="line">Ctrl + Shift + 后方向键    光标放在方法名上，将方法移动到下一个方法前面，调整方法Ctrl + Shift + 右方向键    在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句（必备）</span><br><span class="line">Ctrl + Shift + 前方向键    光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）</span><br><span class="line">Ctrl + Shift + 后方向键    光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 （必备）</span><br></pre></td></tr></tbody></table></figure><h1 id="六、Alt-Shift-快捷键"><a href="#六、Alt-Shift-快捷键" class="headerlink" title="六、Alt + Shift 快捷键"></a><strong>六、Alt + Shift 快捷键</strong></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Alt + Shift + N     选择 / 添加 task （必备）</span><br><span class="line">Alt + Shift + F     显示添加到收藏夹弹出层 / 添加到收藏夹</span><br><span class="line">Alt + Shift + C     查看最近操作项目的变化情况列表</span><br><span class="line">Alt + Shift + I     查看项目当前文件</span><br><span class="line">Alt + Shift + F7在  Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</span><br><span class="line">Alt + Shift + F9    弹出 Debug 的可选择菜单</span><br><span class="line">Alt + Shift + F10   弹出 Run 的可选择菜单</span><br><span class="line">Alt + Shift + 左键双击  选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 （必备）</span><br><span class="line">Alt + Shift + 前方向键  移动光标所在行向上移动 （必备）</span><br><span class="line">Alt + Shift + 后方向键  移动光标所在行向下移动 （必备）</span><br></pre></td></tr></tbody></table></figure><p><strong>七、Ctrl + Shift + Alt 快捷键</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + Alt + V   无格式黏贴 （必备）</span><br><span class="line">Ctrl + Shift + Alt + N   前往指定的变量 / 方法</span><br><span class="line">Ctrl + Shift + Alt + S   打开当前项目设置 （必备）</span><br><span class="line">Ctrl + Shift + Alt + C   复制参考信息</span><br></pre></td></tr></tbody></table></figure><h1 id="八、其他快捷键"><a href="#八、其他快捷键" class="headerlink" title="八、其他快捷键"></a><strong>八、其他快捷键</strong></h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">F2   跳转到下一个高亮错误 或 警告位置 （必备）</span><br><span class="line">F3   在查找模式下，定位到下一个匹配处</span><br><span class="line">F4   编辑源 （必备）</span><br><span class="line">F7   在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</span><br><span class="line">F8   在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</span><br><span class="line">F9   在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上F11  添加书签 （必备）</span><br><span class="line">F12  回到前一个工具窗口 （必备）</span><br><span class="line">Tab缩进 （必备）</span><br><span class="line">ESC     从工具窗口进入代码文件窗口 （必备）</span><br><span class="line">连按两次Shift  弹出 Search Everywhere 弹出层</span><br></pre></td></tr></tbody></table></figure><blockquote><p>引用自<a href="https://www.cnblogs.com/jajian/p/8012603.html">JaJian</a></p><p>微信文章<a href="https://mp.weixin.qq.com/s?__biz=MzA4NjgxMjQ5Mg==&amp;mid=2665764290&amp;idx=2&amp;sn=6f1a24e362aa90f1877f2d5e70521512&amp;chksm=84d207e1b3a58ef7800a516d85164f0e34d24579608a2794e02a31bb091ad290f4788e86b8a2&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1590982013348&amp;sharer_shareid=e3463ca9628feab22dbf5fc497900b41&amp;key=b62499e58a6e381a2fc230528ca092aefc270792e4d333ebb180377f604bc41c2fe849adeb6d3263433410079f0083148c1d9cc816eb11560011c58764b276205b6eef37db1a56a10c4adeee354910e7&amp;ascene=1&amp;uin=MzM1NjEzNzAyNA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=A2mVX%2Fv5Ob5iPc9%2BwXzvZqc%3D&amp;pass_ticket=S%2F5FvjsL49kJzgfnPQmLQiJV17dSpvUGbNhp1HAIY3ymf8DWvAy1euIgF7laY41H">肥朝</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据开发环境搭建</title>
      <link href="2020/06/01/da-shu-ju-kai-fa-huan-jing-da-jian/"/>
      <url>2020/06/01/da-shu-ju-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据开发环境搭建笔记"><a href="#大数据开发环境搭建笔记" class="headerlink" title="大数据开发环境搭建笔记"></a>大数据开发环境搭建笔记</h1><h2 id="1-虚拟机基本设置"><a href="#1-虚拟机基本设置" class="headerlink" title="1.虚拟机基本设置"></a>1.虚拟机基本设置</h2><h2 id="2-JDK安装配置"><a href="#2-JDK安装配置" class="headerlink" title="2.JDK安装配置"></a>2.JDK安装配置</h2><ul><li><p>下载并解压jdk</p></li><li><p>配置JDK环境变量</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=(jdk安装目录)</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></tbody></table></figure></li></ul><span id="more"></span><h2 id="3-Hadoop安装配置"><a href="#3-Hadoop安装配置" class="headerlink" title="3.Hadoop安装配置"></a>3.Hadoop安装配置</h2><ul><li><p>下载并解压Hadoop</p></li><li><p>配置Hadoop环境变量</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=(hadoop安装目录)</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置core-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop100:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/app/hadoop-3.2.0/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置hdfs-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定HDFS副本的数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置hadoop-env.sh</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME={<span class="variable">$JAVA_HOME</span>}</span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p>解决WARN util.NativeCodeLoader: <em>Unable</em> <em>to</em> <em>load</em> <em>native-hadoop</em> <em>library</em> <em>for</em> <em>your</em> <em>platform</em>… <em>using</em> <em>builtin-java</em> classes where applicable的方法</p><ol><li>下载 <a href="http://dl.bintray.com/sequenceiq/sequenceiq-bin/hadoop-native-64.tar">http://dl.bintray.com/sequenceiq/sequenceiq-bin/hadoop-native-64.tar</a></li><li>解压到$HADOOP_HOME/lib/native和$HADOOP_HOME/lib下</li><li><code>export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</code></li><li><code>export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"</code></li><li><code>source /etc/profile</code>生效</li></ol></blockquote><ul><li><p>配置yarn-env.sh</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_231-amd64</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk1.8.0_251</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置yarn-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CL</span><br><span class="line">ASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置mapred-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置mapred-env.sh</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_231-amd64</span><br></pre></td></tr></tbody></table></figure></li><li><p>群起集群，配置workers</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加DataNode的主机</span></span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置启动脚本</p><ul><li><p>start-dfs.sh</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HDFS_DATANODE_SECURE_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></tbody></table></figure></li><li><p>stop-dfs.sh</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HDFS_DATANODE_SECURE_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></tbody></table></figure></li><li><p>start-yarn.sh</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></tbody></table></figure></li><li><p>stop-yarn.sh</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>启动（注意分发安装包）</p><ul><li><p>第一次需要格式化，注意格式化之前要停止上次启动的NameNode和DataNode，删除data和log数据</p></li><li><p>格式化<code>bin/hdfs namenode -format</code></p><blockquote><p>多次格式化可能会出现datanode无法正常启动的问题</p></blockquote></li><li><p>启动hdfs<code>sbin/start-dfs.sh</code></p></li><li><p>启动yarn<code>sbin/start-yarn.sh</code>，启动Yarn需要在ResourceManager所在的节点上启动</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-6</title>
      <link href="2020/06/01/2020-6/"/>
      <url>2020/06/01/2020-6/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-6"><a href="#2020-6" class="headerlink" title="2020.6"></a>2020.6</h1><h2 id="6-1"><a href="#6-1" class="headerlink" title="6.1"></a>6.1</h2><h3 id="1431-拥有最多糖果的孩子-candy-candy-candy-lollipop-lollipop"><a href="#1431-拥有最多糖果的孩子-candy-candy-candy-lollipop-lollipop" class="headerlink" title="1431.拥有最多糖果的孩子:candy::candy::candy::lollipop::lollipop:"></a>1431.拥有最多糖果的孩子<span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🍭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🍭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：<em>真就是儿童节</em>先找到最大值,然后遍历相加比较即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Boolean&gt; <span class="title">kidsWithCandies</span><span class="params">(<span class="keyword">int</span>[] candies, <span class="keyword">int</span> extraCandies)</span> </span>{</span><br><span class="line">        List&lt;Boolean&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (candies.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> max = candies[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> candy : candies) {</span><br><span class="line">            <span class="keyword">if</span> (max &lt; candy) {</span><br><span class="line">                max = candy;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; candies.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (max &lt;= candies[i] + extraCandies) {</span><br><span class="line">                res.add(<span class="keyword">true</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                res.add(<span class="keyword">false</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="6-2"><a href="#6-2" class="headerlink" title="6.2"></a>6.2</h2><h3 id="面试题64-求1-2-3-…-n"><a href="#面试题64-求1-2-3-…-n" class="headerlink" title="面试题64.求1+2+3+…+n"></a>面试题64.求1+2+3+…+n</h3><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：题目要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C），所以使用&amp;&amp;的短路思路来作为递归的终止条件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNums</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> flag = n &gt; <span class="number">1</span> &amp;&amp; (sumNums(n - <span class="number">1</span>) &gt; <span class="number">0</span>);</span><br><span class="line">        res += n;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络基础</title>
      <link href="2020/06/01/linux-wang-luo-ji-chu/"/>
      <url>2020/06/01/linux-wang-luo-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux网络基础笔记"><a href="#Linux网络基础笔记" class="headerlink" title="Linux网络基础笔记"></a>Linux网络基础笔记</h1><h2 id="Linux配置IP地址"><a href="#Linux配置IP地址" class="headerlink" title="Linux配置IP地址"></a>Linux配置IP地址</h2><h3 id="修改网络配置文件"><a href="#修改网络配置文件" class="headerlink" title="修改网络配置文件"></a>修改网络配置文件</h3><ol><li><p>网卡信息文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">代网卡设备名</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line"><span class="meta">#</span><span class="bash">是否自动获取IP（none、static表示手动，dhcp表示自动）</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="meta">#</span><span class="bash">MAC地址</span></span><br><span class="line">HWADDR=xx:xx:xx:xx</span><br><span class="line"><span class="meta">#</span><span class="bash">是否由Network Manager图形管理工具托管</span></span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line"><span class="meta">#</span><span class="bash">是否随网络服务启动，eth0生效</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="meta">#</span><span class="bash">类型为以太网</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line"><span class="meta">#</span><span class="bash">唯一标识码</span></span><br><span class="line">UUID=xxxxxxxxxxxxxxxx</span><br><span class="line"><span class="meta">#</span><span class="bash">IP地址</span></span><br><span class="line">IPADDR=x.x.x.x</span><br><span class="line"><span class="meta">#</span><span class="bash">子网掩码</span></span><br><span class="line">NETMASK=x.x.x.x</span><br><span class="line"><span class="meta">#</span><span class="bash">网关</span></span><br><span class="line">GATEWAY=x.x.x.x</span><br><span class="line"><span class="meta">#</span><span class="bash">DNS</span></span><br><span class="line">DNS1=x.x.x.x</span><br><span class="line"><span class="meta">#</span><span class="bash">不允许非root用户控制此网卡</span></span><br><span class="line">USERCTL=no</span><br></pre></td></tr></tbody></table></figure><span id="more"></span></li><li><p>主机名文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br><span class="line">---------------------------</span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=localhost.localdomain </span><br></pre></td></tr></tbody></table></figure></li><li><p>DNS配置文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line">---------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">DNS</span></span><br><span class="line">nameserver x.x.x.x</span><br><span class="line">search localhost</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="虚拟机网络参数配置"><a href="#虚拟机网络参数配置" class="headerlink" title="虚拟机网络参数配置"></a>虚拟机网络参数配置</h2><ol><li><p>配置Linux的IP地址</p></li><li><p>启动网卡</p><p>将<code>ONBOOT=no</code>改为<code>ONBOOT=yes</code>,然后重启网络</p></li><li><p>修改UUID(当克隆虚拟机时执行)</p><ul><li><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code>删除MAC地址</li><li><code>rm -rf /etc/udev/rules.d/70-persistent-net.rules</code>删除网卡和MAC地址绑定文件</li><li>重启系统</li></ul></li></ol><h2 id="Linux网络命令"><a href="#Linux网络命令" class="headerlink" title="Linux网络命令"></a>Linux网络命令</h2><h3 id="网络环境查看命令"><a href="#网络环境查看命令" class="headerlink" title="网络环境查看命令"></a>网络环境查看命令</h3><ol><li>ifconfig:查看与配置网络状态命令</li><li>ifdown 网卡设备名:禁用网卡</li><li>ifup 网卡设备名:启用网卡</li><li>netstat 查询网络状态<ul><li>-t:列出TCP协议端口</li><li>-u:列出UDP协议端口</li><li>-n:不适应域名与服务名,而使用IP地址和端口号</li><li>-l:仅列出在监听状态网络服务</li><li>-a:列出所有的网络连接</li><li>-rn:查看网关</li></ul></li><li>nslookup:查看域名</li></ol><h3 id="网络测试命令"><a href="#网络测试命令" class="headerlink" title="网络测试命令"></a>网络测试命令</h3><ol><li>ping<ul><li>-c 次数:指定ping包的次数</li></ul></li><li>telnet [域名或IP] [端口]:远程管理与端口探测命令</li><li>traceroute [选项] IP或域名:路由跟踪协议<ul><li>-n:使用IP,不使用域名,速度更快</li></ul></li><li>wget 下载命令</li><li>tcpdump -i eth0 -nnX port 21<ul><li>-i:指定网卡接口</li><li>-nn:将数据包中的域名与服务转为IP和端口</li><li>-X:以十六进制和ASCII码显示数据包内容</li><li>port:指定监听的端口</li></ul></li></ol><h2 id="Linux远程登录"><a href="#Linux远程登录" class="headerlink" title="Linux远程登录"></a>Linux远程登录</h2><h3 id="SSH命令"><a href="#SSH命令" class="headerlink" title="SSH命令"></a>SSH命令</h3><ol><li>ssh 用户名@ip  #远程管理指定Linux服务器</li><li>scp [-r] 用户名@ip:文件路径 本地路径   #下载文件</li><li>scp [-r] 本地路径 用户名@ip:文件路径   #上传文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos6.8集群搭建</title>
      <link href="2020/05/29/centos6-8-ji-qun-da-jian/"/>
      <url>2020/05/29/centos6-8-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<p>关机：halt</p><p>重启：reboot</p><p>修改本机ip：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=00:0C:29:81:D1:F5</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=2934354a-b8b3-4fcd-9bd4-8bb9142b87ce</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.2.128</span><br><span class="line">GATEWAY=192.168.2.1</span><br><span class="line">BROADCAST=192.168.2.255</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=114.114.114.114</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>修改hosts：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.128 hadoop100</span><br></pre></td></tr></tbody></table></figure><p>重启网络服务：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager stop</span><br><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></tbody></table></figure><p>关闭关机自启：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig NetworkManager off</span><br></pre></td></tr></tbody></table></figure><p>设置nameserver：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line">nameserver 192.168.2.1</span><br></pre></td></tr></tbody></table></figure><p>配置防火墙：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">service iptables stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭开机自启</span></span><br><span class="line">chkconfig iptables off</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙状态</span></span><br><span class="line">service iptables status</span><br></pre></td></tr></tbody></table></figure><p>Ubuntu黑屏</p><p><code>netsh winsock reset</code></p><p>修改ip之后需要删除一个文件才能成功</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></tbody></table></figure><p>SSH免密登录</p><ol><li>生产密钥<code>ssh-keygen -t rsa</code></li><li>私钥发送本机<code>ssh-copy-id localhost</code></li><li>公钥发送其他计算机<code>ssh-copy-id 192.168.2.128</code></li></ol><p>记一次UUID和HWADDR的坑</p><p>在虚拟机设置中获取MAC地址<code>00:50:56:25:32:15</code></p><p>在<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>中添加<code>HWADDR=xxx</code></p><p>使用<code>uuidgen eth0</code>生成<code>UUID</code>，并在<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>中添加</p><p>删除<code>rm -rf /etc/udev/rules.d/70-persistent-net.rules</code></p><p>重启</p><blockquote><p>也可以克隆虚拟机后，直接修改<code>/etc/udev/rules.d/70-persistent-net.rules</code>，将<code>eth1</code>改为<code>eth0</code>，然后复制<code>HWADDR</code>写入<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></p></blockquote><h3 id="设置yum阿里镜像"><a href="#设置yum阿里镜像" class="headerlink" title="设置yum阿里镜像"></a>设置yum阿里镜像</h3><ol><li><p>备份</p><p><code>cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</code></p></li><li><p>配置软件源</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Centos-6</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line"># Centos-7</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成缓存</p><p><code>yum makecache</code></p></li></ol><p>集群分发工具</p><ul><li><p>scp</p></li><li><p>rsync</p></li><li><p>xsync</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1 获取输入参数个数，若没有参数，直接退出</span></span><br><span class="line">pcount=$#</span><br><span class="line">if((pcount==0)); then</span><br><span class="line">echo no args;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2 获取文件名称</span></span><br><span class="line">p1=$1</span><br><span class="line">fname=`basename $p1`</span><br><span class="line">echo fname=$fname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3 获取上级目录的绝对路径</span></span><br><span class="line">pdir=`cd -P $(dirname $p1); pwd`</span><br><span class="line">echo pdir=$pdir</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4 获取当前用户名称</span></span><br><span class="line">user=`whoami`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5 循环</span></span><br><span class="line">for((host=103; host&lt;105; host++)); do</span><br><span class="line">echo ----------hadoop$host------------</span><br><span class="line">rsync -rvl $pdir/$fname $user@hadoop$host:$pdir</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="集群时间同步ntp"><a href="#集群时间同步ntp" class="headerlink" title="集群时间同步ntp"></a>集群时间同步ntp</h3><hr><h2 id="Centos6-8安装MySQL5-7"><a href="#Centos6-8安装MySQL5-7" class="headerlink" title="Centos6.8安装MySQL5.7"></a>Centos6.8安装MySQL5.7</h2><ol><li><p>下载 <a href="https://dev.mysql.com/downloads/mysql">https://dev.mysql.com/downloads/mysql</a>,  (wget <a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</a>) 选择对应版本，上传到虚拟机，解压</p></li><li><p>卸载系统自带MySQL<code>rpm -qa|grep mysql</code>，若存在则<code>yum remove ***</code></p></li><li><p>创建用户组和用户</p><p>创建用户组<code>groupadd mysql</code></p><p>创建用户<code>useradd -r -g mysql mysql</code></p></li><li><p>给MySQL用户指定专有用户和用户组</p><ul><li>创建data文件夹<code>cd /usr/local/mysql</code>，<code>mkdir data</code></li><li>指定用户组和用户<code>cd /usr/local</code>,<code>chown -R mysql mysql/</code>,<code>chgrp -R mysql mysql/</code></li></ul></li><li><p>初始化MySQL</p><ul><li><p><code>cd /usr/local/mysql/bin</code>,<code>yum -y install numactl</code></p></li><li><p><code>./mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --lc_messages_dir=/usr/local/mysql/share --lc_messages=en_US</code>,记住生成的临时密码<code>T(nUEMv&amp;f2-7</code></p><blockquote><p>如果忘记密码或者想重新初始化，可以先将mysql/data目录中文件删除，然后再执行初始化命令</p></blockquote></li></ul></li><li><p>配置my.cnf</p><p><code>vim /etc/my.cnf</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动MySQL</p><p><code>cd /usr/local/mysql/bin</code></p><p><code>./mysqld_safe --user=mysql &amp;</code></p></li><li><p>设置开机自启动</p><p><code>cd /usr/local/mysql/support-files/</code></p><p><code>cp mysql.server /etc/init.d/mysql</code></p><p><code>vim /etc/init.d/mysql</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basedir=/usr/local/mysql/</span><br><span class="line">datadir=/usr/local/mysql/data/</span><br></pre></td></tr></tbody></table></figure><p>授权<code>chmod +x /etc/init.d/mysql</code></p><p>设为开机启动<code>chkconfig --add mysql</code></p></li><li><p>启动服务</p><ul><li>启动<code>service mysql start</code></li><li>停止<code>service mysql stop</code></li><li>重启<code>service mysql restart</code></li><li>查看<code>service mysql status</code></li></ul></li><li><p>登录MySQL</p><p><code>cd /usr/local/mysql/bin</code></p><p><code>./mysql -u root -p</code></p><p>修改密码<code>set password=password("root");</code></p><p>登录授权<code>grant all privileges on *.* to'root' @'%' identified by '123456';</code></p><p>授权生效<code>flush privileges;</code></p></li></ol><h2 id="Centos6-8安装Redis"><a href="#Centos6-8安装Redis" class="headerlink" title="Centos6.8安装Redis"></a>Centos6.8安装Redis</h2><ol><li><p>下载 <a href="http://download.redis.io/releases/redis-5.0.8.tar.gz">http://download.redis.io/releases/redis-5.0.8.tar.gz</a> 解压</p></li><li><p>进入redis目录，<code>make &amp;&amp; make install</code></p></li><li><p>将redis安装为系统服务并后台启动</p><p><code>cd /usr/local/redis/utils</code></p><p><code>./install_server.sh</code></p></li><li><p>查看redis服务启动情况<code>systemctl status redis_6379.service</code></p><blockquote><p>centos6没有systemctl命令，可以使用service —status-all显示所有服务</p></blockquote></li><li><p>启动redis客户端</p></li><li><p>设置允许远程连接</p><ul><li>编辑redis配置文件<code>vim /etc/redis/6379.conf</code></li><li>将<code>bind 127.0.0.1</code>改为<code>0.0.0.0</code></li><li>设置访问密码，将<code>#requirepass foobared</code>注释去掉，并将<code>foobared</code>改为密码。使用<code>auth password</code>进行验证</li><li>重启redis <code>systemctl restart redis_6379.service</code></li></ul></li></ol><ul><li><p>Docker部署Redis</p><ul><li><p><code>docker pull redis</code></p></li><li><p>`mkdir  -p /root/redis/redis01/conf<br>mkdir  -p /root/redis/redis01/data<br>cd /root/redis/redis01/conf</p><h1 id="下载一个redis-conf文件"><a href="#下载一个redis-conf文件" class="headerlink" title="下载一个redis.conf文件"></a>下载一个redis.conf文件</h1><p>wget <a href="http://download.redis.io/redis-stable/redis.conf">http://download.redis.io/redis-stable/redis.conf</a><br>`</p></li><li><p><code>cd ../docker run -p 6379:6379 --name hbk_redis -v $PWD/conf/redis.conf:/etc/redis/redis.conf -v $PWD/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes</code></p></li><li><p>修改redis.conf</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># bind 127.0.0.1</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"></span><br><span class="line"># protected-mode yes</span><br><span class="line">protected no</span><br><span class="line"></span><br><span class="line"># requirepass foobared</span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line">#daemon 不能是yes</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h2 id="Centos6-8安装RabbitMQ"><a href="#Centos6-8安装RabbitMQ" class="headerlink" title="Centos6.8安装RabbitMQ"></a>Centos6.8安装RabbitMQ</h2><ol><li>安装Erlang<ul><li>安装依赖包<code>yum install xmlto gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel wxBase wxGTK wxGTK-gl perl -y</code></li><li>Erlang下载<code>yum install -y erlang-19.0.4-1.el6.x86_64.rpm</code></li></ul></li><li>安装RabbitMQ</li></ol><p><code>curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash</code></p><ul><li>使用Docker部署RabbitMQ(management才有页面)<ul><li><code>docker pull rabbitmq:management</code></li><li><code>docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management</code></li><li></li></ul></li></ul><p>Ubuntu18.04更换阿里镜像</p><ol><li><p>查找源配置文件</p><p><code>find / -name sources.list</code></p></li><li><p>修改source.list</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>sudo apt-get update</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-4-5</title>
      <link href="2020/04/05/2020-4-5/"/>
      <url>2020/04/05/2020-4-5/</url>
      
        <content type="html"><![CDATA[<h2 id="460-LFU缓存"><a href="#460-LFU缓存" class="headerlink" title="460.LFU缓存"></a>460.LFU缓存</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>使用堆（优先队列）存放节点的使用频次</li><li>将频次作为map的key，每个频次对应一个节点链表，并且节点进入链表有先后顺序</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用PriorityQueue</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> </span>{</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Node&gt; cache;</span><br><span class="line">Queue&lt;Node&gt; queue;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LFUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">cache = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line"><span class="keyword">if</span> (capacity &gt; <span class="number">0</span>) {</span><br><span class="line">queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(capacity);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (!cache.containsKey(key)) {</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Node node = cache.get(key);</span><br><span class="line">node.freq++;</span><br><span class="line">node.time = time++;</span><br><span class="line">queue.remove(node);</span><br><span class="line">queue.offer(node);</span><br><span class="line"><span class="keyword">return</span> node.val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (capacity == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">Node node = cache.get(key);</span><br><span class="line"><span class="keyword">if</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">node.val = value;</span><br><span class="line">node.freq++;</span><br><span class="line">node.time = time++;</span><br><span class="line">queue.remove(node);</span><br><span class="line">queue.add(node);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">if</span> (size == capacity) {</span><br><span class="line">cache.remove(queue.peek().key);</span><br><span class="line">queue.poll();</span><br><span class="line">size--;</span><br><span class="line">}</span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(key, value, time++);</span><br><span class="line">cache.put(newNode.key, newNode);</span><br><span class="line">queue.offer(newNode);</span><br><span class="line">size++;</span><br><span class="line">}</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Node</span>&gt; </span>{</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> freq;</span><br><span class="line"><span class="keyword">int</span> time;</span><br><span class="line"></span><br><span class="line">Node(<span class="keyword">int</span> key, <span class="keyword">int</span> val, <span class="keyword">int</span> time) {</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line">freq = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>.time = time;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Node node)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> diff = freq - node.freq;</span><br><span class="line"><span class="keyword">return</span> diff != <span class="number">0</span> ? diff : time - node.time;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LFUCache obj = new LFUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用LinkedHashSet</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> </span>{</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Node&gt; cache;</span><br><span class="line">Map&lt;Integer, LinkedHashSet&lt;Node&gt;&gt; freSet;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LFUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">cache = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">freSet = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(capacity);</span><br><span class="line"><span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (!cache.containsKey(key)) {</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Node node = cache.get(key);</span><br><span class="line">freqInc(node);</span><br><span class="line"><span class="keyword">return</span> node.val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (capacity == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">Node node = cache.get(key);</span><br><span class="line"><span class="keyword">if</span> (node != <span class="keyword">null</span>) {</span><br><span class="line">node.val = value;</span><br><span class="line">freqInc(node);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">if</span> (size == capacity) {</span><br><span class="line">Node deadNode = getDeadNode();</span><br><span class="line">cache.remove(deadNode.key);</span><br><span class="line">size--;</span><br><span class="line">    }</span><br><span class="line">Node newNode = <span class="keyword">new</span> Node(key, value);</span><br><span class="line">cache.put(key, newNode);</span><br><span class="line">addNode(newNode);</span><br><span class="line">size++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Node newNode)</span> </span>{</span><br><span class="line">LinkedHashSet&lt;Node&gt; set = freSet.get(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (set == <span class="keyword">null</span>) {</span><br><span class="line">set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">}</span><br><span class="line">set.add(newNode);</span><br><span class="line">freSet.put(<span class="number">1</span>, set);</span><br><span class="line">min = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">getDeadNode</span><span class="params">()</span> </span>{</span><br><span class="line">LinkedHashSet&lt;Node&gt; set = freSet.get(min);</span><br><span class="line">Node deadNode = set.iterator().next();</span><br><span class="line">set.remove(deadNode);</span><br><span class="line"><span class="keyword">return</span> deadNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">freqInc</span><span class="params">(Node node)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> freq = node.freq;</span><br><span class="line">LinkedHashSet&lt;Node&gt; set = freSet.get(freq);</span><br><span class="line">set.remove(node);</span><br><span class="line"><span class="keyword">if</span> (freq == min &amp;&amp; set.isEmpty()) {</span><br><span class="line">min++;</span><br><span class="line">}</span><br><span class="line">node.freq++;</span><br><span class="line">LinkedHashSet&lt;Node&gt; newSet = freSet.get(freq + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (newSet == <span class="keyword">null</span>) {</span><br><span class="line">newSet = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">freSet.put(freq + <span class="number">1</span>, newSet);</span><br><span class="line">}</span><br><span class="line">newSet.add(node);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> freq = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Node(<span class="keyword">int</span> key, <span class="keyword">int</span> val) {</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解HTTP读书笔记</title>
      <link href="2020/04/05/tu-jie-http-du-shu-bi-ji/"/>
      <url>2020/04/05/tu-jie-http-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="图解HTTP"><a href="#图解HTTP" class="headerlink" title="图解HTTP"></a>图解HTTP</h1><h2 id="了解Web及网络基础"><a href="#了解Web及网络基础" class="headerlink" title="了解Web及网络基础"></a>了解Web及网络基础</h2><p>HTTP(HyperText Transfer Protocol，超文本传输协议)：</p><p>IP协议的作用是将各种数据包传送给对方，需要两个重要的条件</p><ul><li>IP地址，指明节点被分配的地址</li><li>MAC地址(Media Access Control Address)，网卡所属的固定地址</li></ul><p>ARP协议(Address Resolution Protocol)，根据通信方的IP地址反查出对应的MAC地址</p><ul><li>URI(Uniform Resource Identifier)，统一资源标识符</li><li>URL(Uniform Resource Locator)，统一资源定位符</li></ul><span id="more"></span><h2 id="简单的HTTP协议"><a href="#简单的HTTP协议" class="headerlink" title="简单的HTTP协议"></a>简单的HTTP协议</h2><p>请求报文,由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.htm</span> HTTP/1.1</span><br><span class="line">-------------------------</span><br><span class="line"><span class="attribute">Host</span>: xxx.com</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 16</span><br><span class="line">-------------------------</span><br><span class="line">name=ueno&amp;age=31</span><br></pre></td></tr></tbody></table></figure><p>响应报文，基本上由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段及实体主体构成：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">-------------------------</span><br><span class="line"><span class="attribute">Date</span>: Tue, 1. Jul 2012 06:50:15 GMT</span><br><span class="line"><span class="attribute">Content-Length</span>: 362</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br><span class="line">-------------------------</span><br><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>HTTP/1.1是无状态协议，为了实现保持状态功能，引入Cookie技术</p><p>Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态：</p><p>Cookie根据服务器端发送的响应报文内的叫做Set-Cookie的首部字段信息，通知客户端保存Cookie，当客户端下次再往服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发出。服务端发现客户端的Cookie后，会检查是从哪一个客户端发送的请求，对比服务器上的记录，得到之前的状态信息</p><p>1.请求报文（没有Cookie信息的状态）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/reader</span> HTTP/1.1</span><br><span class="line">-------------------------</span><br><span class="line"><span class="attribute">Host</span>: xxx.com</span><br><span class="line">*首部字段内没有Cookie的相关信息</span><br></pre></td></tr></tbody></table></figure><p>2.响应报文（服务器端生成Cookie信息）</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line">-------------------------</span><br><span class="line"><span class="attribute">Date</span>: Tue, 12. Jul 2012 07:12:20 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache</span><br><span class="line">&lt;Set-Cookie: sid=1544841145213486; path=/; expires=Wed,10-Oct-12 07:12:20&gt;</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain; charset=UTF-8</span><br></pre></td></tr></tbody></table></figure><p>3.请求报文（自动发送保存的Cookie信息）</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/image</span> HTTP/1.1</span><br><span class="line">-------------------------</span><br><span class="line"><span class="attribute">Host</span>: xxx.com</span><br><span class="line"><span class="attribute">Cookie</span>: sid=1544841145213486</span><br></pre></td></tr></tbody></table></figure><h2 id="HTTP报文内的HTTP信息"><a href="#HTTP报文内的HTTP信息" class="headerlink" title="HTTP报文内的HTTP信息"></a>HTTP报文内的HTTP信息</h2><p>HTTP报文，用于HTTP协议交互的信息称为HTTP报文，大致分为报文首部和报文主体（不一定有报文主体）</p><p>请求报文和响应报文结构：</p><p><img src="F:\yueluo\source\_posts\图解HTTP读书笔记\请求报文和响应报文结构.png" alt="请求报文和响应报文结构" style="zoom:50%;"></p><p>请求报文和响应报文实例：</p><p><img src="F:\yueluo\source\_posts\图解HTTP读书笔记\请求报文和响应报文实例.png" alt="请求报文和响应报文实例"></p><ul><li>请求行，包含用于请求的方法，请求URI和HTTP版本</li><li>状态行，包含表明响应结果的状态码，原因短语和HTTP版本</li><li>首部字段，包含表示请求和响应的各种条件和属性的各类首部，一般有通用首部、请求首部、响应首部和实体首部四种</li><li>其他，可能包含HTTP的RFC里未定义的首部（Cookie等）</li></ul><p>报文主体与实体主体的差异</p><ul><li>报文（message），HTTP通信的基本单位，由8位组字节流组成，通过HTTP通信传输</li><li>实体（entity），作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成</li></ul><p>通常，报文主体等于实体主体，只有当传输中进行编码操作时，实体主体的内容发生变化，才导致实体主体和报文主体产生差异</p><p>常用的内容编码：</p><ul><li>gzip(GUN zip)</li><li>compress(UNIX系统的标准压缩)</li><li>deflate(zlib)</li><li>identity(不进行编码)</li></ul><p>实体主体分块发送的分块传输编码(Chunked Tranfer Coding)</p><p>MIME(Multipurpose Internet Mail Extensions，多用途因特网邮件扩展)</p><p>内容协商有服务器驱动协商、客户端驱动协商和透明协商三种类型</p><ul><li>Accept</li><li>Accept-Charset</li><li>Accept-Encoding</li><li>Accept-Language</li><li>Content-Language</li></ul><h2 id="返回结果的HTTP状态码"><a href="#返回结果的HTTP状态码" class="headerlink" title="返回结果的HTTP状态码"></a>返回结果的HTTP状态码</h2><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/状态码的类别.png" alt="状态码的类别"></p><ul><li>2XX成功<ul><li>200 OK</li><li>204 No Content(没有资源可返回)</li><li>206 Partial Content(对资源某一部分的请求)</li></ul></li><li>3XX重定向<ul><li>301 Moved Permanently(永久性重定向)</li><li>302 Found(临时性重定向)</li><li>303 See Other()</li><li>304 Not Modified</li><li>307 Temporary Redirect(临时重定向)</li></ul></li><li>4XX客户端错误<ul><li>400 Bad Request</li><li>401 Unauthorized</li><li>403 Forbidden</li><li>404 Not Found</li></ul></li><li>5XX服务器错误<ul><li>500 Internal Server Error</li><li>503 Service Unavailable</li></ul></li></ul><h2 id="与HTTP协作的Web服务器"><a href="#与HTTP协作的Web服务器" class="headerlink" title="与HTTP协作的Web服务器"></a>与HTTP协作的Web服务器</h2><p>通信数据转发程序：</p><ul><li><p>代理</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/代理.png" alt="代理"></p><p>代理是一种由转发功能的应用程序</p><p>使用代理服务器的理由，利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的</p><p>分类：</p><ul><li>缓存代理，代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上</li><li>透明代理，转发请求或响应时，不对报文做任何加工，反之，为非透明代理</li></ul></li><li><p>网关</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/网关.png" alt="网关"></p><p>网关是转发其他服务器通信数据的服务器</p><p>利用网关可以由HTTP请求转化为其他协议通信</p></li><li><p>隧道</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/隧道.png" alt="隧道"></p><p>隧道在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序</p><p>隧道的目的是确保客户端能与服务器进行安全的通信</p></li></ul><h2 id="HTTP首部"><a href="#HTTP首部" class="headerlink" title="HTTP首部"></a>HTTP首部</h2><p>HTTP请求报文，由方法、URI、HTTP版本、HTTP首部字段等部分构成</p><h2 id="IP地址、子网掩码、网关"><a href="#IP地址、子网掩码、网关" class="headerlink" title="IP地址、子网掩码、网关"></a>IP地址、子网掩码、网关</h2><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/IP、子网掩码、网关的解释.png" alt="IP、子网掩码、网关的解释"></p><p>IP地址 = 网络地址 + 主机地址</p><p>以<code>IP:192.168.100.1</code>为例:</p><ul><li>网络地址（相当于街道地址）：192.168.100.0</li><li>主机地址（相当于门牌号）：0.0.0.1</li><li>IP地址（相当于住户地址）：网络地址 + 主机地址 = 192.168.100.1</li><li>广播地址： 192.168.100.255</li></ul><p>计算网络地址，需要子网掩码</p><ul><li>情况一，可以正常通讯<ul><li>主机A：<code>IP：192.168.0.1,子网掩码：255.255.255.0</code></li><li>主机B：<code>IP：192.168.0.200,子网掩码：255.255.255.0</code></li></ul></li><li>情况二，不能通讯<ul><li>主机A：<code>IP：192.168.0.1,子网掩码：255.255.255.0</code></li><li>主机B：<code>IP：192.168.1.200,子网掩码：255.255.255.0</code></li></ul></li><li>情况三，不能通讯<ul><li>主机A：<code>IP：192.168.0.1,子网掩码：255.255.255.192</code></li><li>主机B：<code>IP：192.168.0.200,子网掩码：255.255.255.192</code></li></ul></li></ul><p>计算过程，将IP地址和子网掩码都换算成二进制，然后进行与运算，结果就是网络地址</p><p>子网掩码是用于判断任意两台计算机的IP地址是否属于同一子网络的根据</p><p>网关，连接两个网络</p><blockquote><p>参考书籍：图解HTTP</p><p>参考文章：<a href="https://blog.csdn.net/qq_36090419/article/details/80505140">https://blog.csdn.net/qq_36090419/article/details/80505140</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 复试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统原理知识点整理</title>
      <link href="2020/04/05/shu-ju-ku-xi-tong-yuan-li-zhi-shi-dian-zheng-li/"/>
      <url>2020/04/05/shu-ju-ku-xi-tong-yuan-li-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库系统原理"><a href="#数据库系统原理" class="headerlink" title="数据库系统原理"></a>数据库系统原理</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务指满足<code>ACID</code>特性的一组操作，可以通过<code>Commit</code>提交一个事务，也可以使用<code>Rollback</code>进行回滚 。</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/事务.png" alt="1583059258400"></p><span id="more"></span><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a><code>ACID</code></h3><ol><li>原子性(<code>Atomicity</code>)：事务是不可分割的最小单元，要么所有操作全部<code>Commit</code>成功，要么全部失败<code>Rollback</code></li><li>一致性(<code>Consistency</code>)：数据库在事务执行前后保持一致性状态。在一致性状态下，所有事务对同一数据的读取结果都是相同的</li><li>隔离性(<code>Isolation</code>)：一个事务所做修改在最终提交之前，对其他事务不可见</li><li>持久性(<code>Durability</code>)：一旦事务提交，则所做的修改将会永远保存到数据库中</li></ol><ul><li>只有满足一致性，事务执行结果才能正确</li><li>无并发情况下，只要满足原子性，就可以满足一致性</li><li>并发情况下，多个事务并发执行，需要满足原子性和隔离性，才能满足一致性</li><li>事务持久性是为了应对系统崩溃的情况</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/ACID关系.png" alt="1583061131652"></p><h2 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h2><p>在并发环境下，事务的隔离性难以保证，会出现很多并发一致性问题</p><ol><li>丢失修改：<code>T1</code>和<code>T2</code>都修改了一个数据<code>A</code>，<code>T1</code>先修改<code>A=10</code>，<code>T2</code>后修改<code>A=20</code>，<code>T2</code>的修改会覆盖<code>T1</code>的修改。</li><li>读脏数据：<code>T1</code>修改了数据<code>A</code>，<code>T2</code>随后读取了数据<code>A</code>。若<code>T1</code>撤销了此次修改，<code>T2</code>读取的数据就是脏数据。</li><li>不可重复读：<code>T1</code>读取了数据<code>A</code>，<code>T2</code>随后修改了数据<code>A</code>。若<code>T1</code>再次读取数据<code>A</code>，两次读取结果不同。</li><li>幻影读：<code>T1</code>读取了某个范围的数据，<code>T2</code>随后在这个范围内插入数据，若<code>T1</code>再次读取这个范围内数据，两次读取结果不同。</li></ol><blockquote><p>不可重复读与幻读相似，区别在于：不可重复读的重点在于修改，而幻读的重点在于新增或删除</p></blockquote><h2 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h2><h3 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h3><ul><li>行级锁</li><li>表级锁</li></ul><p>锁定的数据量越少，发生锁争用的可能就越小，系统并发程度就越高。</p><p>加锁需要消耗资源，锁的各种操作（如获取锁、释放锁以及检查锁状态）都会增加系统开销，封锁粒度越小，系统开销越大。</p><h3 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h3><ul><li>读写锁<ul><li>互斥锁（<code>Exclusive</code>），简写为<code>X</code>锁，又称写锁</li><li>共享锁（<code>Shared</code>），简写为<code>S</code>锁，又称读锁</li><li>一个事务对数据对象<code>A</code>加了<code>X</code>锁，可以对<code>A</code>进行读取和更新。加锁期间其他事务不能对<code>A</code>加任何锁</li><li>一个事务对数据对象<code>A</code>加了<code>S</code>锁，可以对<code>A</code>进行读取操作，但是不能进行更新操作。加锁期间其他事务能对<code>A</code>加<code>S</code>锁，但是不能加<code>X</code>锁</li></ul></li><li>意向锁<ul><li>在存在行级锁和表级锁的情况下，事务<code>T</code>想要对表<code>A</code>加<code>X</code>锁，就需要先检测是否存在其他事务对表<code>A</code>或者表<code>A</code>中的任意一行加了锁，对<code>A</code>的每一行都检测一次，非常耗时</li><li>意向锁在<code>X/S</code>锁之上引入<code>IX/IS</code>，<code>IX/IS</code>都是表锁，用来表示一个事务想要在表中的某个数据行上加了<code>X</code>锁或者<code>S</code>锁，有如下规定：<ul><li>一个事务获得某个数据行对象的<code>S</code>锁之前，必须先获得表的<code>IS</code>锁或者更强的锁</li><li>一个事务获得某个数据行对象的<code>X</code>锁之前，必须先获得表的<code>IX</code>锁</li></ul></li></ul></li><li>任意<code>IX/IS</code>锁之间兼容，它们只表示想要对表加锁，而不是真正的加锁</li></ul><h3 id="封锁协议"><a href="#封锁协议" class="headerlink" title="封锁协议"></a>封锁协议</h3><ul><li><p>三级封锁协议</p><ul><li><p>一级封锁协议</p><p>事务<code>T</code>想要修改数据<code>A</code>时必须加<code>X</code>锁，直到<code>T</code>结束才释放锁，可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，事务的修改不会被覆盖</p></li><li><p>二级封锁协议</p><p>在一级的基础上，要求读取数据<code>A</code>时必须加<code>S</code>锁，读取完释放<code>S</code>锁，可以解决读脏数据问题，因为根据一级封锁协议，数据加了<code>X</code>锁，其他事务就不能加<code>S</code>锁，也就不能读入数据</p></li><li><p>三级封锁协议</p><p>在二级的基础上，要求读取数据<code>A</code>时必须加<code>S</code>锁，直到事务结束才释放<code>S</code>锁，可以解决不可重复读问题，因为读取<code>A</code>时，其他事务不能对数据<code>A</code>加<code>X</code>锁，避免在读期间数据发生变化</p></li></ul></li><li><p>两段锁协议</p><p>加锁和解锁分为两个阶段进行</p></li></ul><blockquote><p><code>MySQL</code>实现事务<code>ACID</code>特性的方式总结：</p><ul><li>原子性：使用<code>undo log</code>来实现，如果事务执行过程中出错或者用户执行了<code>rollback</code>，系统通过<code>undo log</code>日志返回事务开始的状态</li><li>持久性：使用<code>redo log</code>来实现，只要<code>redo log</code>日志持久化了，当系统崩溃，可以通过<code>redo log</code>把数据恢复</li><li>隔离性：通过锁以及<code>MVCC</code>来实现</li><li>一致性：通过回滚、恢复以及并发情况下的隔离性从而实现一致性</li></ul></blockquote><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li><p>未提交读（<code>READ UNCOMMITED</code>）</p><p>事务中的修改，即使没有提交，对其它事务也是可见的</p></li><li><p>提交读（<code>READ COMMITED</code>）</p><p>一个事务所做修改在提交之前对其它事务不可见</p></li><li><p>可重复读（<code>REPEATABLE READ</code>）</p><p>保证在同一个事务中多次读取同一数据的结果是一样的</p></li><li><p>可串行化（<code>SERIALIZABLE</code>）</p><p>强制事务串行执行，不会出现并发一致性问题，需要加锁保证同一时间只有一个事务执行</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/隔离级别能解决的并发一致性问题.png" alt="1583138319664"></p><h2 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h2><h2 id="Next-Key-Locks"><a href="#Next-Key-Locks" class="headerlink" title="Next-Key Locks"></a>Next-Key Locks</h2><h2 id="关系数据库设计理论"><a href="#关系数据库设计理论" class="headerlink" title="关系数据库设计理论"></a>关系数据库设计理论</h2><ul><li><p>函数依赖</p></li><li><p>异常</p><ul><li>冗余数据</li><li>修改异常</li><li>删除异常</li><li>插入异常</li></ul></li><li><p>范式</p><p>范式理论是为了解决上述四种异常</p><p>高级别范式依赖于低级别范式，<code>1NF</code>是最低级别的范式</p><ul><li><p>第一范式（<code>1NF</code>）</p><p>属性不可分</p></li><li><p>第二范式（<code>2NF</code>）</p><p>每个非主属性完全函数依赖于键码</p><p>可以通过分解来满足</p><p>分解前</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/2NF-1.png" alt="1583139160746"></p><p>以上学生课程关系中，{Sno，Cname}为键码，有如下函数依赖：</p><ul><li>Sno -&gt; Sname,Sdept</li><li>Sdept -&gt; Mname</li><li>Sno ，Cname -&gt; Grade</li></ul><p>Grade完全函数依赖于键码，没有任何冗余数据</p><p>Sname,Sdept,Mname部分依赖于键码，当一个学生选修多门课时，就会出现冗余</p><p>分解后</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/2NF-2.png" alt="1583139435346"></p><p>函数依赖：</p><ul><li>Sno -&gt; Sname,Sdept</li><li>Sdept -&gt; Mname</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/2NF-3.png" alt="1583139483382"></p><p>函数依赖：</p><ul><li>Sno,Cname -&gt; Grade</li></ul></li><li><p>第三范式（<code>3NF</code>）</p><p>非主属性不传递函数依赖于键码</p><p>上面<code>关系-1</code>中存在如下传递函数依赖</p><ul><li>Sno -&gt; Sdept -&gt; Mname</li></ul><p>可以进行分解：</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/3NF-1.png" alt="1583139714931"></p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/3NF-2.png" alt="1583139749745"></p></li></ul></li></ul><h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><p>Entity-Relationship，由实体、属性、联系组成</p><ul><li><p>实体的三种联系</p><p>包含一对一、一对多、多对多</p><ul><li>若A到B是一对多关系，一个带箭头的线段指向B</li><li>若A到B是一对一，两个带箭头的线段</li><li>若A到B是多对多，两个不带箭头的线段</li></ul></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引使用的场景"><a href="#索引使用的场景" class="headerlink" title="索引使用的场景"></a>索引使用的场景</h3><ul><li>对于非常小的表，大部分情况下简单的全表扫描比建立索引更高效</li><li>对于中大型的表，索引非常有效</li><li>对于特大的表，建立和维护索引的代价会变大，需要用到一种技术直接区分出需要查询的一组数据而不是一条条记录的匹配，例如使用分区技术</li></ul><h3 id="索引的原则"><a href="#索引的原则" class="headerlink" title="索引的原则"></a>索引的原则</h3><ul><li>选择唯一性索引</li><li>为经常需要排序、分组和联合操作的字段建立索引</li><li>为经常作为查询条件的字段建立索引</li><li>限制索引的数目</li><li>尽量使用数据量少的索引</li><li>尽量使用前缀来索引</li><li>删除不再使用或者很少使用的索引</li><li>最左前缀匹配原则</li><li>尽量选择区分度高的列作为索引</li><li>索引列不能参与计算，带函数的查询不参与索引</li><li>尽量的扩展索引，不要新建索引</li></ul><h3 id="B-Tree原理"><a href="#B-Tree原理" class="headerlink" title="B Tree原理"></a>B Tree原理</h3><ul><li>B-Tree</li><li>B+Tree</li></ul><h2 id="MySQL事物实现原理"><a href="#MySQL事物实现原理" class="headerlink" title="MySQL事物实现原理"></a>MySQL事物实现原理</h2><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><blockquote><p>参考文章：</p><p><a href="https://cyc2018.github.io/CS-Notes/#/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86">cyc2018的数据库系统原理</a></p><p><a href="https://frank-lam.github.io/fullstack-tutorial/#/MySQL">https://frank-lam.github.io/fullstack-tutorial/#/MySQL</a></p><p>朱小厮的博客：<a href="https://mp.weixin.qq.com/s?__biz=MzU0MzQ5MDA0Mw==&amp;mid=2247489849&amp;idx=1&amp;sn=cbac2a6ad99ac466f2ba8d69507fd2fe&amp;chksm=fb0bf3adcc7c7abb565a9865e14b357888f7b7b78874b74c18bfdc5a4278ec2503b258c27730&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1586483972757&amp;sharer_shareid=e3463ca9628feab22dbf5fc497900b41&amp;key=6d5af8aaa0ed9df559207539055a6813af266c37302309a632bc6c07968283391f554512599ed10c1beaa097ded2ff1a0266e8ee7fddcbe20266483a50b219f2b55714f8f7705908e16de18aaad16cc7&amp;ascene=1&amp;uin=MzM1NjEzNzAyNA%3D%3D&amp;devicetype=Windows+10&amp;version=62080079&amp;lang=zh_CN&amp;exportkey=A27MC6usOkCWf1X%2BX3TqWbo%3D&amp;pass_ticket=CGHJEHpFsnbf0i0YNRDqRwSZLKgGqSn91iH6%2FFs2FB4MvnptwIs6DIrYZFOlG6SX">分布式事务科普</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复试 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-4-4</title>
      <link href="2020/04/04/2020-4-4/"/>
      <url>2020/04/04/2020-4-4/</url>
      
        <content type="html"><![CDATA[<h2 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42.接雨水"></a>42.接雨水</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>暴力法，遍历每一列，找到左右边的最高点，当<code>min(left,right)&gt;height[i]</code>时可以存下雨水</p></li><li><p>DP，将每一列的左右最大高度存起来</p><script type="math/tex; mode=display">left[i] = max(left[i-1],height[i-1])\\right[i] = max(right[i+1],height[i+1])</script></li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = height.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++) {</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) {</span><br><span class="line"><span class="keyword">if</span> (height[j] &gt; right) {</span><br><span class="line">right = height[j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) {</span><br><span class="line"><span class="keyword">if</span> (height[j] &gt; left) {</span><br><span class="line">left = height[j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> min = Math.min(left, right);</span><br><span class="line"><span class="keyword">if</span> (min &gt; height[i]) {</span><br><span class="line">result = result + (min - height[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//DP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = height.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++) {</span><br><span class="line">left[i] = Math.max(left[i - <span class="number">1</span>], height[i - <span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">right[i] = Math.max(right[i + <span class="number">1</span>], height[i + <span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++) {</span><br><span class="line"><span class="keyword">int</span> min = Math.min(left[i], right[i]);</span><br><span class="line"><span class="keyword">if</span> (min &gt; height[i]) {</span><br><span class="line">result = result + (min - height[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1361-验证二叉树"><a href="#1361-验证二叉树" class="headerlink" title="1361.验证二叉树"></a>1361.验证二叉树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DFS，首先统计每个节点的入度，然后找到入度为0的点作为根节点，深度遍历每个节点，当存在未访问节点时不为二叉树</li><li>并查集，主要判断两点：1.该节点是否已经有父节点；2.该节点和父节点是否已经在一个并查集中</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateBinaryTreeNodes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] leftChild, <span class="keyword">int</span>[] rightChild)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] indegree = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">if</span> (leftChild[i] != -<span class="number">1</span>) {</span><br><span class="line">indegree[leftChild[i]]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (rightChild[i] != -<span class="number">1</span>) {</span><br><span class="line">indegree[rightChild[i]]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (indegree[i] &gt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> root = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">if</span> (indegree[i] == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">if</span> (root != -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">root = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">dfs(root, visited, leftChild, rightChild);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">boolean</span> flag : visited) {</span><br><span class="line"><span class="keyword">if</span> (!flag) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span>[] leftChild, <span class="keyword">int</span>[] rightChild)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">visited[root] = <span class="keyword">true</span>;</span><br><span class="line">dfs(leftChild[root], visited, leftChild, rightChild);</span><br><span class="line">dfs(rightChild[root], visited, leftChild, rightChild);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//并查集</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateBinaryTreeNodes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] leftChild, <span class="keyword">int</span>[] rightChild)</span> </span>{</span><br><span class="line">UnionFind uf = <span class="keyword">new</span> UnionFind(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">if</span> (leftChild[i] != -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (uf.find(leftChild[i]) != leftChild[i] || uf.isConnected(i, leftChild[i])) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">uf.union(i, leftChild[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (rightChild[i] != -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (uf.find(rightChild[i]) != rightChild[i] || uf.isConnected(i, rightChild[i])) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">uf.union(i, rightChild[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> uf.count == <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">            parent[p] = parent[parent[p]];</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;</span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="785-判断二分图"><a href="#785-判断二分图" class="headerlink" title="785.判断二分图"></a>785.判断二分图</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DFS+染色法，深度遍历每个节点，将其邻节点颜色设置为反</li><li>BFS+染色法，广度遍历每个节点，将其邻节点颜色设置为反</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = graph.length;</span><br><span class="line"><span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">Arrays.fill(colors, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (colors[i] == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (!dfs(i, graph, colors, <span class="number">0</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] colors, <span class="keyword">int</span> color)</span> </span>{</span><br><span class="line">colors[start] = color;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : graph[start]) {</span><br><span class="line"><span class="keyword">if</span> (colors[v] == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (!dfs(v, graph, colors, color ^ <span class="number">1</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (colors[v] == colors[start]) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//使用栈代替递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = graph.length;</span><br><span class="line"><span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">Arrays.fill(colors, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (colors[i] == -<span class="number">1</span>) {</span><br><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(i);</span><br><span class="line">colors[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> node = stack.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : graph[node]) {</span><br><span class="line"><span class="keyword">if</span> (colors[v] == -<span class="number">1</span>) {</span><br><span class="line">stack.push(v);</span><br><span class="line">colors[v] = colors[node] ^ <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (colors[v] == colors[node]) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = graph.length;</span><br><span class="line"><span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">Arrays.fill(colors, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (colors[i] == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (!bfs(i, graph, colors, <span class="number">0</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] colors)</span> </span>{</span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(start);</span><br><span class="line">colors[start] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> node = queue.poll();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : graph[node]) {</span><br><span class="line"><span class="keyword">if</span> (colors[v] == -<span class="number">1</span>) {</span><br><span class="line">queue.add(v);</span><br><span class="line">colors[v] = colors[node] ^ <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (colors[v] == colors[node]) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="310-最小高度树"><a href="#310-最小高度树" class="headerlink" title="310.最小高度树"></a>310.最小高度树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>拓扑排序，计算每点的入度，逐步将度为1的节点删除</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findMinHeightTrees</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges)</span> </span>{</span><br><span class="line">List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">result.add(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] inDegree = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">map.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] edge : edges) {</span><br><span class="line">inDegree[edge[<span class="number">0</span>]]++;</span><br><span class="line">inDegree[edge[<span class="number">1</span>]]++;</span><br><span class="line">map.get(edge[<span class="number">0</span>]).add(edge[<span class="number">1</span>]);</span><br><span class="line">map.get(edge[<span class="number">1</span>]).add(edge[<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">if</span> (inDegree[i] == <span class="number">1</span>) {</span><br><span class="line">queue.add(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line"><span class="keyword">int</span> v = queue.poll();</span><br><span class="line">result.add(v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e : map.get(v)) {</span><br><span class="line"><span class="keyword">if</span> (--inDegree[e] == <span class="number">1</span>) {</span><br><span class="line">queue.add(e);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分图</title>
      <link href="2020/04/04/er-fen-tu/"/>
      <url>2020/04/04/er-fen-tu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>二分图，又叫二部图，是图论中的一种特殊模型。对于一个无向图<code>G=(V,E)</code>，<code>G</code>的顶点集<code>V</code>划分为两个互不相交的子集<code>A</code>和<code>B</code>，并且边集<code>E</code>中的每一条边连接的两个顶点一个在<code>A</code>中，一个在<code>B</code>中，这样的图称为二分图。</p></blockquote><span id="more"></span><p><strong>性质：</strong></p><ul><li>若将两个集合中的点分别染成黑色和白色，则二分图中的每一条边一定是连接一个黑点和一个白点</li><li>二分图不存在长度为奇的环</li></ul><p><strong>判定：</strong>染色法</p><p><strong>举个栗子：🌰</strong></p><p><a href="https://leetcode-cn.com/problems/is-graph-bipartite/">LeetCode 785.判断二分图</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BFS，层次遍历图，将节点的邻节点的颜色设为相反，当邻节点颜色冲突时返回false</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = graph.length;</span><br><span class="line"><span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">Arrays.fill(colors, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (colors[i] == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (!dfs(i, graph, colors, <span class="number">0</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] colors)</span> </span>{</span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(start);</span><br><span class="line">colors[start] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> node = queue.poll();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : graph[node]) {</span><br><span class="line"><span class="keyword">if</span> (colors[v] == -<span class="number">1</span>) {</span><br><span class="line">queue.add(v);</span><br><span class="line">colors[v] = colors[node] ^ <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (colors[v] == colors[node]) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//DFS，深度遍历图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = graph.length;</span><br><span class="line"><span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">Arrays.fill(colors, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (colors[i] == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (!dfs(i, graph, colors, <span class="number">0</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] colors, <span class="keyword">int</span> color)</span> </span>{</span><br><span class="line">colors[start] = color;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : graph[start]) {</span><br><span class="line"><span class="keyword">if</span> (colors[v] == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (!dfs(v, graph, colors, color ^ <span class="number">1</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (colors[v] == colors[start]) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用栈模拟深度遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = graph.length;</span><br><span class="line"><span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">Arrays.fill(colors, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (colors[i] == -<span class="number">1</span>) {</span><br><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(i);</span><br><span class="line">colors[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> node = stack.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : graph[node]) {</span><br><span class="line"><span class="keyword">if</span> (colors[v] == -<span class="number">1</span>) {</span><br><span class="line">stack.push(v);</span><br><span class="line">colors[v] = colors[node] ^ <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (colors[v] == colors[node]) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>参考文章：<a href="https://oi-wiki.org/graph/bi-graph/">https://oi-wiki.org/graph/bi-graph/</a></p><p>参考题解：<a href="https://leetcode-cn.com/problems/is-graph-bipartite/solution/pan-duan-er-fen-tu-by-josey11/">https://leetcode-cn.com/problems/is-graph-bipartite/solution/pan-duan-er-fen-tu-by-josey11/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-4-3</title>
      <link href="2020/04/03/2020-4-3/"/>
      <url>2020/04/03/2020-4-3/</url>
      
        <content type="html"><![CDATA[<h2 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8.字符串转换整数(atoi)"></a>8.字符串转换整数(atoi)</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>主要在于判断数值是否溢出，使用<code>result&gt;(Integer.MAX_VALUE-digit)/10</code>来判断溢出</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>{</span><br><span class="line"><span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line"><span class="keyword">int</span> len = chars.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt; len &amp;&amp; chars[index] == <span class="string">' '</span>) {</span><br><span class="line">index++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (index == len) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (chars[index] == <span class="string">'-'</span>) {</span><br><span class="line">negative = <span class="keyword">true</span>;</span><br><span class="line">index++;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (chars[index] == <span class="string">'+'</span>) {</span><br><span class="line">index++;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (!Character.isDigit(chars[index])) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt; len &amp;&amp; Character.isDigit(chars[index])) {</span><br><span class="line"><span class="keyword">int</span> digit = chars[index] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (result &gt; (Integer.MAX_VALUE - digit) / <span class="number">10</span>) {</span><br><span class="line"><span class="keyword">return</span> negative ? Integer.MIN_VALUE : Integer.MAX_VALUE;</span><br><span class="line">}</span><br><span class="line">result = result * <span class="number">10</span> + digit;</span><br><span class="line">index++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> negative ? -result : result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-4-2</title>
      <link href="2020/04/02/2020-4-2/"/>
      <url>2020/04/02/2020-4-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1267-统计参与通信的服务器"><a href="#1267-统计参与通信的服务器" class="headerlink" title="1267.统计参与通信的服务器"></a>1267.统计参与通信的服务器</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>统计每行和每列的服务器数量，只要<code>grid[i][j]</code>处，第<code>i</code>行和第<code>j</code>列存在的服务器数量<code>&gt;1</code>就可以通信。</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countServers</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">int</span>[] row = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line"><span class="keyword">int</span>[] col = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) {</span><br><span class="line">row[i]++;</span><br><span class="line">col[j]++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="number">1</span> &amp;&amp; (row[i] &gt; <span class="number">1</span> || col[j] &gt; <span class="number">1</span>)) {</span><br><span class="line">result++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="841-钥匙和房间"><a href="#841-钥匙和房间" class="headerlink" title="841.钥匙和房间"></a>841.钥匙和房间</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>BFS</li><li>DFS</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canVisitAllRooms</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms)</span> </span>{</span><br><span class="line"><span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rooms.size()];</span><br><span class="line">visited[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">Stack&lt;List&lt;Integer&gt;&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">stack.push(rooms.get(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">List&lt;Integer&gt; list = stack.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : list) {</span><br><span class="line"><span class="keyword">if</span> (!visited[num]) {</span><br><span class="line">visited[num] = <span class="keyword">true</span>;</span><br><span class="line">stack.push(rooms.get(num));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">boolean</span> b : visited) {</span><br><span class="line"><span class="keyword">if</span> (!b) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canVisitAllRooms</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms)</span> </span>{</span><br><span class="line"><span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rooms.size()];</span><br><span class="line">visited[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">Queue&lt;List&lt;Integer&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(rooms.get(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">List&lt;Integer&gt; list = queue.poll();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : list) {</span><br><span class="line"><span class="keyword">if</span> (!visited[num]) {</span><br><span class="line">visited[num] = <span class="keyword">true</span>;</span><br><span class="line">queue.add(rooms.get(num));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">boolean</span> b : visited) {</span><br><span class="line"><span class="keyword">if</span> (!b) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="289-生命游戏"><a href="#289-生命游戏" class="headerlink" title="289.生命游戏"></a>289.生命游戏</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>设置额外的状态<ul><li><code>grid[i][j]==1</code>并且<code>sum&lt;2||sum&gt;3</code>时，设置<code>grid[i][j]=-1</code>表示之前存活，现在死亡</li><li><code>grid[i][j]==0</code>并且<code>sum==3</code>时，设置<code>grid[i][j]=2</code>表示之前死亡，现在存活</li><li>每次遍历时要考虑<code>grid[i][j]==1</code>和<code>grid[i][j]==-1</code>的情况，因为这两种情况在上个状态是存活的</li></ul></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gameOfLife</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = board.length;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] directions = <span class="keyword">new</span> <span class="keyword">int</span>[][]{{-<span class="number">1</span>, <span class="number">0</span>}, {-<span class="number">1</span>, -<span class="number">1</span>}, {-<span class="number">1</span>, <span class="number">1</span>}, {<span class="number">0</span>, <span class="number">1</span>}, {<span class="number">0</span>, -<span class="number">1</span>}, {<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">1</span>, -<span class="number">1</span>}, {<span class="number">1</span>, <span class="number">1</span>}};</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++) {</span><br><span class="line"><span class="keyword">int</span> newX = i + directions[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = j + directions[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &lt; n &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; (board[newX][newY] == <span class="number">1</span>||board[newX][newY] == -<span class="number">1</span>)) {</span><br><span class="line">sum += <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">1</span> &amp;&amp; (sum &lt; <span class="number">2</span> || sum &gt; <span class="number">3</span>)) {</span><br><span class="line">board[i][j] = -<span class="number">1</span>;<span class="comment">//开始存活，后来死亡</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="number">0</span> &amp;&amp; sum == <span class="number">3</span>) {</span><br><span class="line">board[i][j] = <span class="number">2</span>;<span class="comment">//复活</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (board[i][j] &gt; <span class="number">0</span>) {</span><br><span class="line">board[i][j] = <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">board[i][j] = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="990-等式方程的可满足性"><a href="#990-等式方程的可满足性" class="headerlink" title="990.等式方程的可满足性"></a>990.等式方程的可满足性</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>并查集</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equationsPossible</span><span class="params">(String[] equations)</span> </span>{</span><br><span class="line">UnionFind uf = <span class="keyword">new</span> UnionFind(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">for</span> (String s : equations) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(<span class="number">1</span>) == <span class="string">'='</span>) {</span><br><span class="line"><span class="keyword">int</span> p = s.charAt(<span class="number">0</span>) - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> q = s.charAt(<span class="number">3</span>) - <span class="string">'a'</span>;</span><br><span class="line">uf.union(p, q);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (String s : equations) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(<span class="number">1</span>) == <span class="string">'!'</span>) {</span><br><span class="line"><span class="keyword">int</span> p = s.charAt(<span class="number">0</span>) - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> q = s.charAt(<span class="number">3</span>) - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (uf.isConnected(p, q)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="comment">//存放第i节点的父节点索引</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">            <span class="comment">//两步一跳</span></span><br><span class="line">            parent[p] = parent[parent[p]];</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="comment">//此时已经在同一个分量中</span></span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;</span><br><span class="line"><span class="comment">//或者parent[pRoot]=qRoot;</span></span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识点整理</title>
      <link href="2020/04/02/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li/"/>
      <url>2020/04/02/ji-suan-ji-wang-luo-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络复习"><a href="#计算机网络复习" class="headerlink" title="计算机网络复习"></a>计算机网络复习</h1><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/计算机网络模型.png" alt="计算机网络模型"></p><span id="more"></span><p><strong>应用层</strong>：提供用户接口，如客户端程序和服务器程序，数据单位为报文。</p><p><strong>传输层</strong>：提供进程间的通用数据传输服务，包括两种协议：</p><ul><li><strong>TCP</strong>：传输控制协议，提供面向连接、可靠的数据传输服务，单位为报文段。</li><li><strong>UDP</strong>：用户数据报协议，提供无连接、尽最大努力的数据传输服务（不保证数据传输的可靠性），单位为用户数据报。</li><li><strong>TCP</strong>注意提供完整性服务，<strong>UDP</strong>主要提供及时性服务。</li></ul><p><strong>网络层</strong>：为主机间提供数据传输服务，将传输层的报文段或用户数据报封装成分组，负责选择最佳路径，规划IP地址，单位是分组（又称数据报）。</p><p><strong>数据链路层</strong>：不同网络类型，发送数据的机制不同，数据链路层将数据包封装成在不同网络中传输的帧，单位是帧。</p><p><strong>物理层</strong>：物理层解决如何再连接各种计算机的传输媒体上传输数据比特流，单位是比特。</p><p><strong>表示层</strong>：数据压缩、加密以及数据描述。应用程序不必担心再各台主机中存储的内部格式（二进制、ASCII）不同的问题。</p><p><strong>会话层</strong>：建立会话，如session认证，断点续传。</p><p><strong>路由器</strong>：最下三层协议。</p><p><strong>交换机</strong>：最下两层协议。</p><p><strong>TCP/IP四层模型</strong>：将<strong>数据链路层</strong>和<strong>物理层</strong>合并为<strong>网络接口层</strong></p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP和UDP的特点"><a href="#TCP和UDP的特点" class="headerlink" title="TCP和UDP的特点"></a>TCP和UDP的特点</h3><ul><li><strong>用户数据报协议UDP</strong>：无连接，无拥塞机制、面向报文。如视频传输、实时通信。</li><li><strong>传输控制协议TCP</strong>：面向连接、可靠、有流量控制、有拥塞控制，面向字节流。一对一。</li></ul><h3 id="TCP如何保证可靠传输"><a href="#TCP如何保证可靠传输" class="headerlink" title="TCP如何保证可靠传输"></a>TCP如何保证可靠传输</h3><ol><li>应用数据被分割为数据块</li><li>TCP给每个包进行编号，接收方对数据包进行排序再将有序数据传送给应用层</li><li>校验和，TCP保持它首部和数据的校验和，检验和有差错的包会被丢弃</li><li>TCP丢弃重复的数据包</li><li>流量控制，TCP连接的每一方都有固定大小的缓冲空间，TCP接受端只允许发送端发送接收端缓冲区能够接纳的数据，当接收方来不及处理发送方的数据，会提示发送方降低发送的速率，防止包丢失。TCP的流量控制协议是可变大小的滑动窗口协议。（TCP使用滑动窗口实现流量控制）</li><li>拥塞控制，网络拥塞时减少数据的发送速率。TCP发送方维护一个拥塞窗口（cwnd）的状态变量，该变量的大小取决于网络的拥塞程度。TCP的拥塞控制采用四种算法，即慢开始、避免拥塞、快重传、快恢复<ul><li>慢开始，思路是当主机开始发送数据时，由小到大逐渐增大拥塞窗口数值，cwnd初始值为1，每经过一个传播轮次，cwnd翻倍。</li><li>拥塞避免，思路是让cwnd缓慢增大，每经过一个往返时间RTT就把发送方的cwnd加1。</li><li>快重传与快恢复，</li></ul></li><li>ARQ协议（自动重传请求）<ul><li>停止等待ARQ协议，基本原理是每发送完一个分组就停止发送，等待对方确认，收到对方确认后再发下一个分组。若接收方收到重复分组会丢弃该分组并同时发送确认。<ul><li>优点是简单</li><li>缺点是信道利用率低，等待时间长</li></ul></li><li>连续ARQ协议，发送方维持一个发送窗口，位于发送窗口内的分组可以连续发送，不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认。<ul><li>优点是信道利用率高，容易实现，即使确认丢失也不必重传</li><li>缺点是不能向发送方反映出接收方已经正确收到的所有分组信息。例如：发送方发送5条消息，丢失第三条，此时接收方只能对前两条发送确认，而发送方需要重传后三条消息，又称Go-Back-N(回退N)，表示需要退回来重传已经发送过的N条消息。</li></ul></li></ul></li><li>超时重传，TCP发出一个报文段后，启动一个计时器，等待目的端确认这个报文段，若不能及时收到确认，将重发这个报文段</li></ol><h3 id="三次握手与四次挥手"><a href="#三次握手与四次挥手" class="headerlink" title="三次握手与四次挥手"></a>三次握手与四次挥手</h3><p>确认ACK：ACK=1确认号字段有效</p><p>同步SYN：SYN=1，ACK=0表示这是一个连接请求报文段。若同意建立连接，响应报文中SYN=1，ACK=1。</p><p>终止FIN：用于释放一个连接，FIN=1表示请求释放连接。</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/三次握手.png" alt="三次握手"></p><p>A：客户端 </p><p>B：服务端</p><ul><li>B处于监听(LISTEN)状态，等待用户连接</li><li>A向B发送连接连接请求报文段，SYN=1，ACK=0，选择一个初始的序号seq=x</li><li>B收到连接请求报文段，若同意建立连接，则向A发送连接确认报文段，SYN=1，ACK=1，确认号为ack=x+1，选择一个初始的序号seq=y</li><li>A收到B的连接确认报文段后，还要向B发出确认，确认号为ack=y+1，序号为seq=x+1</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/四次挥手.png" alt="四次挥手"></p><ul><li>(双方都可以释放连接)A发送连接释放报文段FIN=1，序号seq=u，等待B的确认</li><li>B发出确认，确认号ack=u+1，序号seq=v</li><li>此时从A到B方向的连接就释放了，TCP连接处于半关闭状态。A不能向B发送数据；B若发送数据，A仍要接收</li><li>当B不再需要连接时，发送连接释放请求报文段，FIN=1</li><li>A收到后发出确认，进入TIME-WAIT状态，等待2MSL（2倍报文最大生存时间）时间后释放连接</li><li>B收到A的确认后释放连接</li></ul><p><strong>RTT</strong>：从发送方发送数据到收到来自接收方确认的时间叫做往返时延（RTT）</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层的任务是通过<strong>应用进程间的交互</strong>来完成特定网络应用</p><h3 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h3><p>端口53，提供主机名和IP地址之间相互转换的服务。</p><h3 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h3><h3 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h3><p>工作过程如下：</p><ul><li>客户端发送Discover报文，该报文目的地址为255.255.255.255:67，源地址为0.0.0.0:68，被放入UDP中，该报文被广播到同一子网的所有主机上。如果客户端和DCHP服务不在一个子网，则需要使用中继代理。</li><li>DCHP服务器收到Discover报文之后，发送Offer报文交给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个服务器提供的信息，所以客户端要进行选择。</li><li>如果客户端选择了某个DCHP服务器的信息，就发送Request报文给该服务器。</li><li>DCHP服务器发送ACK报文，表示客户端此时可以使用提供的信息。</li></ul><h3 id="远程登录协议TELNET，用于登录到远程主机"><a href="#远程登录协议TELNET，用于登录到远程主机" class="headerlink" title="远程登录协议TELNET，用于登录到远程主机"></a>远程登录协议TELNET，用于登录到远程主机</h3><h3 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h3><ul><li>发送协议SMTP</li><li>读取协议POP3</li><li>读取协议IMAP</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="与IP网际协议配套使用的三个协议："><a href="#与IP网际协议配套使用的三个协议：" class="headerlink" title="与IP网际协议配套使用的三个协议："></a>与IP网际协议配套使用的三个协议：</h3><ul><li>ARP地址解析协议，从IP解析出在数据链路层使用的硬件地址，未来解决同一个局域网上主机或路由器的IP地址与硬件地址的映射问题。若寻找的主机与源主机不在同一个局域网中，需要通过ARP找到一个位于本局域网的某个路由器的硬件地址，然后将分组发送给这个路由器，让这个路由器将分组转发给下一个网络</li><li>ICMP网际控制报文协议，是为了更有效的转发IP数据报和提高交付成功的机会，封装在IP数据报中，分为差错报告报文和询问报文<ul><li>差错报告报文：<ul><li>3 重点不可达</li><li>11 时间超过</li><li>12 参数问题</li><li>5 改变路由</li></ul></li><li>询问报文：<ul><li>8或0 回送请求或回答</li><li>13或14 时间戳请求或回答</li></ul></li><li>具体应用：<ul><li>Ping，测试两台主机之间的连通性</li><li>Traceroute，跟踪一个分组从源点到终点的路径</li></ul></li></ul></li><li>IGMP网际组管理协议</li></ul><h3 id="IP地址划分，网络号-主机号"><a href="#IP地址划分，网络号-主机号" class="headerlink" title="IP地址划分，网络号+主机号"></a>IP地址划分，网络号+主机号</h3><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/IP地址划分.png" alt="IP地址划分"></p><p>每一类地址的最大主机个数按主机号位数来算，再减去2个</p><p>一个是主机号全0（标识这个网络）一个是主机号全1（用于广播）</p><p>广播地址的作用，同一个链路种相互连接的主机之间发送数据包</p><p>广播地址分为本地广播和直接广播，本地广播只能在当前网络下传播，不能到达本网络之外的其他链路上。</p><blockquote><p>路由器不发送广播包</p></blockquote><p>多播地址的作用，将包发送给特定组内的所有计算机</p><p>IP分类的缺点</p><ul><li>同一网络下没有地址层次，确实地址的灵活性</li><li>不能与现实网络匹配，C类过少达不到要求，B类过多浪费</li></ul><p>无分类地址CIDR，前网络号，后主机号即<code>a.b.c.d/x</code>，其中<code>/x</code>表示前x位属于网络号</p><p>还有一种划分网络号和主机号的方法，就是子网掩码。将子网掩码和IP地址进行与运算，得到的结果就是网络号</p><p>子网划分，就是将主机号分成子网网络地址和子网主机地址</p><p>电路交换，由电话连通的方式而来，面向连接的，在传送计算机数据时，通信线路的利用率很低</p><p>N部电话两两相连需要N(N-1)/2对线，为了避免这种情况，有了交换机</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/电路交换.png" alt="电路交换"></p><p>报文交换，是存储转发的一种，整个报文会先传到相邻的节点，全部存储后在查找转发，时延会很大</p><p>分组交换，采用存储转发技术，在发送端先将报文划分成较短的、固定长度的数据段。在传输时，给分组的数据加上特定首部，接收完数据后，将数据组合起来。</p><p>高效：动态分配传输带宽，对通信线路逐段占用</p><p>灵活：每一个分组独立地选择最合适的转发路由</p><p>迅速：以分组作为传送单位，可以不先建立连接就可以向其他主机发送分组</p><p>可靠：网络协议</p><p>不足：分组在个节点的存储转发需要排队，会造成时延；分组携带首部，造成一定的开销</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/三种转发方式.png" alt="三种转发方式"></p><p>时延：</p><ul><li>发送时延</li><li>传播时延</li><li>处理时延</li><li>排队时延</li></ul><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>IP数据报 = 首部 + 数据部分</p><p>其中首部包含固定20字节部分和可变部分</p><p>IP数据报的格式</p><ul><li>版本</li><li>首部长度</li><li>区分服务</li><li>总长度</li><li>生存时间</li><li>协议</li><li>首部检验和</li><li>标识</li><li>片偏移</li></ul><h3 id="虚拟专用网VPN"><a href="#虚拟专用网VPN" class="headerlink" title="虚拟专用网VPN"></a>虚拟专用网VPN</h3><h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>路由器在功能上划分为路由选择和分组转发</p><h4 id="路由器分组转发流程"><a href="#路由器分组转发流程" class="headerlink" title="路由器分组转发流程"></a>路由器分组转发流程</h4><ul><li>从数据报的首部提取目的主机IP地址D，目的网络地址N</li><li>若N就是与此路由器直接相连的网络地址，则直接进行交付</li><li>若路由表中有目的地址为D的特定主机路由，则把数据传送给表中指明的下一跳路由器</li><li>若路由表中有到达网络N的路由，则把数据报传送给表中指明的下一跳路由器</li><li>若路由表中有一个默认路由，则把数据报传送给表中指明的默认路由器</li><li>报告转发分组出错</li></ul><h4 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h4><p>路由选择协议分为两大类：</p><ul><li>自治系统内部的路由选择：RIP和OSPF</li><li>自治系统间的路由选择：BGP</li></ul><p><strong>RIP</strong>，基于距离向量的路由选择协议。距离指跳数，直接相连的路由器跳数为1 ，最多15跳，超过15表示不可达。</p><p>RIP按照固定的时间间隔和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器会知道到达本自治系统中任何一个网络的最短距离和下一跳路由地址。</p><p>缺点是RIP的最大距离是15，限制了网络的规模。</p><p><strong>OSPF</strong>，开放最短路径优先，为了克服RIP的缺点而开发出来的，最短路径优先使用了Dijkstra提出的最短路径算法SPF。</p><p><strong>BGP</strong>，边界网关协议</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>物理层考虑的是怎样才能在连接计算机的传输媒体上传输数据比特流</p><blockquote><p>带通调制，将数字信号转换为模拟信号</p></blockquote><p>基带调制，调制的过程为编码，常用编码方式：</p><ul><li>不归零制：正电平为1，负电平为0</li><li>归零制：正脉冲为1，负脉冲为0</li><li>曼彻斯特编码：位周期中心的向上跳表为0，位周期中心的向下跳表为1，也可反过来</li><li>差分曼彻斯特编码：位开始边界有跳变为0，无跳变为1</li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><ul><li><p>封装成帧，就是在一段数据的前后分别添加首部和尾部，然后构成一个帧</p><p>首部和尾部的作用是进行帧定界</p></li><li><p>透明传输，用字节填充或字符填充的方式，添加转义字符</p><p><img src="https://cdn.jsdelivr.net/gh/Wanfengyueluo/images/透明传输问题.png" alt="透明传输问题"></p></li><li><p>差错控制，要做到“可靠传输”，还得加上确认和重传机制</p><ul><li>循环冗余检验CRC，是一种检错方法，只能做到无差错接受</li><li>帧检验序列FCS，是一种冗余码</li></ul></li></ul><h3 id="PPP协议，点对点协议"><a href="#PPP协议，点对点协议" class="headerlink" title="PPP协议，点对点协议"></a>PPP协议，点对点协议</h3><h3 id="网卡：网络接口卡NIC，MAC地址用于标识网卡，功能："><a href="#网卡：网络接口卡NIC，MAC地址用于标识网卡，功能：" class="headerlink" title="网卡：网络接口卡NIC，MAC地址用于标识网卡，功能："></a>网卡：网络接口卡NIC，MAC地址用于标识网卡，功能：</h3><ul><li>进行串行/并行转换</li><li>对数据进行缓存</li><li>在计算机的操作系统安装设备驱动程序</li><li>实现以太网协议</li></ul><h3 id="局域网拓扑结构"><a href="#局域网拓扑结构" class="headerlink" title="局域网拓扑结构"></a>局域网拓扑结构</h3><ul><li>星型（以太网）</li><li>环形</li><li>直线型</li></ul><h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><ul><li>频分复用，所有主机在相同时间占用不同的频率带宽资源</li><li>时分复用，所有主机在不同时间占用相同的频率带宽资源</li><li>统计时分复用，是对时分复用的改进，不固定每个主机在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧进行发送</li><li>波分复用，光的频分复用</li><li>码分复用</li></ul><h3 id="CSMA-CD协议，载波监听多点接入-碰撞检测"><a href="#CSMA-CD协议，载波监听多点接入-碰撞检测" class="headerlink" title="CSMA/CD协议，载波监听多点接入/碰撞检测"></a>CSMA/CD协议，载波监听多点接入/碰撞检测</h3><ul><li><p>多点接入表示许多计算机以多点接入的方式连接在一根总线上</p></li><li><p>载波监听表示每一站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据</p></li><li><p>碰撞检测，由于电磁波在总线上的传播速率是有限的，当某个站点监听到总显示空闲的时候，可能总线并非真正的空闲</p><p>一旦发生碰撞，应该：立即停止发送数据，在继续发送人为干扰信号，以便让用户都知道发生了碰撞</p></li></ul><h3 id="集线器与交换机"><a href="#集线器与交换机" class="headerlink" title="集线器与交换机"></a>集线器与交换机</h3><p>交换机是多个集线器</p><p>交换机的 交换方式：</p><ul><li>存储转发方式，将数据帧先缓存在处理</li><li>直通方式，接收数据帧的同时立即按数据帧的目的MAC地址决定该帧的转发接口，缺点是没有检错</li><li>以太网交换机运行自学习算法自动维护交换表</li></ul><h3 id="PPPoE，将PPP帧再封装到以太网中传输"><a href="#PPPoE，将PPP帧再封装到以太网中传输" class="headerlink" title="PPPoE，将PPP帧再封装到以太网中传输"></a>PPPoE，将PPP帧再封装到以太网中传输</h3><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><h3 id="区分MAC和IP之间的关系"><a href="#区分MAC和IP之间的关系" class="headerlink" title="区分MAC和IP之间的关系"></a>区分MAC和IP之间的关系</h3><p>IP负责在<strong>两个没有直连</strong>的两个网络之间进行通信传输</p><p>MAC实现<strong>直连</strong>的两个设备之间通信</p><p>如同一次旅行，车票记录出发地和目的地，但是没有行程表就无法到达，需要两者结合才能实现。</p><blockquote><p>参考文章：<a href="https://mp.weixin.qq.com/s/waV4C0bUzAq5GUXM23-wpA">https://mp.weixin.qq.com/s/waV4C0bUzAq5GUXM23-wpA</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 复试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="2020/04/02/bing-cha-ji/"/>
      <url>2020/04/02/bing-cha-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集知识点汇总"><a href="#并查集知识点汇总" class="headerlink" title="并查集知识点汇总"></a>并查集知识点汇总</h1><h2 id="基于id的并查集"><a href="#基于id的并查集" class="headerlink" title="基于id的并查集"></a>基于id的并查集</h2><p>思路：设置<code>id</code>数组，数组的每个元素是元素标识。初始化每个元素的值都不一样，如果值一样表示属于同一个集合内的元素。</p><span id="more"></span><p>实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;<span class="comment">//分量id</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//连通分量数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">id[i] = i;<span class="comment">//初始化id</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pid = find(p);</span><br><span class="line"><span class="keyword">int</span> qid = find(q);</span><br><span class="line"><span class="comment">//此时已经在同一个分量中</span></span><br><span class="line"><span class="keyword">if</span> (pid == qid) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (find(i) == pid) {</span><br><span class="line">id[i] = qid;<span class="comment">//将p的分量重新命名为q</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>find()很快，但是union()很慢</p></blockquote><h2 id="基于parent的并查集"><a href="#基于parent的并查集" class="headerlink" title="基于parent的并查集"></a>基于parent的并查集</h2><p>思路：不再使用<code>id</code>数组，而使用<code>parent</code>数组，定义为：<code>parent[i]</code>表示索引为i的节点的父节点的索引，初始时，每个元素都指向自己。</p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;<span class="comment">//存放第i节点的父节点索引</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//连通分量数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;<span class="comment">//或者parent[pRoot]=qRoot;</span></span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="quick-union基于size的优化"><a href="#quick-union基于size的优化" class="headerlink" title="quick-union基于size的优化"></a>quick-union基于size的优化</h2><p>思路：基于<code>parent</code>的并查集在给两个元素合并时没有考虑哪一个元素作为根，此时对于<code>find</code>会有影响。因此我们维护一个<code>size</code>数组，表示以该节点为根的元素个数，在<code>union</code>时将集合元素少的指向集合元素多的节点的根，会使形成的树层数较低。</p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] size;<span class="comment">//以当前索引为根的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">size[i] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (size[pRoot] &gt; size[qRoot]) {</span><br><span class="line">parent[qRoot] = pRoot;</span><br><span class="line">size[pRoot] += size[qRoot];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">parent[pRoot] = qRoot;</span><br><span class="line">size[qRoot] += size[pRoot];</span><br><span class="line">}</span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="quick-union基于rank的优化"><a href="#quick-union基于rank的优化" class="headerlink" title="quick-union基于rank的优化"></a>quick-union基于rank的优化</h2><p>思路：使用<code>rank</code>数组存放以该节点为根的深度</p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] rank;<span class="comment">//以当前索引为根的树的深度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">rank = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">rank[i] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (rank[pRoot] &gt; rank[qRoot]) {</span><br><span class="line">parent[qRoot] = pRoot;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (rank[pRoot] &lt; rank[qRoot]) {</span><br><span class="line">parent[pRoot] = qRoot;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">parent[qRoot] = pRoot;</span><br><span class="line">rank[pRoot]++;</span><br><span class="line">}</span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="quick-union基于路径压缩的非递归实现"><a href="#quick-union基于路径压缩的非递归实现" class="headerlink" title="quick-union基于路径压缩的非递归实现"></a>quick-union基于路径压缩的非递归实现</h2><blockquote><p>并查集的一个特性是，只要元素是连在一起的，谁指向谁并不重要。</p></blockquote><p>思路：路径压缩，在<code>find</code>的时候进行整理。</p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">            parent[p] = parent[parent[p]];<span class="comment">//两步一跳</span></span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;<span class="comment">//或者parent[pRoot]=qRoot;</span></span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="quick-union基于路径压缩的非递归实现-1"><a href="#quick-union基于路径压缩的非递归实现-1" class="headerlink" title="quick-union基于路径压缩的非递归实现"></a>quick-union基于路径压缩的非递归实现</h2><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">            parent[p] = find(parent[p]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> parent[p];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;<span class="comment">//或者parent[pRoot]=qRoot;</span></span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="举个栗子🌰"><a href="#举个栗子🌰" class="headerlink" title="举个栗子🌰"></a>举个栗子🌰</h1><h2 id="LeetCode-547-朋友圈"><a href="#LeetCode-547-朋友圈" class="headerlink" title="LeetCode 547.朋友圈"></a><a href="https://leetcode-cn.com/problems/friend-circles/">LeetCode 547.朋友圈</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] M)</span> </span>{</span><br><span class="line">UnionFind uf = <span class="keyword">new</span> UnionFind(M.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M.length; j++) {</span><br><span class="line"><span class="keyword">if</span> (M[i][j] == <span class="number">1</span> &amp;&amp; i != j) {</span><br><span class="line">uf.union(i, j);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> uf.count;</span><br><span class="line">}</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">            parent[p] = parent[parent[p]];</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;</span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="LeetCode-990-等式方程的可满足性"><a href="#LeetCode-990-等式方程的可满足性" class="headerlink" title="LeetCode 990.等式方程的可满足性"></a><a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/">LeetCode 990.等式方程的可满足性</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equationsPossible</span><span class="params">(String[] equations)</span> </span>{</span><br><span class="line">UnionFind uf = <span class="keyword">new</span> UnionFind(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">for</span> (String s : equations) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(<span class="number">1</span>) == <span class="string">'='</span>) {</span><br><span class="line"><span class="keyword">int</span> p = s.charAt(<span class="number">0</span>) - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> q = s.charAt(<span class="number">3</span>) - <span class="string">'a'</span>;</span><br><span class="line">uf.union(p, q);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (String s : equations) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(<span class="number">1</span>) == <span class="string">'!'</span>) {</span><br><span class="line"><span class="keyword">int</span> p = s.charAt(<span class="number">0</span>) - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> q = s.charAt(<span class="number">3</span>) - <span class="string">'a'</span>;</span><br><span class="line">                <span class="comment">//uf.isConnected(p, q)返回true表示p,q可以连接，但是此时p!=q，矛盾！</span></span><br><span class="line"><span class="keyword">if</span> (uf.isConnected(p, q)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">            parent[p] = parent[parent[p]];</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;</span><br><span class="line">}</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="LeetCode-200-岛屿的个数"><a href="#LeetCode-200-岛屿的个数" class="headerlink" title="LeetCode 200.岛屿的个数"></a><a href="https://leetcode-cn.com/problems/number-of-islands/">LeetCode 200.岛屿的个数</a></h2><blockquote><p>常见的二维坐标转化为一维坐标，此题关键在于将’0’合并到虚拟节点上</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">int</span>[][] directions = <span class="keyword">new</span> <span class="keyword">int</span>[][]{{<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, <span class="number">1</span>}};</span><br><span class="line">    <span class="keyword">int</span> size = m * n;</span><br><span class="line">UnionFind uf = <span class="keyword">new</span> UnionFind(size + <span class="number">1</span>);<span class="comment">//size+1用于存放虚拟节点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] direction : directions) {</span><br><span class="line"><span class="keyword">int</span> newX = i + direction[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = j + direction[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; n &amp;&amp; grid[newX][newY] == <span class="string">'1'</span>) {</span><br><span class="line">uf.union(getIndex(i, j, n), getIndex(newX, newY, n));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">uf.union(getIndex(i, j, n), size);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> uf.count - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cols)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> x * cols + y;</span><br><span class="line">}</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">count = n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">parent[i] = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (parent[p] != p) {</span><br><span class="line">            parent[p] = parent[parent[p]];</span><br><span class="line">p = parent[p];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">parent[pRoot] = qRoot;</span><br><span class="line">count--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>参考：<a href="https://liweiwei1419.gitee.io/leetcode-algo/leetcode-by-tag/union-find/1319-number-of-operations-to-make-network-connected.html">liwewei1419大佬的文章 高级数据结构：并查集</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-4-1</title>
      <link href="2020/04/01/2020-4-1/"/>
      <url>2020/04/01/2020-4-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1111-有效括号的嵌套深度"><a href="#1111-有效括号的嵌套深度" class="headerlink" title="1111.有效括号的嵌套深度"></a>1111.有效括号的嵌套深度</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>一道看不懂的题…</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxDepthAfterSplit(String seq) {</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span> [seq.length()];</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: seq.toCharArray()) {</span><br><span class="line">            ans[idx++] = c == <span class="string">'('</span> ? idx &amp; <span class="number">1</span> : ((idx + <span class="number">1</span>) &amp; <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="1046-最后一块石头的重量"><a href="#1046-最后一块石头的重量" class="headerlink" title="1046.最后一块石头的重量"></a>1046.最后一块石头的重量</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>使用堆，优先队列</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="keyword">int</span>[] stones)</span> </span>{</span><br><span class="line">Queue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((v1,v2) -&gt; v2 - v1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : stones) {</span><br><span class="line">pq.offer(num);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (pq.size() &gt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">int</span> x = pq.poll();</span><br><span class="line"><span class="keyword">int</span> y = pq.poll();</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) {</span><br><span class="line">pq.offer(x - y);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> pq.size() == <span class="number">0</span> ? <span class="number">0</span> : pq.peek();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="面试题40-最小的k个数"><a href="#面试题40-最小的k个数" class="headerlink" title="面试题40.最小的k个数"></a>面试题40.最小的k个数</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>堆</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getLeastNumbers(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k) {</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span> || k == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((v1, v2) -&gt; v2 - v1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr) {</span><br><span class="line"><span class="keyword">if</span> (pq.size() &lt; k) {</span><br><span class="line">pq.offer(i);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; pq.peek()) {</span><br><span class="line">pq.poll();</span><br><span class="line">pq.offer(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[pq.size()];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : pq) {</span><br><span class="line">result[index++] = num;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="451-根据字符出现频率排序"><a href="#451-根据字符出现频率排序" class="headerlink" title="451.根据字符出现频率排序"></a>451.根据字符出现频率排序</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>堆</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>{</span><br><span class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">}</span><br><span class="line">Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) {</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(c)) {</span><br><span class="line">map.put(c, map.get(c) + <span class="number">1</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">map.put(c, <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">Queue&lt;Character&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((m1, m2) -&gt; map.get(m2) - map.get(m1));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : map.keySet()) {</span><br><span class="line">pq.offer(c);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (!pq.isEmpty()) {</span><br><span class="line"><span class="keyword">char</span> c = pq.poll();</span><br><span class="line"><span class="keyword">int</span> size = map.get(c);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">result.append(c);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="703-数据流中的第K大元素"><a href="#703-数据流中的第K大元素" class="headerlink" title="703.数据流中的第K大元素"></a>703.数据流中的第K大元素</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>堆</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KthLargest</span> </span>{</span><br><span class="line">Queue&lt;Integer&gt; pq;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KthLargest</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line"><span class="keyword">this</span>.k = k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : nums) {</span><br><span class="line"><span class="keyword">if</span>(pq.size()&lt;k){</span><br><span class="line">pq.offer(num);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;pq.peek()){</span><br><span class="line">pq.poll();</span><br><span class="line">pq.offer(num);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> val)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (pq.size() &lt; k) {</span><br><span class="line">pq.offer(val);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; pq.peek()) {</span><br><span class="line">pq.poll();</span><br><span class="line">pq.offer(val);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> pq.peek();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your KthLargest object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * KthLargest obj = new KthLargest(k, nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.add(val);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="263-丑数"><a href="#263-丑数" class="headerlink" title="263.丑数"></a>263.丑数</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>当该数存在2,3,5之外的因子时就不为丑数</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (num != <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">num /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">3</span> == <span class="number">0</span>) {</span><br><span class="line">num /= <span class="number">3</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">5</span> == <span class="number">0</span>) {</span><br><span class="line">num /= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程知识点整理</title>
      <link href="2020/04/01/ruan-jian-gong-cheng-zhi-shi-dian-zheng-li/"/>
      <url>2020/04/01/ruan-jian-gong-cheng-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a><a href="https://blog.csdn.net/Franklinbill/article/details/73864477">软件工程</a></h1><h2 id="一-软件工程概述"><a href="#一-软件工程概述" class="headerlink" title="一 软件工程概述"></a>一 软件工程概述</h2><h3 id="1-1-软件危机"><a href="#1-1-软件危机" class="headerlink" title="1.1 软件危机"></a>1.1 软件危机</h3><h4 id="1-1-1-软件危机的典型表现："><a href="#1-1-1-软件危机的典型表现：" class="headerlink" title="1.1.1 软件危机的典型表现："></a>1.1.1 软件危机的典型表现：</h4><ul><li>对软件开发成本和进度的估计常常很不准确</li><li>用户对“已完成的”软件系统不满意的现象经常发生</li><li>软件产品的质量往往靠不住</li><li>软件常常是不可维护的</li><li>软件通常没有适当的文档资料</li><li>软件成本在计算机系统总成本中所占的比例逐年上升</li><li>软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</li></ul><span id="more"></span><h4 id="1-1-2-产生软件危机的原因"><a href="#1-1-2-产生软件危机的原因" class="headerlink" title="1.1.2 产生软件危机的原因"></a>1.1.2 产生软件危机的原因</h4><ul><li>与软件本身特点有关<ul><li>不同于硬件，管理和控制软件开发过程相当困难</li><li>软件长时间运行可能会遇见在开发时期没有测出来的错误</li><li>软件的规模庞大，而且程序的复杂性会随着程序规模的增加而呈指数上升</li><li>没有完整准确的认识用户需求就着手开发软件</li><li>对软件开发和维护的理解不清楚，在实践过程中采用了错误的方法和技术</li><li>错误的认识和做法，如忽略软件需求分析的重要性，轻视软件维护等</li></ul></li><li>与软件开发和维护的方法不正确有关<ul><li>只重视程序而忽视软件配置其余成分</li><li>开发人员在软件定义时期没有正确全面理解用户需求</li><li>在软件开发的不同阶段进行修改有付出的代价不同</li></ul></li></ul><h4 id="1-1-3-消除软件危机的途径"><a href="#1-1-3-消除软件危机的途径" class="headerlink" title="1.1.3 消除软件危机的途径"></a>1.1.3 消除软件危机的途径</h4><ul><li>首先对计算机软件有一个正确的认识</li><li>充分认识到软件开发是各类人员协同配合，共同完成的工程项目</li><li>推广使用在实践中总结出来的开发软件的技术和方法，并且研究和探索更好的技术和方法</li><li>开发和使用更好的软件开发工具</li></ul><h3 id="1-2-软件工程"><a href="#1-2-软件工程" class="headerlink" title="1.2 软件工程"></a>1.2 软件工程</h3><h4 id="1-2-1-软件工程概述"><a href="#1-2-1-软件工程概述" class="headerlink" title="1.2.1 软件工程概述"></a>1.2.1 软件工程概述</h4><p>​        软件工程是指导计算机软件开发和维护的一门工程学科。采用工程的概念、原理、技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它，这就是软件工程。</p><h4 id="1-2-2-软件工程的基本原理"><a href="#1-2-2-软件工程的基本原理" class="headerlink" title="1.2.2 软件工程的基本原理"></a>1.2.2 软件工程的基本原理</h4><ul><li>用分阶段的生命周期计划严格管理</li><li>坚持进行阶段评审</li><li>实行严格的产品控制</li><li>采用现代程序设计技术</li><li>结果应能清楚的审查</li><li>开发小组的人员应该少而精</li><li>承认不断改进软件工程实践的必要性</li></ul><h4 id="1-2-3-软件工程方法学"><a href="#1-2-3-软件工程方法学" class="headerlink" title="1.2.3 软件工程方法学"></a>1.2.3 软件工程方法学</h4><ul><li><p>传统方法学</p><p>传统方法学也称为生命周期方法学或结构化范型。它采用结构化技术(结构化分析、结构化设计和结构化实现)来完成软件开发的各项任务，并使用适当的软件工具或软件工程环境来支持结构化技术的运用</p><p>特点：</p><ul><li>传统方法学把软件生命周期的全过程依次划分为若干个阶段，然后顺序地完成每个阶段的任务。</li><li>每个阶段的开始和结束都有严格标准，对于任何两个相邻的阶段而言，前一阶段的结束标准就是后一阶段的开始标准。</li><li>在每一个阶段结束之前都必须进行正式严格的技术审查和管理复审。</li><li>审查的一条主要标准就是每个阶段都应该交出“最新式的”(即和所开发的软件完全一致的)高质量的文档资料，从而保证在软件开发工程结束时有一个完整准确的软件配置交付使用。</li><li>采用生命周期方法学可以大大提高软件开发的成功率，软件开发的生产率也能明显提高。</li><li>目前，传统方法学仍然是人们在开发软件时使用得十分广泛的软件工程方法学。</li></ul></li><li><p>面向对象方法学</p><p>与传统方法相反，面向对象方法把数据和行为看成是同等重要的，它是一种以数据为主线，把数据和对数据的操作紧密地结合起来的方法</p><p>基本原则：</p><ul><li>尽量模拟人类习惯的思维方式，使开发软件的方法与过程尽可能接近人类认识世界、解决问题的方法与过程，从而使描述问题的问题空间(也称为问题域)与实现解法的解空间(也称为求解域)在结构上尽可能一致。</li></ul><p>优点：</p><ul><li>降低了软件产品的复杂性，提高了软件的可理解性，简化了软件的开发和维护工作。</li><li>面向对象方法特有的继承性和多态性，进一步提高了面向对象软件的可重用性。</li></ul></li></ul><h3 id="1-3-软件生命周期"><a href="#1-3-软件生命周期" class="headerlink" title="1.3 软件生命周期"></a>1.3 软件生命周期</h3><p>软件生命周期由软件定义、软件开发和运行维护三个时期组成</p><ul><li>软件定义时期<ul><li>任务：<ul><li>确定软件开发过程必须完成的总目标</li><li>确定工程的可行性</li><li>导出实现工程目标应该采用的策略及系统必须完成的功能</li><li>估计完成该工程需要的资源和成本，制定工程进度表</li></ul></li><li>阶段：<ul><li>问题定义</li><li>可行性研究</li><li>需求分析</li></ul></li></ul></li><li>软件开发时期<ul><li>阶段：<ul><li>总体设计</li><li>详细设计</li><li>编码</li><li>单元测试、综合测试</li></ul></li></ul></li><li>软件维护时期</li></ul><h3 id="1-4-软件过程"><a href="#1-4-软件过程" class="headerlink" title="1.4 软件过程"></a>1.4 软件过程</h3><p>软件过程是为了获得高质量软件所需要完成的一系列任务的框架，它<strong>规定了完成各项任务的工作步骤。</strong></p><p> 软件过程描述为了开发出客户需要的软件，什么人（who）、在什么时候（when）、做什么事（what）以及怎样（how）做这些事以实现某一个特定的具体目标。</p><h4 id="1-4-1-瀑布模型"><a href="#1-4-1-瀑布模型" class="headerlink" title="1.4.1 瀑布模型"></a>1.4.1 瀑布模型</h4><ul><li>特点<ul><li>阶段间具有顺序性和依赖性，必须等前一阶段的工作完成之后，才能开始后一阶段的工作；前一阶段的输出文档就是后一阶段的输入文档，因此，只有前一阶段的输出文档正确，后一阶段的工作才能获得正确的结果。</li><li>推迟实现的观点，瀑布模型在编码之前设置了系统分析与系统设计的各个阶段，分析与设计阶段的基本任务规定，在这两个阶段主要考虑目标系统的逻辑模型，不涉及软件的物理实现。</li><li>质量保证的观点，每个阶段都必须完成规定的文档，没有交出合格的文档就是没有完成该阶段的任务；每个阶段结束前都要对所完成的文档进行评审，以便尽早发现问题，改正错误。</li></ul></li><li>优点<ul><li>可强迫开发人员采用规范的方法</li><li>严格地规定了每个阶段必须提交的文档</li><li>要求每个阶段交出的所有产品都必须经过质量保证小组的仔细验证</li></ul></li></ul><h4 id="1-4-2-快速原型模型"><a href="#1-4-2-快速原型模型" class="headerlink" title="1.4.2 快速原型模型"></a>1.4.2 快速原型模型</h4><ul><li>特点<ul><li>软件产品的开发基本上是线性顺序进行的</li></ul></li></ul><h4 id="1-4-3-增量模型"><a href="#1-4-3-增量模型" class="headerlink" title="1.4.3 增量模型"></a>1.4.3 增量模型</h4><p>使用增量模型开发软件时，把软件产品作为一系列的增量构件来设计、编码、集成和测试。每个构件由多个相互作用的模块构成，并且能够完成特定的功能。使用增量模型时，第一个增量构件往往实现软件的基本需求，提供最核心的功能。</p><ul><li>优点<ul><li>能在较短时间内向用户提交可完成部分工作的产品</li><li>逐步增加产品功能可以使用户有较充裕的时间学习和适应新产品，从而减少一个全新的软件可能给客户组织带来的冲击</li></ul></li><li>困难<ul><li>在把每个新的增量构件集成到现有软件体系结构中时，必须不破坏原来已经开发出的产品</li><li>必须把软件的体系结构设计得便于按这种方式进行扩充，向现有产品中加入新构件的过程必须简单、方便，也就是说，软件体系结构必须是开放的。</li></ul></li></ul><h4 id="1-4-4-螺旋模型"><a href="#1-4-4-螺旋模型" class="headerlink" title="1.4.4 螺旋模型"></a>1.4.4 螺旋模型</h4><p>螺旋模型的基本思想是，使用原型及其他方法来尽量降低风险。理解这种模型的一个简便方法，是把它看作在每个阶段之前都增加了风险分析过程的快速原型模型。</p><h4 id="1-4-5-喷泉模型"><a href="#1-4-5-喷泉模型" class="headerlink" title="1.4.5 喷泉模型"></a>1.4.5 喷泉模型</h4><h4 id="1-4-6-Rational统一过程（Rational-Unified-Process-RUP）"><a href="#1-4-6-Rational统一过程（Rational-Unified-Process-RUP）" class="headerlink" title="1.4.6 Rational统一过程（Rational Unified Process RUP）"></a>1.4.6 Rational统一过程（Rational Unified Process RUP）</h4><p>最佳实践</p><ul><li><p>迭代式开发</p><p>迭代式开发允许在每次迭代过程中需求都可以有变化，这种开发方法通过一系列细化来加深对问题的理解，因此能更容易地容纳需求的变更</p></li><li><p>管理需求</p><p>RUP描述了如何提取、组织系统的功能性需求和约束条件并把它们文档化</p></li><li><p>使用基于架构的体系结构</p><p>RUP提供了使用现有的或新开发的构件定义体系结构的系统化方法，从而有助于降低软件开发的复杂性，提高软件重用率</p></li><li><p>可视化建模</p><p>可视化建模语言UML紧密地联系在一起，在开发过程中建立起软件系统的可视化模型，可以帮助人们提高管理软件复杂性的能力</p></li><li><p>验证软件质量</p><p>软件质量评估不再是事后型的或由单独小组进行的孤立活动，而是内建在贯穿于整个开发过程的、由全体成员参与的所有活动中</p></li><li><p>控制软件变更</p><p>RUP描述了如何控制、跟踪和监控修改，以确保迭代开发的成功</p></li></ul><h4 id="1-4-7-敏捷过程与极限编程"><a href="#1-4-7-敏捷过程与极限编程" class="headerlink" title="1.4.7 敏捷过程与极限编程"></a>1.4.7 敏捷过程与极限编程</h4><h2 id="二-可行性研究"><a href="#二-可行性研究" class="headerlink" title="二 可行性研究"></a>二 可行性研究</h2><h3 id="2-1-可行性研究的任务"><a href="#2-1-可行性研究的任务" class="headerlink" title="2.1 可行性研究的任务"></a>2.1 可行性研究的任务</h3><p><strong>可行性研究的目的不是解决问题，而是确定问题是否值得去解决</strong></p><p>至少从三个方面研究每种解法的可行性：</p><ul><li>技术可行性</li><li>经济可行性</li><li>操作可行性</li></ul><h3 id="2-2-可行性研究过程"><a href="#2-2-可行性研究过程" class="headerlink" title="2.2 可行性研究过程"></a>2.2 可行性研究过程</h3><p>可行性研究过程有如下步骤：</p><ul><li><p>复查系统规模和目标</p><p>分析员访问关键人员，仔细阅读和分析有关的材料，以便对问题定义阶段书写的关于规模和目标的报告书进一步复查确认，改正含糊或不确切的叙述，清晰地描述对目标系统的一切限制和约束。这个步骤的工作，实质上是为了确保分析员正在解决的问题确实是要求他解决的问题。</p></li><li><p>研究正在使用的系统</p><p>现有的系统是信息的重要来源。显然，如果目前有一个系统正被人使用，那么这个系统必定能完成某些有用的工作，因此，新的目标系统必须也能完成它的基本功能；另一方面，如果现有的系统是完美无缺的，用户自然不会提出开发新系统的要求，因此，现有的系统必然有某些缺点，新系统必须能解决旧系统中存在的问题。</p><p>应该仔细阅读分析现有系统的文档资料和使用手册，也要实地考察现有的系统。</p><p>常见的错误做法是花费过多时间去分析现有的系统。</p><p>没有一个系统是在“真空”中运行的，绝大多数系统都和其他系统有联系。</p></li><li><p>导出新系统的高层逻辑模型</p><p>优秀的设计过程通常是从现有的物理系统出发，导出现有系统的逻辑模型，再参考现有系统的逻辑模型，设想目标系统的逻辑模型，最后根据目标系统的逻辑模型建造新的物理系统。</p></li><li><p>进一步定义问题</p><p>可行性研究的前4个步骤实质上构成一个循环。分析员定义问题，分析这个问题，导出一个试探性的解；在此基础上再次定义问题，再一次分析这个问题，修改这个解；继续这个循环过程，直到提出的逻辑模型完全符合系统目标。</p></li><li><p>导出和评价供选择的解法</p><p>分析员应该从他建议的系统逻辑模型出发，导出若干个较高层次的物理解法供比较和选择。</p><p>其次可以考虑操作方面的可行性。分析员应该根据使用部门处理事务的原则和习惯检查技术上可行的那些方案，去掉其中从操作方式或操作过程的角度看用户不能接受的方案。</p><p>接下来应该考虑经济方面的可行性。分析员应该估计余下的每个可能的系统的开发成本和运行费用，并且估计相对于现有的系统而言这个系统可以节省的开支或可以增加的收入。</p><p>最后为每个在技术、操作和经济等方面都可行的系统制定实现进度表，这个进度表不需要制定得很详细，通常只需要估计生命周期每个阶段的工作量。</p></li><li><p>推荐行动方针</p><p>根据可行性研究结果应该决定的一个关键性问题是：<br>是否继续进行这项开发工程？分析员必须清楚地表明他对这个关键性决定的建议。如果分析员认为值得继续进行这项开发工程，那么他应该选择一种最好的解法，并且说明选择这个解决方案的理由。通常客户主要根据经济上是否划算决定是否投资于一项开发工程，因此分析员对于所推荐的系统必须进行比较仔细的成本/效益分析。</p></li><li><p>草拟开发计划书</p><p>分析员应该为所推荐的方案草拟一份开发计划，除了制定工程进度表之外还应该估计对各类开发人员和各种资源的需要情况，应该指明什么时候使用以及使用多长时间。此外还应该估计系统生命周期每个阶段的成本。最后应该给出下一个阶段(需求分析)的详细进度表和成本估计。</p></li><li><p>写文档提交审查</p><p>应该把上述可行性研究各个步骤的工作结果写成清晰的文档，请用户、客户组织的负责人及评审组审查，以决定是否继续这项工程及是否接受分析员推荐的方案。</p></li></ul><h3 id="2-3-系统流程图"><a href="#2-3-系统流程图" class="headerlink" title="2.3 系统流程图"></a>2.3 系统流程图</h3><p><strong>系统流程图是概括地描绘物理系统的传统工具。</strong></p><p><strong>基本思想</strong>：用图形符号以黑盒子形式描绘组成系统的每个部件(程序、文档、数据库、人工过程等)。</p><p>系统流程图表达的是数据在系统各部件之间流动的情况，而不是对数据进行加工处理的控制过程，因此尽管系统流程图的某些符号和程序流程图的符号形式相同，但是它却是物理数据流图而不是程序流程图。</p><h3 id="2-4-数据流图"><a href="#2-4-数据流图" class="headerlink" title="2.4 数据流图"></a>2.4 数据流图</h3><p><strong>数据流图(DFD)是一种图形化技术，它描绘信息流和数据从输入移动到输出的过程中所经受的变换。</strong></p><h3 id="2-5-数据字典"><a href="#2-5-数据字典" class="headerlink" title="2.5 数据字典"></a>2.5 数据字典</h3><p><strong>数据字典是关于数据的信息的集合，也就是对数据流图中包含的所有元素的定义的集合。</strong></p><p>数据字典的用途：</p><ul><li>作为分析阶段的工具</li><li>数据字典中包含的每个数据元素的控制信息是很有价值的</li><li>是开发数据库的第一步</li></ul><p>例如：</p><ul><li>名字：订货报表</li><li>别名：订货信息</li><li>描述：xxxxxx</li><li>定义：订货报表=零件编号+零件名称+订货数量+目前价格+主要供应者+次要供应者</li><li>位置：输出到打印机</li></ul><h3 id="2-6-成本-效益分析"><a href="#2-6-成本-效益分析" class="headerlink" title="2.6 成本/效益分析"></a>2.6 成本/效益分析</h3><p>三种估算技术：</p><ul><li>代码行技术</li><li>任务分解技术</li><li>自动估算成本技术</li></ul><p>成本/效益分析方法主要从四个方面考虑：</p><ul><li>货币的时间价值</li><li>投资回收期</li><li>纯收入</li><li>投资回收率</li></ul><h2 id="三-需求分析"><a href="#三-需求分析" class="headerlink" title="三 需求分析"></a>三 需求分析</h2><p><strong>需求分析是软件定义时期的最后一个阶段，它的基本任务是准确地回答“系统必须做什么”这个问题</strong></p><h3 id="3-1-需求分析的任务"><a href="#3-1-需求分析的任务" class="headerlink" title="3.1 需求分析的任务"></a>3.1 需求分析的任务</h3><h4 id="3-1-1-确定对系统的综合要求"><a href="#3-1-1-确定对系统的综合要求" class="headerlink" title="3.1.1 确定对系统的综合要求"></a>3.1.1 确定对系统的综合要求</h4><ul><li><p>功能需求</p><p>指定系统必须提供的服务。通过需求分析应该划分出系统必须完成的所有功能。</p></li><li><p>性能需求</p><p>指定系统必须满足的定时约束或容量约束，通常包括响应时间、信息量速率、主存容量、磁盘容量、安全性等方面的需求。</p></li><li><p>可靠性与可用性需求</p></li><li><p>定量的指定系统的可靠性，可用性与可靠性密切相关，量化了用户可以使用吸引的程度。</p></li><li><p>出错处理需求</p><p>说明系统对环境错误应该怎样响应</p></li><li><p>接口需求</p><p>描述应用系统与它的环境通信的格式，常见的接口需求有：用户接口需求、硬件接口需求、软件接口需求、通信接口需求</p></li><li><p>约束</p><p>设计约束或实现约束描述在设计或实现应用系统时应该遵守的 限制条件，常见的约束有：精度、工具和语言约束、设计约束。</p></li><li><p>逆向需求</p><p>说明软件不应该做什么</p></li><li><p>将来可能提出的要求</p><p>明确列出哪些虽然不属于当前系统开发范畴，但是据分析将来很可能会提出来的要求。</p></li></ul><h4 id="3-1-2-分析系统的数据要求"><a href="#3-1-2-分析系统的数据要求" class="headerlink" title="3.1.2 分析系统的数据要求"></a>3.1.2 分析系统的数据要求</h4><p>复杂的数据由许多基本的数据元素组成，数据结构表示数据元素之间的逻辑关系。利用数据字典可以全面准确地定义数据，但是数据字典的缺点是不够形象直观。为了提高可理解性，常常利用图形工具辅助描绘数据结构。</p><h4 id="3-1-3-导出系统的逻辑模型"><a href="#3-1-3-导出系统的逻辑模型" class="headerlink" title="3.1.3 导出系统的逻辑模型"></a>3.1.3 导出系统的逻辑模型</h4><p>综合上述两项分析的结果可以导出系统的详细的逻辑模型，通常用数据流图、实体联系图、状态转换图、数据字典和主要的处理算法描述这个逻辑模型。</p><h4 id="3-1-4-修正系统开发计划"><a href="#3-1-4-修正系统开发计划" class="headerlink" title="3.1.4 修正系统开发计划"></a>3.1.4 修正系统开发计划</h4><p>根据在分析过程中获得的对系统的更深入更具体的了解，可以比较准确地估计系统的成本和进度，修正以前制定的开发计划。</p><h3 id="3-2-与用户沟通获取需求的方法"><a href="#3-2-与用户沟通获取需求的方法" class="headerlink" title="3.2 与用户沟通获取需求的方法"></a>3.2 与用户沟通获取需求的方法</h3><h4 id="3-2-1-访谈"><a href="#3-2-1-访谈" class="headerlink" title="3.2.1 访谈"></a>3.2.1 访谈</h4><h4 id="3-2-2-面向数据流自顶向下求精"><a href="#3-2-2-面向数据流自顶向下求精" class="headerlink" title="3.2.2 面向数据流自顶向下求精"></a>3.2.2 面向数据流自顶向下求精</h4><p>结构化分析方法就是面向数据流自顶向下逐步求精进行需求分析的方法。通过可行性研究已经得出了目标系统的高层数据流图，需求分析的目标之一就是把数据流和数据存储定义到元素级。</p><p>为了达到这个目标，通常从数据流图的输出端着手分析，这是因为系统的基本功能是产生这些输出，输出数据决定了系统必须具有的最基本的组成元素。</p><p>数据流图是帮助复查的极好工具，从输入端开始，分析员借助数据流图、数据字典和IPO图向用户解释输入数据是怎样一步一步地转变成输出数据的。这些解释集中反映了通过前面的分析工作分析员所获得的对目标系统的认识。</p><h4 id="3-2-3-简易的应用规格说明技术"><a href="#3-2-3-简易的应用规格说明技术" class="headerlink" title="3.2.3 简易的应用规格说明技术"></a>3.2.3 简易的应用规格说明技术</h4><p>简易的应用规格说明技术是为了解决使用传统的访谈或面向数据流自顶向下求精方法定义需求时，用户处于被动地位而且往往有意无意地与开发者区分“彼此”。由于不能像同一个团队的人那样齐心协力地识别和精化需求，这两种方法的效果有时并不理想的问题，提出的。</p><h4 id="3-2-4-快速建立软件原型"><a href="#3-2-4-快速建立软件原型" class="headerlink" title="3.2.4 快速建立软件原型"></a>3.2.4 快速建立软件原型</h4><p>快速原型就是快速建立起来的旨在演示目标系统主要功能的可运行的程序，具有快速和容易修改的特点。</p><ul><li>第四代技术</li><li>可重用的软件构件</li><li>形式化规格说明和原型环境</li></ul><h3 id="3-3-分析建模与规格说明"><a href="#3-3-分析建模与规格说明" class="headerlink" title="3.3 分析建模与规格说明"></a>3.3 分析建模与规格说明</h3><h4 id="3-3-1分析建模"><a href="#3-3-1分析建模" class="headerlink" title="3.3.1分析建模"></a>3.3.1分析建模</h4><p>为了开发复杂的系统，应从不同角度（模型）抽象出目标系统的特性（数据模型、功能模型、行为模型）</p><ul><li>实体联系图，描述数据对象及数据对象之间的关系，是用于建立数据模型的图形</li><li>数据流图是建立功能模型的基础</li><li>状态转换图描绘了系统的各种行为和在不同状态间转换的方式</li></ul><h4 id="3-3-2-软件需求规格说明"><a href="#3-3-2-软件需求规格说明" class="headerlink" title="3.3.2 软件需求规格说明"></a>3.3.2 软件需求规格说明</h4><p>软件需求规格说明是需求分析阶段得出的最主要的文档。</p><p>通常用自然语言完整、准确、具体地描述系统的数据要求、功能需求、性能需求、可靠性和可用性要求、出错处理需求、接口需求、约束、逆向需求以及将来可能提出的要求。</p><h3 id="3-4-实体联系图"><a href="#3-4-实体联系图" class="headerlink" title="3.4 实体联系图"></a>3.4 实体联系图</h3><p>数据模型中包含三种相互关联的信息：数据对象、数据对象的属性及数据对象彼此间相互连接的关系</p><h4 id="3-4-1-数据对象"><a href="#3-4-1-数据对象" class="headerlink" title="3.4.1 数据对象"></a>3.4.1 数据对象</h4><p>数据对象是对软件必须理解的复合信息的抽象。</p><h4 id="3-4-2-属性"><a href="#3-4-2-属性" class="headerlink" title="3.4.2 属性"></a>3.4.2 属性</h4><p>属性定义了数据对象的性质。</p><h4 id="3-4-3-联系"><a href="#3-4-3-联系" class="headerlink" title="3.4.3 联系"></a>3.4.3 联系</h4><p>数据对象彼此之间相互连接的方式称为联系，也叫关系。</p><ul><li>一对一联系（1：1）</li><li>一对多联系（1：N）</li><li>多对多联系（M：N）</li></ul><h4 id="3-4-4-ER图"><a href="#3-4-4-ER图" class="headerlink" title="3.4.4 ER图"></a>3.4.4 ER图</h4><p>ER图中包含了实体(即数据对象)、关系和属性3种基本成分，通常用矩形框代表实体，用连接相关实体的菱形框表示关系，用椭圆形或圆角矩形表示实体(或关系)的属性，并用直线把实体(或关系)与其属性连接起来。</p><h3 id="3-5数据规范化"><a href="#3-5数据规范化" class="headerlink" title="3.5数据规范化"></a>3.5数据规范化</h3><p>范式</p><ul><li>第一范式</li><li>第二范式</li><li>第三范式</li></ul><h3 id="3-6-状态转换图"><a href="#3-6-状态转换图" class="headerlink" title="3.6 状态转换图"></a>3.6 状态转换图</h3><p>状态转换图(简称为状态图)通过描绘系统的状态及引起系统状态转换的事件，来表示系统的行为。此外，状态图还指明了作为特定事件的结果系统将做哪些动作。</p><h3 id="3-7-其他图形工具"><a href="#3-7-其他图形工具" class="headerlink" title="3.7 其他图形工具"></a>3.7 其他图形工具</h3><h4 id="3-7-1-层次方框图"><a href="#3-7-1-层次方框图" class="headerlink" title="3.7.1 层次方框图"></a>3.7.1 层次方框图</h4><h4 id="3-7-2-Warnier图"><a href="#3-7-2-Warnier图" class="headerlink" title="3.7.2 Warnier图"></a>3.7.2 Warnier图</h4><h4 id="3-7-3-IPO图"><a href="#3-7-3-IPO图" class="headerlink" title="3.7.3 IPO图"></a>3.7.3 IPO图</h4><h3 id="3-8-验证软件需求"><a href="#3-8-验证软件需求" class="headerlink" title="3.8 验证软件需求"></a>3.8 验证软件需求</h3><h4 id="3-8-1-从四个方面验证软件需求的正确性"><a href="#3-8-1-从四个方面验证软件需求的正确性" class="headerlink" title="3.8.1 从四个方面验证软件需求的正确性"></a>3.8.1 从四个方面验证软件需求的正确性</h4><ul><li>一致性，一致性所有需求必须是一致的，任何一条需求不能和其他需求互相矛盾。</li><li>完整性，完整性需求必须是完整的，规格说明书应该包括用户需要的每一个功能或性能。</li><li>现实性，现实性指定的需求应该是用现有的硬件技术和软件技术基本上可以实现的。</li><li>有效性，有效性必须证明需求是正确有效的，确实能解决用户面对的问题。</li></ul><h4 id="3-8-2-验证软件需求的方法"><a href="#3-8-2-验证软件需求的方法" class="headerlink" title="3.8.2 验证软件需求的方法"></a>3.8.2 验证软件需求的方法</h4><ul><li>验证需求的一致性</li><li>验证需求的现实性</li><li>验证需求的完整性和有效性</li></ul><h4 id="3-8-3-用于需求分析的软件工具"><a href="#3-8-3-用于需求分析的软件工具" class="headerlink" title="3.8.3 用于需求分析的软件工具"></a>3.8.3 用于需求分析的软件工具</h4><h2 id="四-形式化说明技术"><a href="#四-形式化说明技术" class="headerlink" title="四 形式化说明技术"></a>四 形式化说明技术</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><h4 id="4-1-1-非形式化方法的缺点"><a href="#4-1-1-非形式化方法的缺点" class="headerlink" title="4.1.1 非形式化方法的缺点"></a>4.1.1 非形式化方法的缺点</h4><p>用自然语言书写的系统规格说明书，可能存在矛盾、二义性、含糊性、不完整性及抽象层次混乱等问题。</p><h4 id="4-1-2-形式化方法的优点"><a href="#4-1-2-形式化方法的优点" class="headerlink" title="4.1.2 形式化方法的优点"></a>4.1.2 形式化方法的优点</h4><p>为了克服非形式化方法的缺点，人们把数学引入软件开发过程，创造了基于数学的形式化方法。</p><h4 id="4-1-3-应用形式化方法的准则"><a href="#4-1-3-应用形式化方法的准则" class="headerlink" title="4.1.3 应用形式化方法的准则"></a>4.1.3 应用形式化方法的准则</h4><ul><li>应该选用适当的表示方法</li><li>应该形式化，但不要过分形式化</li><li>应该估算成本</li><li>应该有形式化顾问随时提供咨询</li><li>不应该放弃传统的开发方法</li><li>应该建立详尽的文档</li><li>不应该放弃质量标准</li><li>不应该盲目依赖性形式化方法</li><li>应该测试、测试再测试</li><li>应该重用</li></ul><h3 id="4-2-有穷状态机"><a href="#4-2-有穷状态机" class="headerlink" title="4.2 有穷状态机"></a>4.2 有穷状态机</h3><h3 id="4-3-Petri网"><a href="#4-3-Petri网" class="headerlink" title="4.3 Petri网"></a>4.3 Petri网</h3><h3 id="4-4-Z语言"><a href="#4-4-Z语言" class="headerlink" title="4.4 Z语言"></a>4.4 Z语言</h3><h2 id="五-总体设计"><a href="#五-总体设计" class="headerlink" title="五 总体设计"></a>五 总体设计</h2><h3 id="5-1-设计过程"><a href="#5-1-设计过程" class="headerlink" title="5.1 设计过程"></a>5.1 设计过程</h3><p>典型的总体设计步骤：</p><ul><li><p>设想供选择的方案</p><p>在总体设计阶段分析员应该考虑各种可能的实现方案，并且力求从中选出最佳方案。</p><p>需求分析阶段得出的数据流图是总体设计的极好的出发点。</p><p>设想供选择的方案的一种常用的方法是，设想把数据流图中的处理分组的各种可能的方法，抛弃在技术上行不通的分组方法(例如，组内不同处理的执行时间不相容)，余下的分组方法代表可能的实现策略，并且可以启示供选择的物理系统。</p></li><li><p>选取合理的方案</p><p>应该从前一步得到的一系列供选择的方案中选取若干个合理的方案，通常至少选取低成本、中等成本和高成本的3种方案。在判断哪些方案合理时应该考虑在问题定义和可行性研究阶段确定的工程规模和目标，有时可能还需要进一步征求用户的意见。</p><p>对每个合理的方案，分析员都应该准备下列4份资料。</p><p>(1) 系统流程图。</p><p>(2) 组成系统的物理元素清单。</p><p>(3) 成本/效益分析。</p><p>(4) 实现这个系统的进度计划。</p></li><li><p>推荐最佳方案</p><p>用户和有关的技术专家应该认真审查分析员所推荐的最佳系统，如果该系统确实符合用户的需要，并且是在现有条件下完全能够实现的，则应该提请使用部门负责人进一步审批。在使用部门的负责人也接受了分析员所推荐的方案之后，将进入总体设计过程的下一个重要阶段——结构设计。</p></li><li><p>功能分解</p><p>为了最终实现目标系统，必须设计出组成这个系统的所有程序和文件(或数据库)。对程序(特别是复杂的大型程序)的设计，通常分为两个阶段完成：首先进行结构设计，然后进行过程设计。</p><p>为确定软件结构，首先需要从实现角度把复杂的功能进一步分解。分析员结合算法描述仔细分析数据流图中的每个处理，如果一个处理的功能过分复杂，必须把它的功能适当地分解成一系列比较简单的功能。</p></li><li><p>设计软件结构</p><p>通常程序中的一个模块完成一个适当的子功能。应该把模块组织成良好的层次系统，顶层模块调用它的下层模块以实现程序的完整功能，每个下层模块再调用更下层的模块，完成程序的一个子功能，最下层的模块完成最具体的功能。</p></li><li><p>设计数据库</p><p>对于需要使用数据库的那些应用系统，软件工程师应该在需求分析阶段所确定的系统数据需求的基础上，进一步设计数据库。</p></li><li><p>制定测试计划</p><p>在软件开发的早期阶段考虑测试问题，能促使软件设计人员在设计时注意提高软件的可测试性。</p></li><li><p>书写文档</p><p>应该用正式的文档记录总体设计的结果，在这个阶段应该完成的文档通常有下述几种。</p><ul><li>系统说明</li><li>用户手册</li><li>测试计划</li><li>详细的实现计划</li><li>数据库设计结果</li></ul></li><li><p>审查和复审</p><p>最后应该对总体设计的结果进行严格的技术审查，在技术审查通过之后再由客户从管理角度进行复审。</p></li></ul><h3 id="5-2-设计原理"><a href="#5-2-设计原理" class="headerlink" title="5.2 设计原理"></a>5.2 设计原理</h3><h4 id="5-2-1-模块化"><a href="#5-2-1-模块化" class="headerlink" title="5.2.1 模块化"></a>5.2.1 模块化</h4><p><strong>模块化</strong>就是把程序划分成独立命名且可独立访问的模块，每个模块完成一个子功能，把这些模块集成起来构成一个整体，可以完成指定的功能满足用户的需求。</p><h4 id="5-2-2-抽象"><a href="#5-2-2-抽象" class="headerlink" title="5.2.2 抽象"></a>5.2.2 抽象</h4><p>软件工程过程的每一步都是对软件解法的抽象层次的一次精化。在可行性研究阶段，软件作为系统的一个完整部件；在需求分析期间，软件解法是使用在问题环境内熟悉的方式描述的；当由总体设计向详细设计过渡时，抽象的程度也就随之减少了；最后，当源程序写出来以后，也就达到了抽象的最低层。</p><h4 id="5-2-3-逐步求精"><a href="#5-2-3-逐步求精" class="headerlink" title="5.2.3 逐步求精"></a>5.2.3 逐步求精</h4><p>逐步求精定义为为了能集中精力解决主要问题而尽量推迟对问题细节的考虑。</p><h4 id="5-2-4-信息隐藏和局部化"><a href="#5-2-4-信息隐藏和局部化" class="headerlink" title="5.2.4 信息隐藏和局部化"></a>5.2.4 信息隐藏和局部化</h4><h4 id="5-2-5-模块独立"><a href="#5-2-5-模块独立" class="headerlink" title="5.2.5 模块独立"></a>5.2.5 模块独立</h4><p>模块的独立程度可以由两个定性标准度量，这两个标准分别称为内聚和耦合。</p><ul><li>耦合  尽量使用数据耦合，少用控制耦合和特征耦合，限制公共环境耦合的范围，完全不用内容耦合<ul><li>数据耦合，两个模块彼此间通过参数交换信息，而且交换的信息仅仅是数据，那么这种耦合称为数据耦合。数据耦合是低耦合。系统中至少必须存在这种耦合。</li><li>控制耦合，传递的信息中有控制信息(尽管有时这种控制信息以数据的形式出现)，则这种耦合称为控制耦合。控制耦合是中等程度的耦合。</li><li>特征耦合，当把整个数据结构作为参数传递而被调用的模块只需要使用其中一部分数据元素时，就出现了特征耦合。</li><li>公共环境耦合，当两个或多个模块通过一个公共数据环境相互作用时，它们之间的耦合称为公共环境耦合。</li><li>内容耦合，应该坚决避免使用内容耦合<ul><li>一个模块访问另一个模块的内部数据</li><li>一个模块不通过正常入口而转到另一个模块的内部</li><li>两个模块有一部分程序代码重叠(只可能出现在汇编程序中)</li><li>一个模块有多个入口(这意味着一个模块有几种功能)</li></ul></li></ul></li><li>内聚<ul><li>低内聚<ul><li>一个模块完成一组任务，这些任务彼此间即使有关系，关系也是很松散的，就叫做偶然内聚。</li><li>一个模块完成的任务在逻辑上属于相同或相似的一类，则称为逻辑内聚</li><li>一个模块包含的任务必须在同一段时间内执行，就叫时间内聚。</li></ul></li><li>中内聚<ul><li>一个模块内的处理元素是相关的，而且必须以特定次序执行，则称为过程内聚。</li><li>模块中所有元素都使用同一个输入数据和(或)产生同一个输出数据，则称为通信内聚。</li></ul></li><li>高内聚<ul><li>一个模块内的处理元素和同一个功能密切相关，而且这些处理必须顺序执行(通常一个处理元素的输出数据作为下一个处理元素的输入数据)，则称为顺序内聚。</li><li>模块内所有处理元素属于一个整体，完成一个单一的功能，则称为功能内聚。功能内聚是最高程度的内聚。</li></ul></li></ul></li></ul><h3 id="5-3-启发规则"><a href="#5-3-启发规则" class="headerlink" title="5.3 启发规则"></a>5.3 启发规则</h3><ul><li>改进软件结构提高模块独立性</li><li>模块规模应该适中</li><li>深度、宽度、扇出和扇入都应该适当</li><li>模块的作用域应该在控制域之内</li><li>力争降低模块接口的复杂程度</li><li>设计单入口单出口的模块</li><li>模块功能应该可以预测</li></ul><h3 id="5-4-描绘软件结构的图形工具"><a href="#5-4-描绘软件结构的图形工具" class="headerlink" title="5.4 描绘软件结构的图形工具"></a>5.4 描绘软件结构的图形工具</h3><h4 id="5-4-1-层次图和HIPO图"><a href="#5-4-1-层次图和HIPO图" class="headerlink" title="5.4.1 层次图和HIPO图"></a>5.4.1 层次图和HIPO图</h4><h4 id="5-4-2-结构图"><a href="#5-4-2-结构图" class="headerlink" title="5.4.2 结构图"></a>5.4.2 结构图</h4><h3 id="5-5-面向数据流的设计方法"><a href="#5-5-面向数据流的设计方法" class="headerlink" title="5.5 面向数据流的设计方法"></a>5.5 面向数据流的设计方法</h3><h2 id="六-详细设计"><a href="#六-详细设计" class="headerlink" title="六 详细设计"></a>六 详细设计</h2><h3 id="6-1-结构程序设计"><a href="#6-1-结构程序设计" class="headerlink" title="6.1 结构程序设计"></a>6.1 结构程序设计</h3><ul><li>顺序</li><li>选择</li><li>循环</li></ul><h3 id="6-2-人机界面设计"><a href="#6-2-人机界面设计" class="headerlink" title="6.2 人机界面设计"></a>6.2 人机界面设计</h3><h4 id="6-2-1-设计问题"><a href="#6-2-1-设计问题" class="headerlink" title="6.2.1 设计问题"></a>6.2.1 设计问题</h4><ul><li>系统响应时间</li><li>用户帮助设施</li><li>出错信息处理</li><li>命令交互</li></ul><h4 id="6-2-2-设计过程"><a href="#6-2-2-设计过程" class="headerlink" title="6.2.2 设计过程"></a>6.2.2 设计过程</h4><h4 id="6-2-3-人机界面设计指南"><a href="#6-2-3-人机界面设计指南" class="headerlink" title="6.2.3 人机界面设计指南"></a>6.2.3 人机界面设计指南</h4><ul><li>一般交互指南</li><li>信息显示指南</li><li>数据输入指南</li></ul><h3 id="6-3-过程设计的工具"><a href="#6-3-过程设计的工具" class="headerlink" title="6.3 过程设计的工具"></a>6.3 过程设计的工具</h3><h4 id="6-3-1-程序流程图（程序框图）"><a href="#6-3-1-程序流程图（程序框图）" class="headerlink" title="6.3.1 程序流程图（程序框图）"></a>6.3.1 程序流程图（程序框图）</h4><h4 id="6-3-2-盒图"><a href="#6-3-2-盒图" class="headerlink" title="6.3.2 盒图"></a>6.3.2 盒图</h4><h4 id="6-3-3-PAD图"><a href="#6-3-3-PAD图" class="headerlink" title="6.3.3 PAD图"></a>6.3.3 PAD图</h4><h4 id="6-3-4-判定表"><a href="#6-3-4-判定表" class="headerlink" title="6.3.4 判定表"></a>6.3.4 判定表</h4><h4 id="6-3-5-判定树"><a href="#6-3-5-判定树" class="headerlink" title="6.3.5 判定树"></a>6.3.5 判定树</h4><h4 id="6-3-6-过程设计语言PDL"><a href="#6-3-6-过程设计语言PDL" class="headerlink" title="6.3.6 过程设计语言PDL"></a>6.3.6 过程设计语言PDL</h4><h3 id="6-4-面向数据结构的设计方法"><a href="#6-4-面向数据结构的设计方法" class="headerlink" title="6.4 面向数据结构的设计方法"></a>6.4 面向数据结构的设计方法</h3><h4 id="6-4-1-Jackson图"><a href="#6-4-1-Jackson图" class="headerlink" title="6.4.1 Jackson图"></a>6.4.1 Jackson图</h4><h4 id="6-4-2-改进的Jackson图"><a href="#6-4-2-改进的Jackson图" class="headerlink" title="6.4.2 改进的Jackson图"></a>6.4.2 改进的Jackson图</h4><h4 id="6-4-3-Jackson法"><a href="#6-4-3-Jackson法" class="headerlink" title="6.4.3 Jackson法"></a>6.4.3 Jackson法</h4><h3 id="6-5-程序复杂度的定量度量"><a href="#6-5-程序复杂度的定量度量" class="headerlink" title="6.5 程序复杂度的定量度量"></a>6.5 程序复杂度的定量度量</h3><h4 id="6-5-1-McCabe方法"><a href="#6-5-1-McCabe方法" class="headerlink" title="6.5.1 McCabe方法"></a>6.5.1 McCabe方法</h4><ul><li>流图</li><li>计算环形复杂度的方法<ul><li>流图中线性无关的区域数等于环形复杂度</li><li>流图G的环形复杂度V(G)=E-N+2,其中，E是流图中边的条数，N是结点数</li><li>流图G的环形复杂度V(G)=P+1，其中，P是流图中判定结点的数目</li></ul></li></ul><h2 id="七-实现"><a href="#七-实现" class="headerlink" title="七 实现"></a>七 实现</h2><h3 id="7-1-编码"><a href="#7-1-编码" class="headerlink" title="7.1 编码"></a>7.1 编码</h3><h4 id="7-1-1-选择程序设计语言"><a href="#7-1-1-选择程序设计语言" class="headerlink" title="7.1.1 选择程序设计语言"></a>7.1.1 选择程序设计语言</h4><h4 id="7-1-2-编码风格"><a href="#7-1-2-编码风格" class="headerlink" title="7.1.2 编码风格"></a>7.1.2 编码风格</h4><h3 id="7-2-软件测试基础"><a href="#7-2-软件测试基础" class="headerlink" title="7.2 软件测试基础"></a>7.2 软件测试基础</h3><h4 id="7-2-1-软件测试的目标"><a href="#7-2-1-软件测试的目标" class="headerlink" title="7.2.1 软件测试的目标"></a>7.2.1 软件测试的目标</h4><h4 id="7-2-2-软件测试准测"><a href="#7-2-2-软件测试准测" class="headerlink" title="7.2.2 软件测试准测"></a>7.2.2 软件测试准测</h4><h4 id="7-2-3-软件测试方法"><a href="#7-2-3-软件测试方法" class="headerlink" title="7.2.3 软件测试方法"></a>7.2.3 软件测试方法</h4><ul><li>黑盒测试（功能测试）</li><li>白盒测试（结构测试）</li></ul><h4 id="7-2-4-测试步骤"><a href="#7-2-4-测试步骤" class="headerlink" title="7.2.4 测试步骤"></a>7.2.4 测试步骤</h4><ul><li>模块测试（单元测试）</li><li>子系统测试</li><li>系统测试</li><li>验收测试（确认测试）</li><li>平行测试</li></ul><h3 id="7-3-单元测试"><a href="#7-3-单元测试" class="headerlink" title="7.3 单元测试"></a>7.3 单元测试</h3><p>单元测试与编码属于同一阶段</p><p>单元测试主要使用白盒测试技术</p><h4 id="7-3-1-测试重点："><a href="#7-3-1-测试重点：" class="headerlink" title="7.3.1 测试重点："></a>7.3.1 测试重点：</h4><ul><li>模块接口</li><li>局部数据结构</li><li>重要的执行通路</li><li>出错处理通路</li><li>边界条件（最重要）</li></ul><h4 id="7-3-2-代码审查"><a href="#7-3-2-代码审查" class="headerlink" title="7.3.2 代码审查"></a>7.3.2 代码审查</h4><h4 id="7-3-3-计算机测试"><a href="#7-3-3-计算机测试" class="headerlink" title="7.3.3 计算机测试"></a>7.3.3 计算机测试</h4><p>7.3 单元测试</p><h3 id="7-4-集成测试"><a href="#7-4-集成测试" class="headerlink" title="7.4 集成测试"></a>7.4 集成测试</h3><h4 id="7-4-1-自顶向下集成"><a href="#7-4-1-自顶向下集成" class="headerlink" title="7.4.1 自顶向下集成"></a>7.4.1 自顶向下集成</h4><p><strong>自顶向下集成方法</strong>是从主控制模块开始，沿着程序的控制层次向下移动，逐渐把各个模块结合起来。在把附属于（及最终附属于）主控制模块的那些模块组装到程序结构中去时，或者使用深度优先的策略，或者使用宽度优先的策略。</p><p><strong>深度优先的结合方法</strong>先组装在软件结构的一条主控制通路上的所有模块。选择一条主控制通路取决于应用的特点，并且有很大任意性。</p><p><strong>宽度优先的结合方法</strong>是沿软件结构水平地移动，把处于同一个控制层次上的所有模块组装起来。</p><h4 id="7-4-2-自底向上集成"><a href="#7-4-2-自底向上集成" class="headerlink" title="7.4.2 自底向上集成"></a>7.4.2 自底向上集成</h4><p><strong>自底向上测试</strong>从“原子”模块(即在软件结构最低层的模块)开始组装和测试。因为是从底部向上结合模块，总能得到所需的下层模块处理功能，所以不需要存根程序。</p><h4 id="7-4-3-不同集成测试策略的比较"><a href="#7-4-3-不同集成测试策略的比较" class="headerlink" title="7.4.3 不同集成测试策略的比较"></a>7.4.3 不同集成测试策略的比较</h4><ul><li><strong>自顶向下测试方法</strong>的<strong>主要优点</strong>是不需要测试驱动程序，能够在测试阶段的早期实现并验证系统的主要功能，而且能在早期发现上层模块的接口错误。</li><li><strong>自顶向下测试方法</strong>的<strong>主要缺点</strong>是需要存根程序，可能遇到与此相联系的测试困难，低层关键模块中的错误发现较晚，而且用这种方法在早期不能充分展开人力。</li><li><strong>自底向上测试方法的优缺点与上述自顶向下测试方法的优缺点刚好相反。</strong></li></ul><h4 id="7-4-4-回归测试"><a href="#7-4-4-回归测试" class="headerlink" title="7.4.4 回归测试"></a>7.4.4 回归测试</h4><p><strong>回归测试</strong>就是用于保证由于调试或其他原因引起的变化，不会导致非预期的软件行为或额外错误的测试活动。</p><h3 id="7-5-确认测试"><a href="#7-5-确认测试" class="headerlink" title="7.5 确认测试"></a>7.5 确认测试</h3><p>确认测试主要使用黑盒测试技术</p><p><strong>确认测试</strong>也称为验收测试，它的目标是<strong>验证</strong>软件的有效性。</p><ul><li><strong>验证</strong>指的是保证软件正确地实现了某个特定要求的一系列活动；</li><li><strong>确认</strong>指的是为了保证软件确实满足了用户需求而进行的一系列活动。</li></ul><h4 id="7-5-1-确认测试的范围"><a href="#7-5-1-确认测试的范围" class="headerlink" title="7.5.1 确认测试的范围"></a>7.5.1 确认测试的范围</h4><h4 id="7-5-2-软件配置复查"><a href="#7-5-2-软件配置复查" class="headerlink" title="7.5.2 软件配置复查"></a>7.5.2 软件配置复查</h4><h4 id="7-5-3-Alpha和Beta测试"><a href="#7-5-3-Alpha和Beta测试" class="headerlink" title="7.5.3 Alpha和Beta测试"></a>7.5.3 Alpha和Beta测试</h4><ul><li>Alpha测试由用户在开发者的场所进行，受控</li><li>Beta测试实在开发者不能控制的环境“真实”应用</li></ul><h3 id="7-6-白盒测试技术"><a href="#7-6-白盒测试技术" class="headerlink" title="7.6 白盒测试技术"></a>7.6 白盒测试技术</h3><h4 id="7-6-1-逻辑覆盖"><a href="#7-6-1-逻辑覆盖" class="headerlink" title="7.6.1 逻辑覆盖"></a>7.6.1 逻辑覆盖</h4><ul><li>语句覆盖，使被测程序中每个语句至少执行一次</li><li>判定覆盖（分支覆盖），不仅每个语句必须至少执行一次，而且每个判定的每种可能的结果都应该至少执行一次，也就是每个判定的每个分支都至少执行一次</li><li>条件覆盖，不仅每个语句至少执行一次，而且使判定表达式中的每个条件都取到各种可能的结果</li><li>判定/条件覆盖，使得判定表达式中的每个条件都取到各种可能的值，而且每个判定表达式也都取到各种可能的结果</li><li>条件组合覆盖，使得每个判定表达式中条件的各种可能组合都至少出现一次</li></ul><h4 id="7-6-2-控制结构测试"><a href="#7-6-2-控制结构测试" class="headerlink" title="7.6.2 控制结构测试"></a>7.6.2 控制结构测试</h4><ul><li>基本路径测试</li><li>条件测试</li><li>循环测试</li></ul><h3 id="7-7-黑盒测试技术"><a href="#7-7-黑盒测试技术" class="headerlink" title="7.7 黑盒测试技术"></a>7.7 黑盒测试技术</h3><h4 id="7-7-1-等价划分"><a href="#7-7-1-等价划分" class="headerlink" title="7.7.1 等价划分"></a>7.7.1 等价划分</h4><h4 id="7-7-2-边界值分析"><a href="#7-7-2-边界值分析" class="headerlink" title="7.7.2 边界值分析"></a>7.7.2 边界值分析</h4><h4 id="7-7-3-错误推测"><a href="#7-7-3-错误推测" class="headerlink" title="7.7.3 错误推测"></a>7.7.3 错误推测</h4><h3 id="7-8-调试"><a href="#7-8-调试" class="headerlink" title="7.8 调试"></a>7.8 调试</h3><h3 id="7-9-软件可靠性"><a href="#7-9-软件可靠性" class="headerlink" title="7.9 软件可靠性"></a>7.9 软件可靠性</h3>]]></content>
      
      
      <categories>
          
          <category> 复试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复试 </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统知识点整理</title>
      <link href="2020/03/31/cao-zuo-xi-tong-zhi-shi-dian-zheng-li/"/>
      <url>2020/03/31/cao-zuo-xi-tong-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h2><p>操作系统，控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配。</p><span id="more"></span><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><ol><li>并发，指两个或多个时间在同一时间间隔内发生（并行指同时发生），在多道程序环境下，一段时间内宏观上有多个程序在同时执行，单处理器环境下只能有一个程序执行，故在微观上这些程序是在分时的交替进行。在操作系统中，引入进程的目的是使程序并发执行。</li><li><p>共享，指系统中的资源可供内存中多个并发执行的进程共同使用。共享有两种方式：</p><ul><li>互斥共享，某些资源在同一时间内只允许一个进程访问该资源。</li><li>同时访问，一些资源允许多个进程在宏观上同时访问。</li></ul><blockquote><p>并发和共享是操作系统的两个最基本的特征，两者之间又是互为存在条件的：</p><ul><li>共享是以并发为条件的，若程序不能并发执行，就不存在资源共享的问题。</li><li>若系统不能对资源共享进行有效的管理，程序的并发执行也会受到影响，甚至无法运行。</li></ul></blockquote></li><li><p>虚拟，指把物理上的实体变为若干逻辑上的对应物。在操作系统中利用虚拟技术实现虚拟处理器、虚拟内存和虚拟外部设备。操作系统的虚拟技术分为：</p><ul><li>时分复用技术</li><li>空分复用技术</li></ul></li><li>异步，在多道程序环境下，允许多个程序并发执行，但是由于资源有限，进程的执行是以不可知的速度向前推进，这就是进程的异步性。</li></ol><h2 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h2><h3 id="操作系统作为计算机资源的管理者"><a href="#操作系统作为计算机资源的管理者" class="headerlink" title="操作系统作为计算机资源的管理者"></a>操作系统作为计算机资源的管理者</h3><ol><li>处理器管理，在多道程序环境下，处理器的分配和运行是以进程为基本单位，因此处理器管理可以看作是对进程的管理。进程管理的主要功能有进程控制、进程同步、进程通信、死锁处理、处理器调度等。</li><li>存储器管理，主要任务是为多道程序的运行提供良好的环境，方便用户使用以及提高内存的利用率。存储器管理的主要功能有内存分配、地址映射、内存保护与共享和内存扩充等。</li><li>文件管理，主要包括文件的存储空间管理、目录管理以及文件读写管理和保护等。</li><li>设备管理，主要任务是完成用户的<code>I/O</code>请求，方便用户使用各种设备以及提高设备的利用率。设备管理的主要功能有设备管理、设备分配、设备处理和虚拟设备等。</li></ol><h3 id="操作系统作为用户与计算机硬件系统的接口"><a href="#操作系统作为用户与计算机硬件系统的接口" class="headerlink" title="操作系统作为用户与计算机硬件系统的接口"></a>操作系统作为用户与计算机硬件系统的接口</h3><ol><li>命令接口，用户利用这些操作命令组织和控制作业的执行，主要有联机命令接口和脱机命令接口两种方式。</li><li>程序接口，由一组系统调用命令组成。系统调用指用户在程序中调用操作系统所提供的一些子功能。</li></ol><h2 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h2><ul><li>简单结构</li><li>模块化结构</li><li>分层式结构</li><li>微内核结构</li></ul><h2 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h2><ol><li>手工操作阶段</li><li>脱机输入输出阶段</li><li>批处理阶段<ol><li>单道批处理系统，自动行、顺序性、单道性。</li><li>多道批处理系统，宏观上并行，微观上串行。</li></ol></li><li>分时操作系统阶段<br>将处理器的运行时间分成时间片，按时间片轮流把处理器分配给各联机作业使用。其特点是同时性、交互性、独立性、及时性。</li><li>实时操作系统阶段<br>实时性和可靠性。</li><li>网络操作系统和分布式计算机系统阶段</li><li>个人计算机操作系统阶段</li></ol><h2 id="操作系统的运行环境"><a href="#操作系统的运行环境" class="headerlink" title="操作系统的运行环境"></a>操作系统的运行环境</h2><h3 id="1-操作系统的运行机制"><a href="#1-操作系统的运行机制" class="headerlink" title="1. 操作系统的运行机制"></a>1. 操作系统的运行机制</h3><p>在计算机系统中<code>CPU</code>执行两种不同性质的程序，一种是操作系统内核程序，另一种使用户程序。操作系统在具体实现上划分为用户态和核心态以区分两种程序。操作系统内核包括四个方面的内容：</p><ul><li>时钟管理<ul><li>提供系统时间</li><li>通过时钟中断的管理，实现进程的切换</li></ul></li><li>中断机制，目的是提高多道程序运行环境中<code>CPU</code>的利用率。<strong>现代操作系统使考中断驱动的软件。</strong></li><li>原语，不可再分割的操作。</li><li>系统控制的数据结构及处理，如作业控制快、进程控制块、设备控制快、各类链表、消息队列、缓冲区、空闲区登记表、内存分配表等。为了实现有效的管理，系统需要一些基本的操作，常见的操作有如下三种：<ul><li>进程管理：进程状态管理、进程调度和分配、创建和撤掉进程控制块的队列维护等。</li><li>存储器管理：存储器的空间分配和回收管理、内存信息保护程序、代码对换程序等。</li><li>设备管理：缓冲区管理、设备分配和回收等。</li></ul></li></ul><h3 id="2-中断和异常的概念"><a href="#2-中断和异常的概念" class="headerlink" title="2. 中断和异常的概念"></a>2. 中断和异常的概念</h3><ul><li>中断<code>（Interruption）</code>也称为外中断，指来自<code>CPU</code>执行指令以外的事件发生，如设备发出的<code>I/O</code>结束中断、时钟中断等。这一类中断与当前运行的程序无关，可细分为硬中断和软中断。硬中断是硬件产生的，软中断是软件产生的。</li><li>异常<code>（Exception）</code>也称为内中断、陷入。指来自<code>CPU</code>执行指令内部的事件，如程序的非法操作码、地址越界、虚存系统的缺页以及专门的陷入指令等。对异常的处理一般要依赖当前程序的运行现场，而且异常不能被屏蔽，一旦出现异常立即处理。</li></ul><h1 id="2-进程管理"><a href="#2-进程管理" class="headerlink" title="2. 进程管理"></a>2. 进程管理</h1><h2 id="进程的概念和特征"><a href="#进程的概念和特征" class="headerlink" title="进程的概念和特征"></a>进程的概念和特征</h2><h3 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h3><p>在多道程序环境下，允许多个程序并发执行，此时它们失去封闭性，具有间断性和不可再现的特征。为此引入进程的概念，以便更好的描述和控制程序的并发执行，实现操作系统的并发性和共享性。</p><p>进程控制块<code>（PCB）</code>用来描述进程的基本情况和运行状态，进而控制和管理进程。程序段】数据段和PCB三部分构成了进程实体。所谓创建进程，实质上是创建进程实体中的<code>PCB</code>；而撤销进程实质上是撤销进程实体的<code>PCB</code>。</p><blockquote><p>引入进程实体的概念后，我们将进程定义为：进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p></blockquote><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><ul><li>动态性，进程最基本的特征。进程是程序的一次执行过程，有创建、活动、暂停、终止等过程，具有一定的生命周期，是动态产生、变化和消亡的。</li><li>并发性，多个进程实体在一段时间内同时运行。</li><li>独立性，进程是独立获得资源和接受调度的基本单位。</li><li>异步性，由于进程间相互制约，进程的执行具有间断性，即进程按各自独立的、不可预知的速度向前推进。异步性会导致执行结果的不可再现性，因此操作系统中必须配置相应的进程同步机制。</li><li>结构性，每个进程都配置一个<code>PCB</code>对其进行描述。从结构上看，进程实体是由程序段、数据段和<code>PCB</code>三部分组成。</li></ul><h2 id="进程的状态和转换"><a href="#进程的状态和转换" class="headerlink" title="进程的状态和转换"></a>进程的状态和转换</h2><ol><li>创建状态，进程正在被创建，还没进入就绪状态。</li><li>就绪状态，获得了除<code>CPU</code>外的所有所需资源，一旦得到处理器便可运行。</li><li>运行状态，程序获得<code>CPU</code>。</li><li>阻塞状态，进程正在等待某一事件而暂停运行，如等待资源不可用或等待输入输出完成。即使<code>CPU</code>空闲，该进程也不能运行。</li><li>结束状态，进程执行完成，释放资源。</li></ol><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>创建进程（创建原语）：</p><ul><li>为新进程分配一个进程标识号，并申请一个空白的<code>PCB</code>；</li><li>为进程分配资源，如新进程的程序和数据及所需的空间等；</li><li>初始化<code>PCB</code>，主要包括初始化标识信息、初始化处理器状态信息、初始化处理器控制信息等；</li><li>如果进程就绪队列未满，就将新进程加入到就绪队列，等待调度运行。</li></ul><p>终止进程（撤销原语）：</p><ul><li>根据进程标识符，检索<code>PCB</code>，从中读取进程的状态；</li><li>若被终止的进程处于执行状态，立即终止该进程，将处理器资源分配给其他进程；</li><li>若该进程还有子进程，则应将其所有子进程终止；</li><li>将该进程所拥有的资源归还给父进程或者操作系统；</li><li>将该进程<code>PCB</code>从队列中删除。</li></ul><blockquote><p>正在执行的进程，由于需要等待某些事件的发生，如请求资源失败等，由系统自动执行阻塞原语，将进程由运行状态变为阻塞状态。进程阻塞是进程自身的一种主动行为。</p></blockquote><p>进程切换的过程：</p><ul><li>保存处理器上下文，包括程序计数器和其他寄存器；</li><li>更新<code>PCB</code>；</li><li>把进程的<code>PCB</code>移入相应的队列，如就绪队列、阻塞队列；</li><li>选择另一个进程执行，并更新其<code>PCB</code>，更新内存管理的数据结构；</li><li>恢复处理器的上下文。</li></ul><h2 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h2><p>进程是操作系统资源分配和独立运行的基本单位。</p><ul><li><p>进程控制块<code>PCB</code>，常驻内存，是进程存在的唯一标识</p><p>主要包括：进程描述信息、进程控制和管理信息、资源分配清单和处理器相关信息。</p></li><li><p>程序段，被调度到<code>CPU</code>执行的程序代码段。</p></li><li><p>数据段，可以是进程对应的程序加工处理的原始数据，也可以是程序执行产生的中间结果。</p></li></ul><h2 id="进程的通信"><a href="#进程的通信" class="headerlink" title="进程的通信"></a>进程的通信</h2><ul><li><p>共享内存</p><p>在通信的进程之间存在一块可以直接访问的共享空间，实现进程间的信息交换，需要使用同步互斥工具。</p></li><li><p>消息传递</p><p>在消息传递系统中，进程间的数据交换是以格式化的Message为单位的。</p></li><li><p>管道通信</p><p>是消息传递的一种特殊方式。</p></li></ul><h2 id="线程的概念和多线程模型"><a href="#线程的概念和多线程模型" class="headerlink" title="线程的概念和多线程模型"></a>线程的概念和多线程模型</h2><p>引入进程是为了多道程序设计并发执行，提高资源利用率和系统吞吐量。引入线程是为了减少程序在并发执行时所付出的时空开销，提高系统的并发性能。</p><p>线程是一个基本的CPU执行单元，也是程序流的最小单元，由线程ID、程序计数器、寄存器集合和堆栈组成。线程是进程中的一个实体，是系统独立调度和分配的基本单位。</p><h3 id="线程与进程的比较："><a href="#线程与进程的比较：" class="headerlink" title="线程与进程的比较："></a>线程与进程的比较：</h3><ul><li>调度，线程是独立调度的基本单位，进程是资源分配的基本单位</li><li>拥有资源，进程是拥有资源的基本单位，而线程不拥有系统资源</li><li>并发性，不仅进程之间可以并发执行，线程之间也可以并发执行</li><li>系统开销，线程开销小</li><li>地址空间和其他资源，进程的地址空间相互独立，而同一进程的线程之间共享进程的资源</li><li>通信，线程间通信可以直接读写进程数据段来进行通信</li></ul><h3 id="线程的实现方法："><a href="#线程的实现方法：" class="headerlink" title="线程的实现方法："></a>线程的实现方法：</h3><ul><li>用户级线程</li><li>内核级线程</li></ul><h3 id="多线程模型："><a href="#多线程模型：" class="headerlink" title="多线程模型："></a>多线程模型：</h3><ul><li>多对一，将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成</li><li>一对一</li><li>多对多</li></ul><h2 id="调度的概念"><a href="#调度的概念" class="headerlink" title="调度的概念"></a>调度的概念</h2><p>处理器调度是对处理器进行分配，按照一定的算法在就绪队列中选择一个进程并将处理器分配给它运行，是操作系统设计的核心问题。</p><p><strong>三级调度</strong>：</p><ul><li>作业调度，又称高级调度。主要任务是按一定的原则将外存上处于后备状态的作业中选择一个或几个分配内存、输出输出设备等必要资源，并建立相应进程。</li><li>中级调度，又称内存调度。目的是提高内存利用率和系统吞吐率。将那些暂时不能运行的进程调至外存等待，把此时的进程状态称为挂起状态。当挂起状态的进程已具备运行条件并且内存有空闲时，由中级调度决定把哪些进程重新调入内存进入就绪队列。</li><li>进程调度，又称低级调度。主要任务是按照某种方法和策略从就绪队列中选择一个进程分配处理器。</li></ul><h2 id="调度的时机、切换与过程"><a href="#调度的时机、切换与过程" class="headerlink" title="调度的时机、切换与过程"></a>调度的时机、切换与过程</h2><h2 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h2><ul><li><p>非剥夺调度，指当一个进程正在处理器上执行时，即使有一个更为紧急的进程进入就绪状态，仍然让正在执行的进程继续执行。</p></li><li><p>剥夺调度，指当一个进程正在处理器上执行时，若有一个更为紧急的进程进入就绪状态，立即暂停正在执行的进程，将处理器分配给更为紧急的进程。</p></li></ul><h2 id="调度的基本准则"><a href="#调度的基本准则" class="headerlink" title="调度的基本准则"></a>调度的基本准则</h2><ul><li>CPU利用率</li><li>系统吞吐量，表示单位时间内CPU完成作业的数量</li><li>周转时间，指从作业提交到作业完成所经历的时间</li><li>等待时间，指进程等待处理器时间之和</li><li>响应时间，指从用户提交请求到系统首次产生响应的时间</li></ul><h2 id="典型的调度算法"><a href="#典型的调度算法" class="headerlink" title="典型的调度算法"></a>典型的调度算法</h2><ul><li>FIFS 先来先服务调度</li><li>SJF 短作业优先调度</li><li>优先级调度</li><li>高响应比优先调度</li><li>时间片轮转调度</li><li>多级反馈队列调度</li></ul><h2 id="进程同步的基本概念"><a href="#进程同步的基本概念" class="headerlink" title="进程同步的基本概念"></a>进程同步的基本概念</h2><p>多道程序设计环境下，进程并发执行，不同进程之间存在不同的制约关系。为了协调这些关系，达到资源共享和进程协作，避免进程间的冲突，引入进程同步的概念。</p><ul><li>临界资源，一次只允许一个进程访问的资源。访问临界资源的那段代码叫做临界区。</li><li>同步</li><li>互斥</li></ul><h2 id="实现临界区互斥的基本方法"><a href="#实现临界区互斥的基本方法" class="headerlink" title="实现临界区互斥的基本方法"></a>实现临界区互斥的基本方法</h2><h3 id="硬件实现方法"><a href="#硬件实现方法" class="headerlink" title="硬件实现方法"></a>硬件实现方法</h3><ul><li>中断屏蔽</li><li>硬件指令TestAndSet</li></ul><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h2 id="经典同步问题"><a href="#经典同步问题" class="headerlink" title="经典同步问题"></a>经典同步问题</h2><h2 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a>死锁的概念</h2><p>死锁指多个进程因竞争资源而造成的僵局，若无外力作用，这些进程将无法继续向前推进。</p><p><strong>死锁产生的必要条件</strong>：</p><ul><li>互斥条件</li><li>不可剥夺条件</li><li>请求和保持条件</li><li>循环等待条件</li></ul><h2 id="死锁的处理策略"><a href="#死锁的处理策略" class="headerlink" title="死锁的处理策略"></a>死锁的处理策略</h2><h2 id="死锁避免"><a href="#死锁避免" class="headerlink" title="死锁避免"></a>死锁避免</h2><h2 id="死锁检测和解除"><a href="#死锁检测和解除" class="headerlink" title="死锁检测和解除"></a>死锁检测和解除</h2><p>死锁解除的方法：</p><ul><li>资源剥夺，挂起死锁进程并抢占其资源</li><li>进程撤销，强制撤销一个或一部分进程并剥夺其资源</li><li>进程回退，进程回退释放资源而不是被剥夺</li></ul><blockquote><p>进程与程序</p><p>死锁与饥饿</p><p>进程同步互斥的区别和联系</p><p>作业和进程的关系</p></blockquote><h1 id="3-内存管理"><a href="#3-内存管理" class="headerlink" title="3. 内存管理"></a>3. 内存管理</h1><h2 id="内存管理的概念"><a href="#内存管理的概念" class="headerlink" title="内存管理的概念"></a>内存管理的概念</h2><p>内存管理的功能：</p><ul><li>内存空间的分配与回收，包括内存的分配和共享</li><li>地址转换，逻辑地址转换成物理地址</li><li>内存空间的扩充，利用虚拟技术或自动覆盖技术，从逻辑上扩充内存</li><li>存储保护，保证各作业在各自的存储空间内运行，互不干扰</li></ul><p>将用户程序编程在内存中执行的程序需要以下几个步骤：</p><ul><li>编译，由编译程序将用户源代码编译成若干目标模块</li><li>链接，由链接程序将编译后形成的目标模块和所需库函数链接形成完整的装入模块</li><li>装入，由装入程序将装入模块装入内存</li></ul><p>程序链接的三种方式：</p><ul><li>静态链接，在程序运行之前，将各目标模块以及所需的库函数链接成完整的可执行程序</li><li>装入时动态链接，将用户源程序编译后得到的目标模块，再装入内存，采用边装入变链接的方式</li><li>运行时动态链接，对某些目标模块的链接，是在程序执行中需要该模块时才进行链接</li></ul><p>装入模块装入内存的三种方式：</p><ul><li>绝对装入，在编译时，如果知道程序将驻留在内存中的某个位置，编译程序会产生绝对地址的目标代码</li><li>可重定位装入，目标模块的起始地址为0，程序中的其他地址是相对于起始地址的（作业装入时需要足够的内存空间，否则不能装入）</li><li>动态运行时装入（动态重定位），装入程序将装入模块装入内存后，没有立即将装入模块的相对地址转换成绝对地址，而是当程序真正执行时才进行地址转换</li></ul><h2 id="覆盖与交换"><a href="#覆盖与交换" class="headerlink" title="覆盖与交换"></a>覆盖与交换</h2><p>交换用于不同进程之间，覆盖用于同一进程</p><h2 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h2><p>主要包括单一连续分配、固定分区分配、动态分区分配</p><p>固定分区，优点是无外部碎片、可采用覆盖技术；缺点是有内部碎片、存储器利用率低</p><p>动态分区，缺点是有外部碎片</p><p>动态分区分配算法：</p><ul><li>首次适应</li><li>最佳适应</li><li>最坏适应</li></ul><h2 id="非连续分配管理方式"><a href="#非连续分配管理方式" class="headerlink" title="非连续分配管理方式"></a>非连续分配管理方式</h2><p>非连续分配方式允许一个程序分散装入不相邻的内存分区中，根据分区大小是否固定分为分页存储管理方式和分段存储管理方式。</p><p>分页存储管理方式又根据运行作业时是否把作业的所有页面全部装入内存才能运行区分为基本分页存储管理和请求分页存储管理。</p><blockquote><p>固定分区产生内部碎片，动态分区产生外部碎片，对内存的利用率都比较低，故而引出分页思想：将内存空间划分为大小相等且固定的块，块作为主存的基本单位。每个进程也以块为单位进行划分，进程执行时，以块为单位申请主存中的块空间。</p></blockquote><p>地址转换，将逻辑地址中的页号转换为内存中物理地址的页号，借助于页表，过程如下：</p><ul><li>地址变换机构自动将有效地址分为页号和页内偏移量，用页号去检索页表，执行前先检查是否越界。</li><li>将页表始址与页号和页表项长度的乘积相加，得到该页表项在页表中的位置，从而得到物理块号。</li><li>将有效地址的页内偏移量送入物理地址寄存器的块内地址字段。</li></ul><blockquote><p>分页管理从计算机的角度考虑，提高计算机性能和内存利用率，分页通过硬件机制实现，对用户完全透明</p><p>分段管理从程序员的角度考虑，以满足方便编程、信息保护和共享、动态增长以及动态链接等多方面的需要。</p></blockquote><p>段表，每个进程都有一张逻辑空间与主存空间映射的段表，其中每一段表项对应进程的一个段，段表项记录该段在内存中的起始地址和段的长度。</p><h2 id="虚拟内存的基本概念"><a href="#虚拟内存的基本概念" class="headerlink" title="虚拟内存的基本概念"></a>虚拟内存的基本概念</h2><p>虚拟内存基于局部性原理</p><p>虚拟内存有三种实现方式</p><ul><li>请求分页存储管理</li><li>请求分段存储管理</li><li>请求段页式存储管理</li></ul><p>需要以下几个方面的硬件支持</p><ul><li>一定容量的内存和外存</li><li>页表机制或段表机制</li><li>中断机制，缺页中断</li><li>地址转换机制，逻辑地址到物理地址的转换</li></ul><h2 id="请求分页管理方式"><a href="#请求分页管理方式" class="headerlink" title="请求分页管理方式"></a>请求分页管理方式</h2><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><ul><li>OPT最佳置换算法</li><li>FIFO先进先出页面置换算法</li><li>LRU最近最久未使用置换算法<ul><li>寄存器支持</li><li>特殊的栈结构</li></ul></li><li>CLOCK置换算法</li></ul><h2 id="页面分配策略"><a href="#页面分配策略" class="headerlink" title="页面分配策略"></a>页面分配策略</h2><h2 id="抖动和工作集"><a href="#抖动和工作集" class="headerlink" title="抖动和工作集"></a>抖动和工作集</h2><p>抖动，指刚被换出的页面很快又要访问，需要重新调入，此时有需要再选一页调出。</p><p>工作集，指在某段时间间隔内，进程要访问的页面集合，为了防止出现抖动现象，需要选择合适的驻留集（工作集）大小。</p><h2 id="请求分段管理方式"><a href="#请求分段管理方式" class="headerlink" title="请求分段管理方式"></a>请求分段管理方式</h2><h2 id="请求段页式管理方式"><a href="#请求段页式管理方式" class="headerlink" title="请求段页式管理方式"></a>请求段页式管理方式</h2><h1 id="4-文件管理"><a href="#4-文件管理" class="headerlink" title="4. 文件管理"></a>4. 文件管理</h1><h2 id="文件的概念"><a href="#文件的概念" class="headerlink" title="文件的概念"></a>文件的概念</h2><p>数据项，是文件系统中最低级的数据组织形式，有两种类型：</p><ul><li>基本数据项，用于描述对象的某种属性的一个值</li><li>组合数据项，由多个基本数据项组成</li></ul><p>记录，是一组相关的数据项集合，用于描述一个对象在某方面的属性</p><p>文件，指一组相关信息的集合，分为有结构文件和无结构文件两种，一般包含如下属性：</p><ul><li>名称</li><li>标识符，表示文件系统内文件的唯一标识，对用户不可读的内部名称</li><li>类型</li><li>位置</li><li>大小</li><li>保护，文件的访问控制信息</li><li>时间、日期和用户标识</li></ul><p>所有文件的信息都保存在目录结构中，目录结构保存在外存上，文件信息在需要时调入内存。一般来说，目录条目包含文件名称及其唯一标识符，标识符定位其他属性的信息。</p><p>操作系统为文件管理提供的系统调用：</p><ul><li>创建文件，要在文件系统中找到空间并且在目录中为文件创建条目</li><li>写文件，需要维护一个写位置的指针</li><li>读文件</li><li>文件重定位</li><li>删除文件</li><li>截断文件</li></ul><h2 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h2><ul><li>无结构文件，以字节为单位</li><li>有结构文件<ul><li>顺序文件</li><li>索引文件</li><li>索引顺序表</li><li>直接文件或散列文件</li></ul></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>文件控制块FCB是用来存放控制文件需要的各种信息的数据结构，以实现“按名存取”。FCB的有序集合称为文件目录，一个FCB就是一个文件目录项，FCB主要包含以下信息：</p><ul><li>基本信息：文件名、物理位置、逻辑结构、物理结构等</li><li>存取控制信息：文件的存取权限等</li><li>使用信息：文件建立时间、修改时间等</li></ul><p>索引节点，检索目录文件过程中只用到文件名，仅当找到一个目录项时，才需要从该目录项中读出该文件的物理地址，因此有的系统采用文件名与文件信息分开的方法，文件描述信息单独形成一个称为索引节点的数据结构，简称i节点。文件目录中的每个目录项仅由文件名和指向该文件所对应的i节点的指针构成</p><h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><h2 id="文件系统层次结构"><a href="#文件系统层次结构" class="headerlink" title="文件系统层次结构"></a>文件系统层次结构</h2><h2 id="目录实现"><a href="#目录实现" class="headerlink" title="目录实现"></a>目录实现</h2><h2 id="文件实现"><a href="#文件实现" class="headerlink" title="文件实现"></a>文件实现</h2><h2 id="磁盘的结构"><a href="#磁盘的结构" class="headerlink" title="磁盘的结构"></a>磁盘的结构</h2><h2 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h2><h2 id="磁盘的管理"><a href="#磁盘的管理" class="headerlink" title="磁盘的管理"></a>磁盘的管理</h2><h1 id="5-输入输出管理"><a href="#5-输入输出管理" class="headerlink" title="5. 输入输出管理"></a>5. 输入输出管理</h1><h2 id="IO设备"><a href="#IO设备" class="headerlink" title="IO设备"></a>IO设备</h2><h2 id="IO管理目标"><a href="#IO管理目标" class="headerlink" title="IO管理目标"></a>IO管理目标</h2><h2 id="IO管理功能"><a href="#IO管理功能" class="headerlink" title="IO管理功能"></a>IO管理功能</h2><h2 id="IO应用接口"><a href="#IO应用接口" class="headerlink" title="IO应用接口"></a>IO应用接口</h2><h2 id="设备控制器"><a href="#设备控制器" class="headerlink" title="设备控制器"></a>设备控制器</h2><h2 id="IO控制方式"><a href="#IO控制方式" class="headerlink" title="IO控制方式"></a>IO控制方式</h2><h2 id="IO层次结构"><a href="#IO层次结构" class="headerlink" title="IO层次结构"></a>IO层次结构</h2><h2 id="IO调度概念"><a href="#IO调度概念" class="headerlink" title="IO调度概念"></a>IO调度概念</h2><h2 id="高速缓存与缓冲区"><a href="#高速缓存与缓冲区" class="headerlink" title="高速缓存与缓冲区"></a>高速缓存与缓冲区</h2><h2 id="设备的分配与回收"><a href="#设备的分配与回收" class="headerlink" title="设备的分配与回收"></a>设备的分配与回收</h2><h2 id="SPOOLing（假脱机技术）"><a href="#SPOOLing（假脱机技术）" class="headerlink" title="SPOOLing（假脱机技术）"></a>SPOOLing（假脱机技术）</h2><h1 id="待完善的内容"><a href="#待完善的内容" class="headerlink" title="待完善的内容"></a>待完善的内容</h1><ul><li>[ ] 虚拟技术</li><li>[ ] 命令接口</li><li>[ ] 程序接口</li><li>[ ] 操作系统的结构</li><li>[ ] 分时操作系统与实时操作系统的比较</li><li>[ ] 进程的创建过程</li><li>[ ] 进程的阻塞和唤醒</li><li>[ ] 进程通信</li><li>[ ] 进程调度的过程</li><li>[ ] 调度算法</li><li>[ ] 死锁的四个条件</li><li>[ ] 死锁避免</li><li>[ ] 死锁预防</li><li>[ ] 死锁检测</li><li>[ ] 覆盖与交换</li></ul><blockquote><p>参考文档：<a href="https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/index.html">https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/index.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复试 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-30</title>
      <link href="2020/03/30/2020-3-30/"/>
      <url>2020/03/30/2020-3-30/</url>
      
        <content type="html"><![CDATA[<h2 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279.完全平方数"></a>279.完全平方数</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>DP和332.硬币相似</p><script type="math/tex; mode=display">dp[i] = min(dp[i-j*j]+1,dp[i])</script></li><li><p>BFS</p><span id="more"></span></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            dp[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * j &lt;= i; j++) {</span><br><span class="line">dp[i] = Math.min(dp[i], dp[i - j * j] + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//广度优先算法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">queue.add(<span class="number">0</span>);</span><br><span class="line">set.add(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">result++;</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line"><span class="keyword">int</span> num = queue.poll();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * j + num &lt;= n; j++) {</span><br><span class="line"><span class="keyword">if</span> (j * j + num == n) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (!set.contains(j * j + num)) {</span><br><span class="line">queue.add(j * j + num);</span><br><span class="line">set.add(j * j + num);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="面试题13-机器人的运动范围"><a href="#面试题13-机器人的运动范围" class="headerlink" title="面试题13.机器人的运动范围"></a>面试题13.机器人的运动范围</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>广度优先遍历+标记数组</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span>[][] marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">marked[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">0</span>, <span class="number">0</span>});</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line">result += size;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line"><span class="keyword">int</span>[] point = queue.poll();</span><br><span class="line"><span class="keyword">int</span> x = point[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> y = point[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (x + <span class="number">1</span> &lt; m &amp;&amp; getSum(x + <span class="number">1</span>) + getSum(y) &lt;= k &amp;&amp; !marked[x + <span class="number">1</span>][y]) {</span><br><span class="line">marked[x + <span class="number">1</span>][y] = <span class="keyword">true</span>;</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{x + <span class="number">1</span>, y});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (y + <span class="number">1</span> &lt; n &amp;&amp; getSum(x) + getSum(y + <span class="number">1</span>) &lt;= k &amp;&amp; !marked[x][y + <span class="number">1</span>]) {</span><br><span class="line">marked[x][y + <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{x, y + <span class="number">1</span>});</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span>) {</span><br><span class="line">sum += (i % <span class="number">10</span>);</span><br><span class="line">i /= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="79-单词搜索"><a href="#79-单词搜索" class="headerlink" title="79.单词搜索"></a>79.单词搜索</h2><ol><li>深度优先搜索+回溯</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = board.length;</span><br><span class="line"><span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">boolean</span>[][] marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (dfs(i, j, marked, word, board, <span class="number">0</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">boolean</span>[][] marked, String word, <span class="keyword">char</span>[][] board, <span class="keyword">int</span> start)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (start == word.length() - <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> board[i][j] == word.charAt(start);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] directions = <span class="keyword">new</span> <span class="keyword">int</span>[][]{{-<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, -<span class="number">1</span>}, {<span class="number">0</span>, <span class="number">1</span>}};</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == word.charAt(start)) {</span><br><span class="line">marked[i][j] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) {</span><br><span class="line"><span class="keyword">int</span> newX = i + directions[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = j + directions[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newX &lt; board.length &amp;&amp; newY &lt; board[<span class="number">0</span>].length &amp;&amp; marked[newX][newY] == <span class="keyword">false</span>) {</span><br><span class="line"><span class="keyword">if</span> (dfs(newX, newY, marked, word, board, start + <span class="number">1</span>)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">marked[i][j] = <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="994-腐烂的橘子"><a href="#994-腐烂的橘子" class="headerlink" title="994.腐烂的橘子"></a>994.腐烂的橘子</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>广度优先遍历+记录搜索层数</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) {</span><br><span class="line">count++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="number">2</span>) {</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{i, j});</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &gt; <span class="number">0</span> &amp;&amp; !queue.isEmpty()) {</span><br><span class="line">result++;</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line"><span class="keyword">int</span>[] point = queue.poll();</span><br><span class="line"><span class="keyword">int</span> row = point[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> col = point[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (row - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row - <span class="number">1</span>][col] == <span class="number">1</span>) {</span><br><span class="line">grid[row - <span class="number">1</span>][col] = <span class="number">2</span>;</span><br><span class="line">count--;</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{row - <span class="number">1</span>, col});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (row + <span class="number">1</span> &lt; m &amp;&amp; grid[row + <span class="number">1</span>][col] == <span class="number">1</span>) {</span><br><span class="line">grid[row + <span class="number">1</span>][col] = <span class="number">2</span>;</span><br><span class="line">count--;</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{row + <span class="number">1</span>, col});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (col - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row][col - <span class="number">1</span>] == <span class="number">1</span>) {</span><br><span class="line">grid[row][col - <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">count--;</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{row, col - <span class="number">1</span>});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (col + <span class="number">1</span> &lt; n &amp;&amp; grid[row][col + <span class="number">1</span>] == <span class="number">1</span>) {</span><br><span class="line">grid[row][col + <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">count--;</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{row, col + <span class="number">1</span>});</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> count == <span class="number">0</span> ? result : -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1162-地图分析"><a href="#1162-地图分析" class="headerlink" title="1162.地图分析"></a>1162.地图分析</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>广度优先搜索</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span>[][] directions = <span class="keyword">new</span> <span class="keyword">int</span>[][]{{-<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">0</span>, -<span class="number">1</span>}, {<span class="number">0</span>, <span class="number">1</span>}};</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) {</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{i, j});</span><br><span class="line">count++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line">step++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line"><span class="keyword">int</span>[] point = queue.poll();</span><br><span class="line"><span class="keyword">int</span> x = point[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> y = point[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) {</span><br><span class="line"><span class="keyword">int</span> newX = x + directions[j][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = y + directions[j][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; n &amp;&amp; grid[newX][newY] == <span class="number">0</span>) {</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{newX, newY});</span><br><span class="line">grid[newX][newY] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span> || count == m * n) {</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> step - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-盛水最多的容器"><a href="#11-盛水最多的容器" class="headerlink" title="11.盛水最多的容器"></a>11.盛水最多的容器</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>双指针，移动高度较小的指针</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = height.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> maxArea = <span class="number">0</span>, left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">maxArea = Math.max(maxArea, Math.min(height[left], height[right]) * (right - left));</span><br><span class="line"><span class="keyword">if</span> (height[left] &gt; height[right]) {</span><br><span class="line">right--;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">left++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> maxArea;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="面试题62-圆圈中最后剩下的数字"><a href="#面试题62-圆圈中最后剩下的数字" class="headerlink" title="面试题62.圆圈中最后剩下的数字"></a>面试题62.圆圈中最后剩下的数字</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>使用<code>ArrayList</code>模拟链表</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>{</span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">list.add(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">1</span>) {</span><br><span class="line">index = (index + m - <span class="number">1</span>) % n;</span><br><span class="line">list.remove(index);</span><br><span class="line">n--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="面试题32-II-从上到下打印二叉树II"><a href="#面试题32-II-从上到下打印二叉树II" class="headerlink" title="面试题32-II.从上到下打印二叉树II"></a>面试题32-II.从上到下打印二叉树II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>简单层次遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line">list.add(node.val);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">result.add(list);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="993-二叉树的堂兄弟节点"><a href="#993-二叉树的堂兄弟节点" class="headerlink" title="993.二叉树的堂兄弟节点"></a>993.二叉树的堂兄弟节点</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>层次遍历，使用<code>Map</code>存储每个节点的深度和父节点</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCousins</span><span class="params">(TreeNode root, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">Map&lt;Integer, Integer&gt; depth = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Map&lt;Integer, Integer&gt; parent = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line">parent.put(root.val, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line">depth.put(node.val, step);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">parent.put(node.left.val, node.val);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">parent.put(node.right.val, node.val);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">            step++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> depth.get(x).equals(depth.get(y)) &amp;&amp; !parent.get(x).equals(parent.get(y));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="面试题16-19-水域大小"><a href="#面试题16-19-水域大小" class="headerlink" title="面试题16.19.水域大小"></a>面试题16.19.水域大小</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>广度优先算法</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] pondSizes(<span class="keyword">int</span>[][] land) {</span><br><span class="line"><span class="keyword">int</span> m = land.length;</span><br><span class="line"><span class="keyword">int</span> n = land[<span class="number">0</span>].length;</span><br><span class="line">ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span>[][] directions = <span class="keyword">new</span> <span class="keyword">int</span>[][]{{-<span class="number">1</span>, -<span class="number">1</span>}, {-<span class="number">1</span>, <span class="number">0</span>}, {-<span class="number">1</span>, <span class="number">1</span>}, {<span class="number">0</span>, -<span class="number">1</span>}, {<span class="number">0</span>, <span class="number">1</span>}, {<span class="number">1</span>, -<span class="number">1</span>}, {<span class="number">1</span>, <span class="number">0</span>}, {<span class="number">1</span>, <span class="number">1</span>}};</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (land[i][j] == <span class="number">0</span>) {</span><br><span class="line">total++;</span><br><span class="line">land[i][j] = <span class="number">1</span>;</span><br><span class="line">Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{i, j});</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span>[] point = queue.poll();</span><br><span class="line"><span class="keyword">int</span> x = point[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> y = point[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">8</span>; l++) {</span><br><span class="line"><span class="keyword">int</span> newX = x + directions[l][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = y + directions[l][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &lt; n &amp;&amp; land[newX][newY] == <span class="number">0</span>) {</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]{newX, newY});</span><br><span class="line">land[newX][newY] = <span class="number">1</span>;</span><br><span class="line">total++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">result.add(total);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">Collections.sort(result);</span><br><span class="line"><span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[result.size()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) {</span><br><span class="line">ans[i] = result.get(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-28</title>
      <link href="2020/03/28/2020-3-28/"/>
      <url>2020/03/28/2020-3-28/</url>
      
        <content type="html"><![CDATA[<h2 id="820-单词的压缩编码"><a href="#820-单词的压缩编码" class="headerlink" title="820.单词的压缩编码"></a>820.单词的压缩编码</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>字典树</p><span id="more"></span></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumLengthEncoding</span><span class="params">(String[] words)</span> </span>{</span><br><span class="line">Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">Arrays.sort(words, (s1, s2) -&gt; s2.length() - s1.length());</span><br><span class="line"><span class="keyword">for</span> (String s : words) {</span><br><span class="line">len += trie.insert(s);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>{</span><br><span class="line"><span class="keyword">char</span> val;</span><br><span class="line">TrieNode[] children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>{</span><br><span class="line">TrieNode root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>{</span><br><span class="line">root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(String word)</span> </span>{</span><br><span class="line">TrieNode cur = root;</span><br><span class="line"><span class="keyword">boolean</span> isNew = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = word.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line"><span class="keyword">int</span> c = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (cur.children[c] == <span class="keyword">null</span>) {</span><br><span class="line">isNew = <span class="keyword">true</span>;</span><br><span class="line">cur.children[c] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">}</span><br><span class="line">cur = cur.children[c];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> isNew ? word.length() + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1161-最大层内元素和"><a href="#1161-最大层内元素和" class="headerlink" title="1161.最大层内元素和"></a>1161.最大层内元素和</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>BFS</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxLevelSum</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = root.val;</span><br><span class="line">        <span class="keyword">int</span> result = sum;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line">temp += node.val;</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (temp &gt; sum) {</span><br><span class="line">                sum = temp;</span><br><span class="line">result = m;</span><br><span class="line">}</span><br><span class="line">            m++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-27</title>
      <link href="2020/03/27/2020-3-27/"/>
      <url>2020/03/27/2020-3-27/</url>
      
        <content type="html"><![CDATA[<h2 id="914-卡牌分组"><a href="#914-卡牌分组" class="headerlink" title="914.卡牌分组"></a>914.卡牌分组</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>使用Hash表记录每个数字的次数，当次数大于1时，最大公因数</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasGroupsSizeX</span><span class="params">(<span class="keyword">int</span>[] deck)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = deck.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] heap = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">heap[deck[i]]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> x = heap[deck[<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) {</span><br><span class="line"><span class="keyword">if</span> (heap[i] == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (heap[i] &gt; <span class="number">1</span>) {</span><br><span class="line">x = gcd(x, heap[i]);</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (m &lt; n) {</span><br><span class="line"><span class="keyword">int</span> t = m;</span><br><span class="line">m = n;</span><br><span class="line">n = t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (m % n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> gcd(n, m % n);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="210-课程表II"><a href="#210-课程表II" class="headerlink" title="210.课程表II"></a>210.课程表II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>在课程表I的基础上，将每个出队列的数字添加进数组中</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) {</span><br><span class="line"><span class="keyword">int</span>[] inDegree = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; courses = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line">courses.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] cour : prerequisites) {</span><br><span class="line">inDegree[cour[<span class="number">0</span>]]++;</span><br><span class="line">courses.get(cour[<span class="number">1</span>]).add(cour[<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line"><span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) {</span><br><span class="line">queue.add(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> num = queue.poll();</span><br><span class="line">result[i] = num;</span><br><span class="line">i++;</span><br><span class="line">numCourses--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c : courses.get(num)) {</span><br><span class="line"><span class="keyword">if</span> (--inDegree[c] == <span class="number">0</span>) {</span><br><span class="line">queue.add(c);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> numCourses == <span class="number">0</span> ? result : <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="337-打家劫舍III"><a href="#337-打家劫舍III" class="headerlink" title="337.打家劫舍III"></a>337.打家劫舍III</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">int x = root.val+rob(root.left.left)+rob(root.left.right)+rob(root.right.left)+rob(root.right.right)int y = rob(root.left)+rob(root.right)return max(x,y)</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">private</span> Map&lt;TreeNode, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(root)) {</span><br><span class="line"><span class="keyword">return</span> map.get(root);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> doIt = root.val + (root.left == <span class="keyword">null</span> ? <span class="number">0</span> : rob(root.left.left) + rob(root.left.right)) +</span><br><span class="line">(root.right == <span class="keyword">null</span> ? <span class="number">0</span> : rob(root.right.left) + rob(root.right.right));</span><br><span class="line"><span class="keyword">int</span> notDoIt = rob(root.left) + rob(root.right);</span><br><span class="line"><span class="keyword">int</span> result = Math.max(doIt, notDoIt);</span><br><span class="line">map.put(root, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="394-字符串解码"><a href="#394-字符串解码" class="headerlink" title="394.字符串解码"></a>394.字符串解码</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>使用两个栈</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>{</span><br><span class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">Stack&lt;Integer&gt; num = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">Stack&lt;String&gt; str = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> multi = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line"><span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) {</span><br><span class="line">multi = multi * <span class="number">10</span> + Integer.parseInt(c + <span class="string">""</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) {</span><br><span class="line">num.push(multi);</span><br><span class="line">str.push(result.toString());</span><br><span class="line">multi = <span class="number">0</span>;</span><br><span class="line">result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span>) {</span><br><span class="line"><span class="keyword">int</span> n = num.pop();</span><br><span class="line">StringBuilder temp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">temp.append(result);</span><br><span class="line">}</span><br><span class="line">result = <span class="keyword">new</span> StringBuilder(str.pop() + temp);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result.append(c);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="547-朋友圈"><a href="#547-朋友圈" class="headerlink" title="547.朋友圈"></a>547.朋友圈</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历</li><li>广度优先遍历</li><li>并查集</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.DFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] M)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[M.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (visited[i] == <span class="keyword">false</span>) {</span><br><span class="line">dfs(M, visited, i);</span><br><span class="line">result++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] M, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> start)</span> </span>{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (M[i][start] == <span class="number">1</span> &amp;&amp; visited[i] == <span class="keyword">false</span>) {</span><br><span class="line">visited[i] = <span class="keyword">true</span>;</span><br><span class="line">dfs(M, visited, i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//2.BFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] M)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[M.length];</span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (visited[i] == <span class="keyword">false</span>) {</span><br><span class="line">queue.add(i);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> num = queue.remove();</span><br><span class="line">                    visited[num]=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M.length; j++) {</span><br><span class="line"><span class="keyword">if</span> (M[num][j] == <span class="number">1</span> &amp;&amp; visited[j] == <span class="keyword">false</span>) {</span><br><span class="line">queue.add(j);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">result++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//3.并查集</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] M)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] parent = <span class="keyword">new</span> <span class="keyword">int</span>[M.length];</span><br><span class="line">Arrays.fill(parent, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M.length; j++) {</span><br><span class="line"><span class="keyword">if</span> (M[i][j] == <span class="number">1</span> &amp;&amp; i != j) {</span><br><span class="line">union(parent, i, j);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (parent[i] == -<span class="number">1</span>) {</span><br><span class="line">result++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span>[] parent, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> fX = find(parent, i);</span><br><span class="line"><span class="keyword">int</span> fY = find(parent, j);</span><br><span class="line"><span class="keyword">if</span> (fX != fY) {</span><br><span class="line">parent[fX] = fY;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] parent, <span class="keyword">int</span> x)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (parent[x] == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> find(parent, parent[x]);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a>515.在每个树行中找最大值</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>简单层次遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">largestValues</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line"><span class="keyword">if</span> (max &lt; node.val) {</span><br><span class="line">max = node.val;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">result.add(max);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-26</title>
      <link href="2020/03/26/2020-3-26/"/>
      <url>2020/03/26/2020-3-26/</url>
      
        <content type="html"><![CDATA[<h2 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338.比特位计数"></a>338.比特位计数</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>DP</p><script type="math/tex; mode=display">dp[i] = dp[i/2]+dp[i%2];</script></li><li><p>DP</p><script type="math/tex; mode=display">if(i为偶){dp[i] = dp[i/2]}else{dp[i] = dp[i-1]+1}</script><span id="more"></span></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) {</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> dp;</span><br><span class="line">}</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= num; i++) {</span><br><span class="line">dp[i] = dp[i / <span class="number">2</span>] + dp[i % <span class="number">2</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) {</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) {</span><br><span class="line"><span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">1</span>) {</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">dp[i] = dp[i / <span class="number">2</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="999-车的可用的捕获量"><a href="#999-车的可用的捕获量" class="headerlink" title="999.车的可用的捕获量"></a>999.车的可用的捕获量</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>简单题</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRookCaptures</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = board.length;</span><br><span class="line"><span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">'R'</span>) {</span><br><span class="line"><span class="keyword">return</span> dfs(i, j, board);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">char</span>[][] board)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//同一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = j + <span class="number">1</span>; l &lt; board[<span class="number">0</span>].length; l++) {</span><br><span class="line"><span class="keyword">if</span> (board[i][l] == <span class="string">'B'</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (board[i][l] == <span class="string">'.'</span>) {</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = j - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) {</span><br><span class="line"><span class="keyword">if</span> (board[i][l] == <span class="string">'B'</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (board[i][l] == <span class="string">'.'</span>) {</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = i + <span class="number">1</span>; l &lt; board[<span class="number">0</span>].length; l++) {</span><br><span class="line"><span class="keyword">if</span> (board[l][j] == <span class="string">'B'</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (board[l][j] == <span class="string">'.'</span>) {</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = i - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) {</span><br><span class="line"><span class="keyword">if</span> (board[l][j] == <span class="string">'B'</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (board[l][j] == <span class="string">'.'</span>) {</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221.最大正方形"></a>221.最大正方形</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">if(matrix[i][j]==1){dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1}</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = matrix.length;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line"><span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'1'</span>) {</span><br><span class="line">dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (dp[i][j] &gt; result) {</span><br><span class="line">result = dp[i][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result * result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1277-统计全为1的正方形子矩阵"><a href="#1277-统计全为1的正方形子矩阵" class="headerlink" title="1277.统计全为1的正方形子矩阵"></a>1277.统计全为1的正方形子矩阵</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">if(matrix[i][j]==1){dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1}</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = matrix.length;</span><br><span class="line"><span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line"><span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>) {</span><br><span class="line">dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">result += dp[i][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="47-礼物的最大价值"><a href="#47-礼物的最大价值" class="headerlink" title="47.礼物的最大价值"></a>47.礼物的最大价值</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>自底向上DP</p><script type="math/tex; mode=display">dp[i][j] = max(dp[i-1][j],dp[i][j-1])+grid[i][j];</script></li><li><p>优化DP</p><script type="math/tex; mode=display">dp[i] = max(dp[i-1],dp[i])+grid[i][j];</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + grid[i][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">dp[i] = grid[<span class="number">0</span>][i] + dp[i - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line">dp[<span class="number">0</span>] = grid[i][<span class="number">0</span>] + dp[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">dp[j] = Math.max(dp[j - <span class="number">1</span>], dp[j]) + grid[i][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-25</title>
      <link href="2020/03/26/2020-3-25/"/>
      <url>2020/03/26/2020-3-25/</url>
      
        <content type="html"><![CDATA[<h2 id="892-三维形体的表面积"><a href="#892-三维形体的表面积" class="headerlink" title="892.三维形体的表面积"></a>892.三维形体的表面积</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>每个立方体提供6个面，垂直方向，行方向，列方向每重叠一次减去两个面。</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">surfaceArea</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> vertical = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">result += grid[i][j];</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] &gt; <span class="number">1</span>) {</span><br><span class="line">vertical += grid[i][j] - <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">0</span>) {</span><br><span class="line">row += Math.min(grid[i][j], grid[i][j - <span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) {</span><br><span class="line">col += Math.min(grid[i][j], grid[i - <span class="number">1</span>][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result * <span class="number">6</span> - (vertical + row + col) * <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91.解码方法"></a>91.解码方法</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>当首字母为’0’返回0.</p><script type="math/tex; mode=display">if(s[i]!='0'){dp[i] = dp[i-1];}if(s[i-1]='1'||(s[i-1]=='2'AND s[i]<'7')){dp[i] = dp[i-2];}</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span> || s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= len; i++) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) != <span class="string">'0'</span>) {</span><br><span class="line">dp[i] += dp[i - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (s.charAt(i - <span class="number">2</span>) == <span class="string">'1'</span> || (s.charAt(i - <span class="number">2</span>) == <span class="string">'2'</span> &amp;&amp; s.charAt(i - <span class="number">1</span>) &lt; <span class="string">'7'</span>)) {</span><br><span class="line">dp[i] += dp[i - <span class="number">2</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[len];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96.不同的二叉搜索树"></a>96.不同的二叉搜索树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>卡塔兰公式:<script type="math/tex; mode=display">G(n) = G(i)*G(n-i)</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) {</span><br><span class="line">dp[i] += dp[j - <span class="number">1</span>] * dp[i - j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="95-不同的二叉搜索树II"><a href="#95-不同的二叉搜索树II" class="headerlink" title="95.不同的二叉搜索树II"></a>95.不同的二叉搜索树II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>emmm</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> helper(<span class="number">1</span>, n);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line">List&lt;TreeNode&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (start &gt; end) {</span><br><span class="line">result.add(<span class="keyword">null</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) {</span><br><span class="line">List&lt;TreeNode&gt; leftList = helper(start, i - <span class="number">1</span>);</span><br><span class="line">List&lt;TreeNode&gt; rightList = helper(i + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (TreeNode left : leftList) {</span><br><span class="line"><span class="keyword">for</span> (TreeNode right : rightList) {</span><br><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">root.left = left;</span><br><span class="line">root.right = right;</span><br><span class="line">result.add(root);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="120-三角形最小路径和"><a href="#120-三角形最小路径和" class="headerlink" title="120.三角形最小路径和"></a>120.三角形最小路径和</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>自底向上DP<script type="math/tex; mode=display">dp[i][j] = min(dp[i+1][j],dp[i+1][j+1]);</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = triangle.size();</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">List&lt;Integer&gt; list = triangle.get(m - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">dp[i] = list.get(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m - i - <span class="number">1</span>; j++) {</span><br><span class="line">dp[j] = Math.min(dp[j], dp[j + <span class="number">1</span>]) + triangle.get(m - i - <span class="number">2</span>).get(j);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-24</title>
      <link href="2020/03/26/2020-3-24/"/>
      <url>2020/03/26/2020-3-24/</url>
      
        <content type="html"><![CDATA[<h2 id="997-找到小镇的法官"><a href="#997-找到小镇的法官" class="headerlink" title="997.找到小镇的法官"></a>997.找到小镇的法官</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>判断出度和入度表</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findJudge</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span>[][] trust)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] inDegree = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span>[] outDegree = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] temp : trust) {</span><br><span class="line">inDegree[temp[<span class="number">1</span>]]++;</span><br><span class="line">outDegree[temp[<span class="number">0</span>]]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) {</span><br><span class="line"><span class="keyword">if</span> (inDegree[i] == N - <span class="number">1</span> &amp;&amp; outDegree[i] == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1387-将整数按权重排序"><a href="#1387-将整数按权重排序" class="headerlink" title="1387.将整数按权重排序"></a>1387.将整数按权重排序</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>记忆化，将每个值的权重记录下来</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (lo &gt; hi) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[hi - lo + <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++) {</span><br><span class="line">dp[i - lo][<span class="number">0</span>] = i;</span><br><span class="line">dp[i - lo][<span class="number">1</span>] = getWeight(i);</span><br><span class="line">}</span><br><span class="line">Arrays.sort(dp, (a, b) -&gt; {</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">1</span>] == b[<span class="number">1</span>]) {</span><br><span class="line"><span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"><span class="keyword">return</span> dp[k - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(num)) {</span><br><span class="line"><span class="keyword">return</span> map.get(num);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">1</span>) {</span><br><span class="line">res = getWeight(num * <span class="number">3</span> + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">res = getWeight(num / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">map.put(num, res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207.课程表"></a>207.课程表</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>找到邻接表找到度入度为0的点</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>{</span><br><span class="line"><span class="comment">//邻接表</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; adjacency = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span>[] inDegree = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line">adjacency.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] temp : prerequisites) {</span><br><span class="line">inDegree[temp[<span class="number">0</span>]]++;</span><br><span class="line">adjacency.get(temp[<span class="number">1</span>]).add(temp[<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line"><span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) {</span><br><span class="line">queue.add(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> pre = queue.poll();</span><br><span class="line">numCourses--;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cur : adjacency.get(pre)) {</span><br><span class="line"><span class="keyword">if</span> (--inDegree[cur] == <span class="number">0</span>) {</span><br><span class="line">queue.add(cur);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> numCourses == <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-23</title>
      <link href="2020/03/26/2020-3-23/"/>
      <url>2020/03/26/2020-3-23/</url>
      
        <content type="html"><![CDATA[<h2 id="102-二叉树的层次遍历"><a href="#102-二叉树的层次遍历" class="headerlink" title="102.二叉树的层次遍历"></a>102.二叉树的层次遍历</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>固定套路</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line">list.add(node.val);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">result.add(list);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="107-二叉树的层次遍历II"><a href="#107-二叉树的层次遍历II" class="headerlink" title="107.二叉树的层次遍历II"></a>107.二叉树的层次遍历II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>在层次遍历的基础上对数组翻转</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) {</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line">list.add(node.val);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">((LinkedList&lt;List&lt;Integer&gt;&gt;) result).addFirst(list);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="103-二叉树的锯齿形层次遍历"><a href="#103-二叉树的锯齿形层次遍历" class="headerlink" title="103.二叉树的锯齿形层次遍历"></a>103.二叉树的锯齿形层次遍历</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>层次遍历时设置变量flag，每次翻转</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) {</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line">list.add(node.val);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">flag = !flag;</span><br><span class="line"><span class="keyword">if</span> (flag) {</span><br><span class="line">Collections.reverse(list);</span><br><span class="line">}</span><br><span class="line">result.add(list);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="876-链表的中间节点"><a href="#876-链表的中间节点" class="headerlink" title="876.链表的中间节点"></a>876.链表的中间节点</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>快慢指针</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">ListNode result = head;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>||result.next==<span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">ListNode fast = head.next.next;</span><br><span class="line"><span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) {</span><br><span class="line">result = result.next;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result.next;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="392-判断子序列"><a href="#392-判断子序列" class="headerlink" title="392.判断子序列"></a>392.判断子序列</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>暴力</p></li><li><p>DP</p><script type="math/tex; mode=display">if(s.charAt(i-1)==t.charAt(j-1)){dp[i][j] = dp[i-1][j-1];}else{dp[i][j] = dp[i][j-1];}</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> lenS = s.length();</span><br><span class="line"><span class="keyword">int</span> lenT = t.length();</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenS; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = pre; j &lt; lenT; j++) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(i) == t.charAt(j)) {</span><br><span class="line">result++;</span><br><span class="line">pre = j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result == lenS;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//DP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> lenS = s.length();</span><br><span class="line"><span class="keyword">int</span> lenT = t.length();</span><br><span class="line">        <span class="keyword">if</span> (lenS==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[lenS + <span class="number">1</span>][lenT + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenT; i++) {</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenS; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lenT; j++) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) {</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">dp[i][j] = dp[i][j - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[lenS][lenT];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="08-01-三步问题"><a href="#08-01-三步问题" class="headerlink" title="08.01.三步问题"></a>08.01.三步问题</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">dp[i] = dp[i-1]+dp[i-2]+dp[i-3];</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">waysToStep</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">3</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) {</span><br><span class="line">result = ((a% <span class="number">1000000007</span> + b% <span class="number">1000000007</span>)% <span class="number">1000000007</span> + c% <span class="number">1000000007</span>) % <span class="number">1000000007</span>;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">c = result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="17-16-按摩师"><a href="#17-16-按摩师" class="headerlink" title="17.16.按摩师"></a>17.16.按摩师</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">dp[i] = max(dp[i-1],dp[i-2]+nums[i]);</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">massage</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; len; i++) {</span><br><span class="line">dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[len - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="16-17-连续数列"><a href="#16-17-连续数列" class="headerlink" title="16.17.连续数列"></a>16.17.连续数列</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>sum存储当前子列和，max存储最大子列和</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (nums.length == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> result = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (sum + nums[i] &lt; nums[i]) {</span><br><span class="line">sum = nums[i];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">sum += nums[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (sum &gt; result) {</span><br><span class="line">result = sum;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-22</title>
      <link href="2020/03/26/2020-3-22/"/>
      <url>2020/03/26/2020-3-22/</url>
      
        <content type="html"><![CDATA[<h2 id="946-使数组唯一的最小增量"><a href="#946-使数组唯一的最小增量" class="headerlink" title="946.使数组唯一的最小增量"></a>946.使数组唯一的最小增量</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><span id="more"></span></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minIncrementForUnique</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = A.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">Arrays.sort(A);</span><br><span class="line"><span class="keyword">int</span> preNum = A[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (A[i] &gt;= preNum + <span class="number">1</span>) {</span><br><span class="line">preNum = A[i];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result += (preNum + <span class="number">1</span> - A[i]);</span><br><span class="line">preNum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116.填充每个节点的下一个右侧节点指针"></a>116.填充每个节点的下一个右侧节点指针</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>层次遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node {</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() {}</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">};</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">Node node = queue.poll();</span><br><span class="line"><span class="keyword">if</span> (i &lt; size - <span class="number">1</span>) {</span><br><span class="line">node.next = queue.peek();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="117-填充每个节点的下一个右侧节点指针II"><a href="#117-填充每个节点的下一个右侧节点指针II" class="headerlink" title="117.填充每个节点的下一个右侧节点指针II"></a>117.填充每个节点的下一个右侧节点指针II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>与116思路相同</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node {</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() {}</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">};</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">Node node = queue.poll();</span><br><span class="line"><span class="keyword">if</span> (i &lt; size - <span class="number">1</span>) {</span><br><span class="line">node.next = queue.peek();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="133-克隆图"><a href="#133-克隆图" class="headerlink" title="133.克隆图"></a>133.克隆图</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node {</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; neighbors;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node() {</span></span><br><span class="line"><span class="comment">        val = 0;</span></span><br><span class="line"><span class="comment">        neighbors = new ArrayList&lt;Node&gt;();</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = new ArrayList&lt;Node&gt;();</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val, ArrayList&lt;Node&gt; _neighbors) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (node == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">}</span><br><span class="line">HashMap&lt;Integer, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">return</span> dfs(node, map);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">dfs</span><span class="params">(Node node, HashMap&lt;Integer, Node&gt; map)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(node.val)) {</span><br><span class="line"><span class="keyword">return</span> map.get(node.val);</span><br><span class="line">}</span><br><span class="line">Node temp = <span class="keyword">new</span> Node(node.val, <span class="keyword">null</span>);</span><br><span class="line">map.put(temp.val, temp);</span><br><span class="line"><span class="keyword">if</span> (node.neighbors != <span class="keyword">null</span>) {</span><br><span class="line">            temp.neighbors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Node n : node.neighbors) {</span><br><span class="line">temp.neighbors.add(dfs(n, map));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a>199.二叉树的右视图</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>层次遍历，保留最右侧的值</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">}</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode node = queue.poll();</span><br><span class="line"><span class="keyword">if</span> (i == size - <span class="number">1</span>) {</span><br><span class="line">result.add(node.val);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.add(node.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200.岛屿数量"></a>200.岛屿数量</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) {</span><br><span class="line">result++;</span><br><span class="line">dfs(grid, i, j);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="string">'0'</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">grid[i][j] = <span class="string">'0'</span>;</span><br><span class="line">dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-21</title>
      <link href="2020/03/26/2020-3-21/"/>
      <url>2020/03/26/2020-3-21/</url>
      
        <content type="html"><![CDATA[<h2 id="733-图像渲染"><a href="#733-图像渲染" class="headerlink" title="733.图像渲染"></a>733.图像渲染</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] floodFill(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) {</span><br><span class="line"><span class="keyword">int</span> color = image[sr][sc];</span><br><span class="line"><span class="keyword">if</span> (color != newColor) {</span><br><span class="line">dfs(image, sr, sc, color, newColor);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> image;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> color, <span class="keyword">int</span> newColor)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (sr &lt; <span class="number">0</span> || sc &lt; <span class="number">0</span> || sr &gt;= image.length || sc &gt;= image[<span class="number">0</span>].length) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (image[sr][sc] != color || image[sr][sc] == newColor) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">image[sr][sc] = newColor;</span><br><span class="line">dfs(image, sr - <span class="number">1</span>, sc, color, newColor);</span><br><span class="line">dfs(image, sr + <span class="number">1</span>, sc, color, newColor);</span><br><span class="line">dfs(image, sr, sc - <span class="number">1</span>, color, newColor);</span><br><span class="line">dfs(image, sr, sc + <span class="number">1</span>, color, newColor);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="690-员工的重要性"><a href="#690-员工的重要性" class="headerlink" title="690.员工的重要性"></a>690.员工的重要性</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Employee info</span></span><br><span class="line"><span class="comment">class Employee {</span></span><br><span class="line"><span class="comment">    // It's the unique id of each node;</span></span><br><span class="line"><span class="comment">    // unique id of this employee</span></span><br><span class="line"><span class="comment">    public int id;</span></span><br><span class="line"><span class="comment">    // the importance value of this employee</span></span><br><span class="line"><span class="comment">    public int importance;</span></span><br><span class="line"><span class="comment">    // the id of direct subordinates</span></span><br><span class="line"><span class="comment">    public List&lt;Integer&gt; subordinates;</span></span><br><span class="line"><span class="comment">};</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(List&lt;Employee&gt; employees, <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">HashMap&lt;Integer, Employee&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee employee : employees) {</span><br><span class="line">map.put(employee.id, employee);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dfs(id, map);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> id, HashMap&lt;Integer, Employee&gt; map)</span> </span>{</span><br><span class="line">Employee employee = map.get(id);</span><br><span class="line"><span class="keyword">int</span> result = employee.importance;</span><br><span class="line"><span class="keyword">for</span> (Integer i : employee.subordinates) {</span><br><span class="line">result += dfs(i, map);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="365-水壶问题"><a href="#365-水壶问题" class="headerlink" title="365.水壶问题"></a>365.水壶问题</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>数学题……</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canMeasureWater</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (x + y &lt; z) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> z == <span class="number">0</span> || x + y == z;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> z % gcd(x, y) == <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (m &lt; n) {</span><br><span class="line"><span class="keyword">int</span> t = m;</span><br><span class="line">m = n;</span><br><span class="line">n = t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (m % n == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> gcd(n, m % n);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="129-求根到叶子节点数字之和"><a href="#129-求根到叶子节点数字之和" class="headerlink" title="129.求根到叶子节点数字之和"></a>129.求根到叶子节点数字之和</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> root.val;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dfs(root, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> result)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> sum = result * <span class="number">10</span> + root.val;</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dfs(root.left, sum) + dfs(root.right, sum);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> result;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> root.val;</span><br><span class="line">}</span><br><span class="line">        result=<span class="number">0</span>;</span><br><span class="line">dfs(root, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> k = sum * <span class="number">10</span> + root.val;</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line">result += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">dfs(root.left, k);</span><br><span class="line">dfs(root.right, k);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="130-被围绕的区域"><a href="#130-被围绕的区域" class="headerlink" title="130.被围绕的区域"></a>130.被围绕的区域</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = board.length;</span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span> &amp;&amp; (i == <span class="number">0</span> || j == <span class="number">0</span> || i == m - <span class="number">1</span> || j == n - <span class="number">1</span>)) {</span><br><span class="line">dfs(board, i, j);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'O'</span>){</span><br><span class="line">    board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (board[i][j] == <span class="string">'#'</span>) {</span><br><span class="line">board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= board.length || j &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || board[i][j] == <span class="string">'#'</span> || board[i][j] == <span class="string">'X'</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">board[i][j] = <span class="string">'#'</span>;</span><br><span class="line">dfs(board, i + <span class="number">1</span>, j);</span><br><span class="line">dfs(board, i - <span class="number">1</span>, j);</span><br><span class="line">dfs(board, i, j + <span class="number">1</span>);</span><br><span class="line">dfs(board, i, j - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-19</title>
      <link href="2020/03/26/2020-3-19/"/>
      <url>2020/03/26/2020-3-19/</url>
      
        <content type="html"><![CDATA[<h2 id="409-最长回文串"><a href="#409-最长回文串" class="headerlink" title="409.最长回文串"></a>409.最长回文串</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>将字符串的每个字符个数存起来，偶数个数的字符可以添加，奇数个数的字符需要减掉一个，最后可以添加一个奇数字符。</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">58</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">result[s.charAt(i) - <span class="string">'A'</span>] += <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">58</span>; i++) {</span><br><span class="line"><span class="keyword">if</span> (result[i] % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">maxLen += result[i];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">maxLen += (result[i] - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> maxLen &lt; s.length() ? maxLen + <span class="number">1</span> : maxLen;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-18</title>
      <link href="2020/03/26/2020-3-18/"/>
      <url>2020/03/26/2020-3-18/</url>
      
        <content type="html"><![CDATA[<h2 id="836-矩阵重叠"><a href="#836-矩阵重叠" class="headerlink" title="836.矩阵重叠"></a>836.矩阵重叠</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>判断两个矩形的四个角落</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRectangleOverlap</span><span class="params">(<span class="keyword">int</span>[] rec1, <span class="keyword">int</span>[] rec2)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> !(rec1[<span class="number">3</span>] &lt;= rec2[<span class="number">1</span>] || rec1[<span class="number">2</span>] &lt;= rec2[<span class="number">0</span>] || rec1[<span class="number">1</span>] &gt;= rec2[<span class="number">3</span>] || rec1[<span class="number">0</span>] &gt;= rec2[<span class="number">2</span>]);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46.全排列"></a>46.全排列</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历+回溯</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) {</span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[len];</span><br><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">dfs(nums, result, path, used, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used, <span class="keyword">int</span> depth)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (depth == nums.length) {</span><br><span class="line">result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (!used[i]) {</span><br><span class="line">path.add(nums[i]);</span><br><span class="line">used[i] = <span class="keyword">true</span>;</span><br><span class="line">dfs(nums, result, path, used, depth + <span class="number">1</span>);</span><br><span class="line">used[i] = <span class="keyword">false</span>;</span><br><span class="line">path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="47-全排列II"><a href="#47-全排列II" class="headerlink" title="47.全排列II"></a>47.全排列II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先搜索+回溯+剪枝</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) {</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[len];</span><br><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">dfs(nums, result, path, used, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; path, <span class="keyword">boolean</span>[] used, <span class="keyword">int</span> depth)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (depth == nums.length) {</span><br><span class="line">result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (used[i]) {</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>]) {</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">path.add(nums[i]);</span><br><span class="line">used[i] = <span class="keyword">true</span>;</span><br><span class="line">dfs(nums, result, path, used, depth + <span class="number">1</span>);</span><br><span class="line">used[i] = <span class="keyword">false</span>;</span><br><span class="line">path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784.字母大小写全排列"></a>784.字母大小写全排列</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>深度优先遍历+回溯（修改值）</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCasePermutation</span><span class="params">(String S)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = S.length();</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">dfs(S, <span class="number">0</span>, len, result, chars);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> len, List&lt;String&gt; result, <span class="keyword">char</span>[] chars)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (start == len) {</span><br><span class="line">result.add(<span class="keyword">new</span> String(chars));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line">chars[start] = s.charAt(start);</span><br><span class="line">dfs(s, start + <span class="number">1</span>, len, result, chars);</span><br><span class="line"><span class="keyword">if</span> (Character.isLetter(s.charAt(start))) {</span><br><span class="line">chars[start] = (<span class="keyword">char</span>) (s.charAt(start) ^ (<span class="number">1</span> &lt;&lt; <span class="number">5</span>));</span><br><span class="line">dfs(s, start + <span class="number">1</span>, len, result, chars);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="213-打家劫舍II"><a href="#213-打家劫舍II" class="headerlink" title="213.打家劫舍II"></a>213.打家劫舍II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>分解成[0…n-1]和[1…n]两种情况即可</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> Math.max(helper(Arrays.copyOfRange(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>)),</span><br><span class="line">helper(Arrays.copyOfRange(nums, <span class="number">1</span>, nums.length)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; len; i++) {</span><br><span class="line">dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[len - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="63-不同路径II"><a href="#63-不同路径II" class="headerlink" title="63.不同路径II"></a>63.不同路径II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>初始条件遇见障碍就停止，dp状态遇见障碍就清零。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"><span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>) {</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][i] == <span class="number">0</span>) {</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line"><span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) {</span><br><span class="line">dp[i][j] = <span class="number">0</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="15-最长回文子串"><a href="#15-最长回文子串" class="headerlink" title="15.最长回文子串"></a>15.最长回文子串</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li><p>暴力法</p></li><li><p>DP</p><script type="math/tex; mode=display">if(s.charAt(i)==s.charAt(j)){if(j-i<3){dp[i][j]=true;}else{dp[i][j] = dp[i+1][j-1];}}else{dp[i][j]=false;}</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">}</span><br><span class="line">String result = s.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) {</span><br><span class="line"><span class="keyword">if</span> (j - i + <span class="number">1</span> &gt; maxLen &amp;&amp; valid(s, i, j)) {</span><br><span class="line">maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">result = s.substring(i, j + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(left) != s.charAt(right)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//DP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; len; j++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++) {</span><br><span class="line"><span class="keyword">if</span> (s.charAt(j) == s.charAt(i)) {</span><br><span class="line"><span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) {</span><br><span class="line">dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">dp[i][j] = <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (dp[i][j]) {</span><br><span class="line"><span class="keyword">if</span> (j - i + <span class="number">1</span> &gt; maxLen) {</span><br><span class="line">maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">start = i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322.零钱兑换"></a>322.零钱兑换</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">if(amount>=coins[j]){dp[i] = max(dp[i],dp[i-coins[j]]+1)}</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (coins.length &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coins.length; j++) {</span><br><span class="line"><span class="keyword">if</span> (i &gt;= coins[j]) {</span><br><span class="line">dp[i] = Math.min(dp[i], dp[i - coins[j]] + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[amount] == amount + <span class="number">1</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="121-买卖股票的最佳时机（DP）"><a href="#121-买卖股票的最佳时机（DP）" class="headerlink" title="121.买卖股票的最佳时机（DP）"></a>121.买卖股票的最佳时机（DP）</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">dp[i][0] = max(dp[i-1][0],dp[i-1][1]+prices[i])dp[i][1] = max(dp[i-1][1],-prices[i])return dp[len-1][0];</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = prices.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len][<span class="number">2</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], -prices[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="122-买卖股票的最佳时机II"><a href="#122-买卖股票的最佳时机II" class="headerlink" title="122.买卖股票的最佳时机II"></a>122.买卖股票的最佳时机II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">dp[i][0] = max(dp[i-1][0],dp[i-1][1]+prices[i])dp[i][1] = max(dp[i-1][1],dp[i-1][0]-prices[i])return dp[len-1][0];</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = prices.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len][<span class="number">2</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="309-最佳买卖股票时机含冷冻期"><a href="#309-最佳买卖股票时机含冷冻期" class="headerlink" title="309.最佳买卖股票时机含冷冻期"></a>309.最佳买卖股票时机含冷冻期</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP（注意边界）<script type="math/tex; mode=display">dp[0][0]=0;dp[0][1]=-prices[0];dp[1][0] = max(dp[0][0],dp[0][1]+prices[1])dp[1][1] = max(dp[0][1],dp[0][0]-prices[1])dp[i][0] = max(dp[i-1][0],dp[i-1][1]+prices[i])dp[i][1] = max(dp[i-1][1],dp[i-2][0]-prices[i])return dp[len-1][0];</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = prices.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len][<span class="number">2</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>]; </span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>][<span class="number">0</span>],dp[<span class="number">0</span>][<span class="number">1</span>]+prices[<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>][<span class="number">1</span>],-prices[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; len; i++) {</span><br><span class="line">dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">2</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-17</title>
      <link href="2020/03/26/2020-3-17/"/>
      <url>2020/03/26/2020-3-17/</url>
      
        <content type="html"><![CDATA[<h2 id="1160-拼写单词"><a href="#1160-拼写单词" class="headerlink" title="1160.拼写单词"></a>1160.拼写单词</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>将字符表chars的字母个数用数组保存起来，遍历每个词汇word，将word的字母个数也用数组保存比较其字母的个数即可。</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countCharacters</span><span class="params">(String[] words, String chars)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] countChars = counter(chars);</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (String s : words) {</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span>[] countWord = counter(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) {</span><br><span class="line"><span class="keyword">if</span> (countChars[i] &lt; countWord[i]) {</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (flag) {</span><br><span class="line">result += s.length();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] counter(String chars) {</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length(); i++) {</span><br><span class="line"><span class="keyword">char</span> ch = chars.charAt(i);</span><br><span class="line">result[ch - <span class="string">'a'</span>] += <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="105-从前序和中序遍历序列构造二叉树"><a href="#105-从前序和中序遍历序列构造二叉树" class="headerlink" title="105.从前序和中序遍历序列构造二叉树"></a>105.从前序和中序遍历序列构造二叉树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>先从前序序列中获取根节点，然后在中序序列中找到根节点的位置，并将中序序列划分为左右子树，然后递归创建左右子树。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = preorder.length;</span><br><span class="line">HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">map.put(inorder[i], i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> helper(preorder, <span class="number">0</span>, len - <span class="number">1</span>, inorder, <span class="number">0</span>, len - <span class="number">1</span>, map);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd, HashMap&lt;Integer, Integer&gt; map)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (preStart &gt; preEnd) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> rootValue = preorder[preStart];</span><br><span class="line"><span class="keyword">int</span> rootIndex = map.get(rootValue);</span><br><span class="line"><span class="keyword">int</span> len = rootIndex - inStart;</span><br><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(rootValue);</span><br><span class="line">root.left = helper(preorder, preStart + <span class="number">1</span>, </span><br><span class="line">preStart + len, inorder, inStart, rootIndex - <span class="number">1</span>, map);</span><br><span class="line">root.right = helper(preorder, preStart + len + <span class="number">1</span>, </span><br><span class="line">preEnd, inorder, rootIndex + <span class="number">1</span>, inEnd, map);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="106-从后序和中序遍历序列构造二叉树"><a href="#106-从后序和中序遍历序列构造二叉树" class="headerlink" title="106.从后序和中序遍历序列构造二叉树"></a>106.从后序和中序遍历序列构造二叉树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>先从后序序列中获取根节点，然后在中序序列中找到根节点的位置，并将中序序列划分为左右子树，然后递归创建左右子树。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = inorder.length;</span><br><span class="line">HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">map.put(inorder[i], i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> helper(inorder, <span class="number">0</span>, len - <span class="number">1</span>, postorder, <span class="number">0</span>, len - <span class="number">1</span>, map);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd, <span class="keyword">int</span>[] postorder, <span class="keyword">int</span> postStart, <span class="keyword">int</span> postEnd, HashMap&lt;Integer, Integer&gt; map)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (postStart &gt; postEnd) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> rootValue = postorder[postEnd];</span><br><span class="line"><span class="keyword">int</span> rootIndex = map.get(rootValue);</span><br><span class="line"><span class="keyword">int</span> len = rootIndex - inStart;</span><br><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(rootValue);</span><br><span class="line">root.left = helper(inorder, inStart, rootIndex - <span class="number">1</span>,</span><br><span class="line">postorder, postStart, postStart + len - <span class="number">1</span>, map);</span><br><span class="line">root.right = helper(inorder, rootIndex + <span class="number">1</span>, inEnd,</span><br><span class="line">postorder, postStart + len, postEnd - <span class="number">1</span>, map);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="109-有序链表转换二叉搜索树"><a href="#109-有序链表转换二叉搜索树" class="headerlink" title="109.有序链表转换二叉搜索树"></a>109.有序链表转换二叉搜索树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>使用快慢指针，当快指针走向链表尾部，慢指针指向中间节点的前一个节点，使用中间节点作为根节点，然后分别创建左右子树。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (head.next == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TreeNode(head.val);</span><br><span class="line">}</span><br><span class="line">ListNode pre = head;</span><br><span class="line">ListNode fast = head.next.next;</span><br><span class="line"><span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) {</span><br><span class="line">pre = pre.next;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> rootValue = pre.next.val;</span><br><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(rootValue);</span><br><span class="line">ListNode rightHead = pre.next.next;</span><br><span class="line">pre.next = <span class="keyword">null</span>;</span><br><span class="line">root.left = sortedListToBST(head);</span><br><span class="line">root.right = sortedListToBST(rightHead);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="113-路径总和II"><a href="#113-路径总和II" class="headerlink" title="113.路径总和II"></a>113.路径总和II</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>从根节点开始遍历，直到遇见叶子节点并且路径和为sum，将该条路径加入结果，之后删点该叶子节点。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) {</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">getLists(root, path, lists, sum);</span><br><span class="line"><span class="keyword">return</span> lists;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getLists</span><span class="params">(TreeNode root, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; lists, <span class="keyword">int</span> sum)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">path.add(root.val);</span><br><span class="line">sum -= root.val;</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; sum == <span class="number">0</span>) {</span><br><span class="line">lists.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (root.left != <span class="keyword">null</span>) {</span><br><span class="line">getLists(root.left, path, lists, sum);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (root.right != <span class="keyword">null</span>) {</span><br><span class="line">getLists(root.right, path, lists, sum);</span><br><span class="line">}</span><br><span class="line">path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="114-二叉树展开为链表"><a href="#114-二叉树展开为链表" class="headerlink" title="114.二叉树展开为链表"></a>114.二叉树展开为链表</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>从根节点开始遍历，若无左节点，则<code>root = root.right</code>；若有左节点，将右子树放在左子树的最右节点后，然后将左子树放在根节点的右子树上，根节点的左子树为空。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (root != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span>) {</span><br><span class="line">root = root.right;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">TreeNode temp = root.left;</span><br><span class="line"><span class="keyword">while</span> (temp.right != <span class="keyword">null</span>) {</span><br><span class="line">temp = temp.right;</span><br><span class="line">}</span><br><span class="line">temp.right = root.right;</span><br><span class="line">root.right = root.left;</span><br><span class="line">                root.left = <span class="keyword">null</span>;</span><br><span class="line">root = root.right;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1302-层次最深叶子节点的和"><a href="#1302-层次最深叶子节点的和" class="headerlink" title="1302.层次最深叶子节点的和"></a>1302.层次最深叶子节点的和</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>层次遍历树，记录每层的节点之和</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">queue.offer(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode temp = queue.poll();</span><br><span class="line">result += temp.val;</span><br><span class="line"><span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.offer(temp.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.offer(temp.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1315-祖父节点值为偶数的节点和"><a href="#1315-祖父节点值为偶数的节点和" class="headerlink" title="1315.祖父节点值为偶数的节点和"></a>1315.祖父节点值为偶数的节点和</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>层次遍历树，遇见节点值为偶数，加上将其孙子节点的和。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumEvenGrandparent</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> dfs(root);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> ((root.val &amp; <span class="number">1</span>) == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> getChildSum(root.left) + getChildSum(root.right) + dfs(root.left) + dfs(root.right);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> dfs(root.left) + dfs(root.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getChildSum</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> leftNum = root.left == <span class="keyword">null</span> ? <span class="number">0</span> : root.left.val;</span><br><span class="line"><span class="keyword">int</span> rightNum = root.right == <span class="keyword">null</span> ? <span class="number">0</span> : root.right.val;</span><br><span class="line"><span class="keyword">return</span> leftNum + rightNum;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>层次遍历树，返回最后一层的第一个节点值</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">queue.offer(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line"><span class="keyword">int</span> size = queue.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">TreeNode temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>){</span><br><span class="line">                    result = temp.val;</span><br><span class="line">                }</span><br><span class="line"><span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) {</span><br><span class="line">queue.offer(temp.left);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) {</span><br><span class="line">queue.offer(temp.right);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-16</title>
      <link href="2020/03/26/2020-3-16/"/>
      <url>2020/03/26/2020-3-16/</url>
      
        <content type="html"><![CDATA[<h2 id="01-06-字符串压缩"><a href="#01-06-字符串压缩" class="headerlink" title="01.06.字符串压缩"></a>01.06.字符串压缩</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>代码通俗…</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">compressString</span><span class="params">(String S)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (S == <span class="keyword">null</span> || S.length() &lt;= <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">}</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">stringBuilder.append(S.charAt(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; S.length(); i++) {</span><br><span class="line"><span class="keyword">if</span> (S.charAt(i) == S.charAt(i - <span class="number">1</span>)) {</span><br><span class="line">cnt++;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">stringBuilder.append(cnt).append(S.charAt(i));</span><br><span class="line">cnt = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">        stringBuilder.append(cnt);</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString().length() &gt; S.length() ? S : stringBuilder.toString();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>对于二叉搜索树，左节点必须小于根，右节点必须大于根，并且每个子树也是如此。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> helper(root, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode root, Integer lower, Integer upper)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> val = root.val;</span><br><span class="line"><span class="keyword">if</span> ((lower != <span class="keyword">null</span> &amp;&amp; val &lt;= lower) || (upper != <span class="keyword">null</span> &amp;&amp; val &gt;= upper)) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> helper(root.right, val, upper) &amp;&amp; helper(root.left, lower, val);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-15</title>
      <link href="2020/03/26/2020-3-15/"/>
      <url>2020/03/26/2020-3-15/</url>
      
        <content type="html"><![CDATA[<h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62.不同路径"></a>62.不同路径</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">dp[0][0...n]=1dp[0...m][0]=1dp[i][j] = dp[i-1][j]+dp[i][j-1]</script><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//优化之后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">dp[j] = dp[j] + dp[j - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64.最小路径和"></a>64.最小路径和</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">dp[i][j] = min(dp[i-1][j],min[i-1][j])+grid[i][j]</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意初始条件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = grid.length;</span><br><span class="line"><span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="keyword">if</span> (m &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + grid[i][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72.编辑距离"></a>72.编辑距离</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">if(word1.charAt(i-1)==word2.charAt(j-1)){dp[i][j] = dp[i-1][j-1]}else{dp[i][j] = min(dp[i-1][j-1],dp[i][j-1],dp[i-1][j])+1}</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> m = word1.length();</span><br><span class="line"><span class="keyword">int</span> n = word2.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line"><span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) {</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[m][n];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="695-岛屿的最大面积"><a href="#695-岛屿的最大面积" class="headerlink" title="695.岛屿的最大面积"></a>695.岛屿的最大面积</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>递归遍历……（还不太理解）</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) {</span><br><span class="line">result = Math.max(result, dfs(i, j, grid));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] grid)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[i].length || grid[i][j] == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">grid[i][j] = <span class="number">0</span>;</span><br><span class="line">num += dfs(i - <span class="number">1</span>, j, grid);</span><br><span class="line">num += dfs(i + <span class="number">1</span>, j, grid);</span><br><span class="line">num += dfs(i, j - <span class="number">1</span>, grid);</span><br><span class="line">num += dfs(i, j + <span class="number">1</span>, grid);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-14</title>
      <link href="2020/03/26/2020-3-14/"/>
      <url>2020/03/26/2020-3-14/</url>
      
        <content type="html"><![CDATA[<h2 id="300-最长上升子序列"><a href="#300-最长上升子序列" class="headerlink" title="300.最长上升子序列"></a>300.最长上升子序列</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">if(num[i]>num[j])dp[i] = max(dp[i],dp[j]+1)</script><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">Arrays.fill(dp, <span class="number">1</span>);<span class="comment">//初始化为1</span></span><br><span class="line"><span class="keyword">int</span> maxLenghth = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) {</span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; nums[j]) {</span><br><span class="line">dp[i] = Math.max(dp[j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">maxLenghth = Math.max(dp[i], maxLenghth);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> maxLenghth;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>递归的方式，先创建根节点，在创建左节点，右节点。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (start &gt; end) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;<span class="comment">//防止溢出</span></span><br><span class="line">TreeNode root = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">root.left = helper(nums, start, mid - <span class="number">1</span>);</span><br><span class="line">root.right = helper(nums, mid + <span class="number">1</span>, end);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>递归遍历每个节点，获取左右节点的深度，比较深度之差。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> Math.abs(getHight(root.left) - getHight(root.right)) &lt; <span class="number">2</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getHight</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + Math.max(getHight(root.left), getHight(root.right));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112.路径总和"></a>112.路径总和</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>递归遍历根节点，当该节点不是叶子节点时，分别向左右递归，当左右节点为空时判断sum是否为零。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">sum -= root.val;</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> sum == <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> hasPathSum(root.left, sum) || hasPathSum(root.right, sum);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257.二叉树的所有路径"></a>257.二叉树的所有路径</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>官方：最直观的方法是使用递归。在递归遍历二叉树时，需要考虑当前的节点和它的孩子节点。如果当前的节点不是叶子节点，则在当前的路径末尾添加该节点，并递归遍历该节点的每一个孩子节点。如果当前的节点是叶子节点，则在当前的路径末尾添加该节点后，就得到了一条从根节点到叶子节点的路径，可以把该路径加入到答案中。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">LinkedList&lt;String&gt; paths = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">constructPath(root, <span class="string">""</span>, paths);</span><br><span class="line"><span class="keyword">return</span> paths;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">constructPath</span><span class="params">(TreeNode root, String path, LinkedList&lt;String&gt; paths)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">path += Integer.toString(root.val);</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line">paths.add(path);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">path += <span class="string">"-&gt;"</span>;<span class="comment">//当前节点不是叶子节点，继续遍历</span></span><br><span class="line">constructPath(root.left, path, paths);</span><br><span class="line">constructPath(root.right, path, paths);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="559-N叉树的最大深度"><a href="#559-N叉树的最大深度" class="headerlink" title="559.N叉树的最大深度"></a>559.N叉树的最大深度</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>遍历各子节点即可，与二叉树思路相同</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node {</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() {}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, List&lt;Node&gt; _children) {</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">};</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Node node : root.children) {</span><br><span class="line">max = Math.max(max, maxDepth(node));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> max + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="872-叶子相似的树"><a href="#872-叶子相似的树" class="headerlink" title="872.叶子相似的树"></a>872.叶子相似的树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>用list将树的叶子节点保存起来，再进行比较</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">leafSimilar</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>{</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; nums1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt; nums2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">getNums(root1, nums1);</span><br><span class="line">getNums(root2, nums2);</span><br><span class="line"><span class="keyword">return</span> nums1.equals(nums2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getNums</span><span class="params">(TreeNode root, ArrayList&lt;Integer&gt; nums)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line">nums.add(root.val);</span><br><span class="line">}</span><br><span class="line">getNums(root.left, nums);</span><br><span class="line">getNums(root.right, nums);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-13</title>
      <link href="2020/03/26/2020-3-13/"/>
      <url>2020/03/26/2020-3-13/</url>
      
        <content type="html"><![CDATA[<h2 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169.多数元素"></a>169.多数元素</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>哈希</li><li>排序法，次数大于<code>n/2</code>的元素必定出现在排序后<code>nums[n/2]</code>的位置上</li><li><code>Boyer-Moore</code>投票算法，将众数记为<code>+1</code>，其他数记为<code>-1</code>，设置计数器<code>count</code>和<code>candidate</code>，当<code>count=0</code>时，令<code>candidate = num</code>。当<code>candidate==num</code>时，<code>count+1</code>，否则<code>count-1</code></li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>{</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> candidate = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num:nums){</span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">0</span>){</span><br><span class="line">candidate = num;</span><br><span class="line">}</span><br><span class="line">count = count + (candidate==num?<span class="number">1</span>:-<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> candidate;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP打表</li><li>斐波那契数</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//法二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> second = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">second = first + second;</span><br><span class="line">first = second - first;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> second;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a>198.打家劫舍</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP打表<script type="math/tex; mode=display">dp[i] = max(dp[i-2]+nums[i],dp[i-1])</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (nums.length == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (nums.length == <span class="number">2</span>) {</span><br><span class="line"><span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++) {</span><br><span class="line">dp[i] = Math.max(nums[i] + dp[i - <span class="number">2</span>], dp[i - <span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746.使用最小花费爬楼梯"></a>746.使用最小花费爬楼梯</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>DP<script type="math/tex; mode=display">dp[i] = cost[i] + min(dp[i-1],dp[i-2])</script></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> second = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cost.length; i++) {</span><br><span class="line">cur = cost[i] + Math.min(first, second);</span><br><span class="line">first = second;</span><br><span class="line">second = cur;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> Math.min(first, second);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (cost.length == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (cost.length == <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> cost[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[cost.length + <span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>] = cost[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>] = cost[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; cost.length; i++) {</span><br><span class="line">dp[i] = cost[i] + Math.min(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>]);</span><br><span class="line">}</span><br><span class="line">dp[cost.length] = Math.min(dp[cost.length - <span class="number">1</span>], dp[cost.length - <span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> dp[cost.length];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>二叉树的深度遍历</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> left_height = maxDepth(root.left);</span><br><span class="line"><span class="keyword">int</span> right_height = maxDepth(root.right);</span><br><span class="line"><span class="keyword">return</span> Math.max(left_height, right_height) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>官方：它们的两个根结点具有相同的值,且每个树的右子树都与另一个树的左子树镜像对称</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> isMirror(root.left, root.right);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMirror</span><span class="params">(TreeNode left, TreeNode right)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (left == <span class="keyword">null</span> || right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (left.val == right.val) &amp;&amp; isMirror(left.left, right.right) &amp;&amp; isMirror(left.right, right.left);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100.相同的树"></a>100.相同的树</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>官方：它们的两个根结点具有相同的值,且每个树的右子树都与另一个树的树的右子树相同，每个树的左子树都与另一个树的树的左子树相同</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> (p.val == q.val) &amp;&amp; isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>当<code>root==null</code>，返回0</li><li>当<code>root.left==null&amp;&amp;root.right==null</code>,返回1</li><li>当<code>root.left==null||root.right==null</code>,返回不为空的子树高度</li><li>当子树都不为空，返回较小深度</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> left_height = minDepth(root.left);</span><br><span class="line"><span class="keyword">int</span> right_height = minDepth(root.right);</span><br><span class="line"><span class="keyword">return</span> (root.left == <span class="keyword">null</span> || root.right == <span class="keyword">null</span>) ? left_height + right_height + <span class="number">1</span> : Math.min(left_height, right_height) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-12</title>
      <link href="2020/03/26/2020-3-12/"/>
      <url>2020/03/26/2020-3-12/</url>
      
        <content type="html"><![CDATA[<h2 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>暴力法</li><li>官方解法，设置一个<code>min</code>存储历史最小值，<code>max</code>存储最大值，遍历数组，当遇见更小值时更新<code>min</code>，当<code>prices[i]-min&gt;max</code>时更新<code>max</code></li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (prices.length &lt; <span class="number">1</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min = prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (min &gt; prices[i]) {</span><br><span class="line">min = prices[i];</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - min &gt; max){</span><br><span class="line">max = prices[i] - min;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="944-删列造序（统计有多少降序的）"><a href="#944-删列造序（统计有多少降序的）" class="headerlink" title="944.删列造序（统计有多少降序的）"></a>944.删列造序（统计有多少降序的）</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>遍历每一列，只要上一行大于下一行，表示降序，删除</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDeletionSize</span><span class="params">(String[] A)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> D = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A[<span class="number">0</span>].length(); i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length - <span class="number">1</span>; j++) {</span><br><span class="line"><span class="keyword">if</span> (A[j].charAt(i) &gt; A[j + <span class="number">1</span>].charAt(i)) {</span><br><span class="line">D++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> D;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1071-字符串的最大公因子"><a href="#1071-字符串的最大公因子" class="headerlink" title="1071.字符串的最大公因子"></a>1071.字符串的最大公因子</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路（大佬）：</p><ol><li>当str1 + str2 = str2 + str1时表示存在公因子，否则不存在</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">gcdOfStrings</span><span class="params">(String str1, String str2)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (!(str1 + str2).equals(str2 + str1)) {</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> str1.substring(<span class="number">0</span>, gcd(str1.length(), str2.length()));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="53-最大子序和（Kadane’s-Algorithm）"><a href="#53-最大子序和（Kadane’s-Algorithm）" class="headerlink" title="53.最大子序和（Kadane’s Algorithm）"></a>53.最大子序和（Kadane’s Algorithm）</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>（同42）从头开始遍历数组，用<code>sum</code>保存部分和，<code>max</code>存储最大和，当<code>sum</code>小于<code>nums[i]</code>的值，舍弃<code>sum</code>，令<code>sum=nums[i]</code>，从当前开始遍历，比较<code>max</code>与<code>sum</code>的大小</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> sum = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (sum + nums[i] &lt; nums[i]) {</span><br><span class="line">sum = nums[i];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">sum += nums[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (max &lt; sum) {</span><br><span class="line">max = sum;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-3-11</title>
      <link href="2020/03/26/2020-3-11/"/>
      <url>2020/03/26/2020-3-11/</url>
      
        <content type="html"><![CDATA[<h2 id="1013-将数组分成和相等的三个部分"><a href="#1013-将数组分成和相等的三个部分" class="headerlink" title="1013.将数组分成和相等的三个部分"></a>1013.将数组分成和相等的三个部分</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>当整个数组的和不是3的倍数时，无法等分成三组，返回<code>false</code></li><li>遍历数组求和，当部分和等于整个数组和的1/3时做标记，并将部分和置为零，当标记等于2说明能够分组</li><li>或者数组从前后分别求部分和，两个部分和等于整个数组和的1/3，说明能够分组</li></ol><span id="more"></span><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canThreePartsEqualSum</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> recordSum = <span class="number">0</span>,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) {</span><br><span class="line">sum+=A[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(sum%<span class="number">3</span>!=<span class="number">0</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length-<span class="number">1</span>; i++) {</span><br><span class="line">recordSum+=A[i];</span><br><span class="line"><span class="keyword">if</span>(recordSum==(sum/<span class="number">3</span>)){</span><br><span class="line">num++;</span><br><span class="line">recordSum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">2</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1025-除数问题"><a href="#1025-除数问题" class="headerlink" title="1025.除数问题"></a>1025.除数问题</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>当<code>N</code>为偶数时，<code>Alice</code>先手，只要减去1，<code>Bob</code>就会得到一个奇数，只能减去奇数，<code>Alice</code>得到偶数，最终当<code>N=2</code>时结束，<code>Alice</code>获胜</li><li>当N为奇数时，<code>Alice</code>先手，<code>Bob</code>会得到一个偶数，只要减去1，<code>Alice</code>就会得到奇数，最终当<code>N=2</code>时，<code>Bob</code>获胜</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">divisorGame</span><span class="params">(<span class="keyword">int</span> N)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(N%<span class="number">2</span>==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="303-区域和检索-数组不可变"><a href="#303-区域和检索-数组不可变" class="headerlink" title="303.区域和检索-数组不可变"></a>303.区域和检索-数组不可变</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路（官方）：</p><ol><li>解法一，直接暴力</li><li>解法二，使用数组记录从0开始到i的部分和，获取i到j的部分和就可以<code>sum[j+1]-sum[i]</code></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] sum;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        sum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">            sum[i+<span class="number">1</span>] = sum[i] + nums[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> sum[j+<span class="number">1</span>]-sum[i];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="42-连续子数组的最大和（Kadane’s-Algorithm）"><a href="#42-连续子数组的最大和（Kadane’s-Algorithm）" class="headerlink" title="42.连续子数组的最大和（Kadane’s Algorithm）"></a>42.连续子数组的最大和（Kadane’s Algorithm）</h2><p><span class="github-emoji"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>解题思路：</p><ol><li>从头开始遍历数组，用<code>sum</code>保存部分和，<code>max</code>存储最大和，当<code>sum</code>小于<code>nums[i]</code>的值，舍弃<code>sum</code>，令<code>sum=nums[i]</code>，从当前开始遍历，比较<code>max</code>与<code>sum</code>的大小</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> sum = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line"><span class="keyword">if</span> (sum + nums[i] &lt; nums[i]) {</span><br><span class="line">sum = nums[i];</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">sum += nums[i];</span><br><span class="line">}</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max) {</span><br><span class="line">max = sum;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="2020/02/17/springboot/"/>
      <url>2020/02/17/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><ul><li><code>spring-boot-starter</code>:核心模块，包括自动配置支持、日志和YAML</li><li><code>spring-boot-starter-test</code>:测试模块，包括JUnit、Hamcrest、Mockitso</li><li><code>spring-boot-starter-web</code>:Web模块</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line"><span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="attr">&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line"><span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="attr">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line"><span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="attr">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建HelloController</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value="/users")</span><span class="comment">//下面的映射都在/users下</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>{</span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单元测试</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUint4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SoringApplicationConfiguration(classes = MockServletContext.class)</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span></span>{</span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        mvc = MockMvcBuliders.standaloneSetup(<span class="keyword">new</span> HelloController()).builder();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> getHello <span class="keyword">throws</span> Exception{</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>)</span><br><span class="line">                   .accept(MediaType.APPLICATION_JSON))</span><br><span class="line">            .andExpect(status().isOK())</span><br><span class="line">            .andExcept(content().string(equalTo(<span class="string">"Hello World"</span>)));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用MockServletContext来构建一个空的WebAppliactionContext,然后创建的HelloController就可以再@Before中创建并传递到MockMvcBuliders.standaloneSetup()中。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>@Controller</code>: 修饰class，用来创建http请求的对象</li><li><code>@RestController</code>: Spring4后加入的注解，相当于使用<code>@Controller</code>和<code>@ResponseBody</code>(用于返回json格式)</li><li><code>@RequestMapping</code>: 配置url映射</li></ul><p><code>application.properties</code></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">com.wan.example.name</span>=<span class="string">wanfeng</span></span><br><span class="line"><span class="meta">com.wan.example.age</span>=<span class="string">22</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再application.properties中定义然后通过@Value("${属性名}")注解来加载对应配置属性</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProperties</span></span>{</span><br><span class="line">    <span class="meta">@Value("${com.wan.example.name}")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value("${com.wan.example.age}")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//getter，setter</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过单元测试验证属性是否根据配置文件加载</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringApplicationConfiguration(Application.class)</span><span class="comment">//启动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span></span>{</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    <span class="keyword">private</span> MyProperties myProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        Assert.assertEquals(myProperties.getName(),<span class="string">"wanfneg"</span>);</span><br><span class="line">        Assert.assertEquals(myProperties.getAge(),<span class="number">22</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="通过命令行设置属性值"><a href="#通过命令行设置属性值" class="headerlink" title="通过命令行设置属性值"></a>通过命令行设置属性值</h4><p><code>java -jar xxx.jar --server.port=8888</code></p><h4 id="屏蔽命令行访问属性设置"><a href="#屏蔽命令行访问属性设置" class="headerlink" title="屏蔽命令行访问属性设置"></a>屏蔽命令行访问属性设置</h4><p><code>SpringApplication.setAddCommandLineProperties(false)</code></p><h4 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h4><p>在Spring Boot中多环境配置文件名需要满足<code>application-{profile}.properties</code>的格式，其中</p><ul><li><code>application-dev.properties</code>:开发环境</li><li><code>application-test.properties</code>:测试环境</li><li><code>application-prod.properties</code>:生产环境</li></ul><p>在<code>application.properties</code>中设置<code>spring.profiles.active=xxx</code>就会加载对应配置文件</p><h1 id="构建RESTful-API"><a href="#构建RESTful-API" class="headerlink" title="构建RESTful API"></a>构建RESTful API</h1><div class="table-container"><table><thead><tr><th>请求类型</th><th>URL</th><th>功能说明</th></tr></thead><tbody><tr><td>GET</td><td>/users</td><td>查询用户列表</td></tr><tr><td>POST</td><td>/users</td><td>创建一个用户</td></tr><tr><td>GET</td><td>/users/id</td><td>根据id查询一个用户</td></tr><tr><td>PUT</td><td>/users/id</td><td>根据id更新一个用户</td></tr><tr><td>DELETE</td><td>/users/id</td><td>根据id删除一个用户</td></tr></tbody></table></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter,setter</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserController</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer,User&gt; userMap = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Integer,User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/"的GET请求，用来获取用户列表</span></span><br><span class="line">        <span class="comment">// 还可以通过@RequestParam从页面中传递参数来进行查询条件或者翻页信息的传递</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;(userMap.values());</span><br><span class="line">        <span class="keyword">return</span>  users;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/",method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(<span class="meta">@ModelAttribute</span> User user)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/"的POST请求，用来创建User</span></span><br><span class="line">        <span class="comment">// 除了@ModelAttribute绑定参数之外，还可以通过@RequestParam从页面中传递参数</span></span><br><span class="line">        userMap.put(user.getId(),user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/{id}",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/{id}"的GET请求，用来获取url中id值的User信息</span></span><br><span class="line">        <span class="comment">// url中的id可通过@PathVariable绑定到函数的参数中</span></span><br><span class="line">        <span class="keyword">return</span> userMap.get(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/{id}",method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@ModelAttribute</span> User user)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/{id}"的PUT请求，用来更新User信息</span></span><br><span class="line">        User u = userMap.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        userMap.put(id,u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/{id}",method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/{id}"的PUT请求，用来更新User信息</span></span><br><span class="line">        userMap.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//Test</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MockServletContext.class)</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> UserController()).build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserController</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line"></span><br><span class="line">        RequestBuilder request = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. get</span></span><br><span class="line">        request = get(<span class="string">"/users/"</span>);</span><br><span class="line">        mvc.perform(request)</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"[]"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. post</span></span><br><span class="line">        request = post(<span class="string">"/users/"</span>)</span><br><span class="line">                    .param(<span class="string">"id"</span>,<span class="string">"1"</span>)</span><br><span class="line">                    .param(<span class="string">"name"</span>,<span class="string">"wan"</span>)</span><br><span class="line">                    .param(<span class="string">"age"</span>,<span class="string">"22"</span>);</span><br><span class="line">        mvc.perform(request)</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"success"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 3. get{id=1}</span></span><br><span class="line"><span class="comment">//        request = get("/users/1");</span></span><br><span class="line"><span class="comment">//        mvc.perform(request)</span></span><br><span class="line"><span class="comment">//                .andExpect(content().string(equalTo("{" +</span></span><br><span class="line"><span class="comment">//                        "id:" + 1+</span></span><br><span class="line"><span class="comment">//                        "name:" + "wan"+</span></span><br><span class="line"><span class="comment">//                        "age:" +22+</span></span><br><span class="line"><span class="comment">//                        "}")));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. pust</span></span><br><span class="line">        request = put(<span class="string">"/users/1"</span>)</span><br><span class="line">                .param(<span class="string">"name"</span>,<span class="string">"feng"</span>)</span><br><span class="line">                .param(<span class="string">"age"</span>,<span class="string">"23"</span>);</span><br><span class="line">        mvc.perform(request)</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"success"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. delete</span></span><br><span class="line">        request = delete(<span class="string">"/users/1"</span>);</span><br><span class="line">        mvc.perform(request)</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"success"</span>)));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      SpringApplication.run(Application.class,args);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="使用swagger构建RESTful-API文档"><a href="#使用swagger构建RESTful-API文档" class="headerlink" title="使用swagger构建RESTful API文档"></a>使用swagger构建RESTful API文档</h1><p>Swagger2的依赖</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;2.2.2&lt;/version&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;2.2.2&lt;/version&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>Application.java</code>同级创建Swagger2的配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swagger2</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.wan"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"more...."</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"wan"</span>)</span><br><span class="line">                .contact(<span class="string">"wan"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过<span class="doctag">@Configuration</span>注解，让Spring来加载该类配置。再通过<span class="doctag">@EnableSwagger</span>2注解来启用Swagger2。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。</span></span><br><span class="line"><span class="comment"> * select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被<span class="doctag">@ApiIgnore</span>指定的请求）。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><p>添加文档内容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在完成了上述配置后，其实已经可以生产文档内容，</span></span><br><span class="line"><span class="comment">* 但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，</span></span><br><span class="line"><span class="comment">* 我们通常需要自己增加一些说明来丰富文档内容。</span></span><br><span class="line"><span class="comment">* 我们通过<span class="doctag">@ApiOperation</span>注解来给API增加说明、通过<span class="doctag">@ApiImplicitParams</span>、<span class="doctag">@ApiImplicitParam</span>注解来 给参数增加说明。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer,User&gt; userMap = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Integer,User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = "获取用户列表",notes = "")</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = {""},method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/"的GET请求，用来获取用户列表</span></span><br><span class="line">        <span class="comment">// 还可以通过@RequestParam从页面中传递参数来进行查询条件或者翻页信息的传递</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;(userMap.values());</span><br><span class="line">        <span class="keyword">return</span>  users;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = "创建用户",notes = "根据User对象创建用户")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = "user",value = "用户实体user",required = true,dataType = "User")</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/",method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(<span class="meta">@ModelAttribute</span> User user)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/"的POST请求，用来创建User</span></span><br><span class="line">        <span class="comment">// 除了@ModelAttribute绑定参数之外，还可以通过@RequestParam从页面中传递参数</span></span><br><span class="line">        userMap.put(user.getId(),user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value="获取用户详细信息", notes="根据url的id来获取用户详细信息")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = "id", value = "用户ID", required = true, dataType = "Integer")</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/{id}",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/{id}"的GET请求，用来获取url中id值的User信息</span></span><br><span class="line">        <span class="comment">// url中的id可通过@PathVariable绑定到函数的参数中</span></span><br><span class="line">        <span class="keyword">return</span> userMap.get(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value="更新用户详细信息", notes="根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "id", value = "用户ID", required = true, dataType = "Integer"),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "user", value = "用户详细实体user", required = true, dataType = "User")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/{id}",method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id,<span class="meta">@ModelAttribute</span> User user)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/{id}"的PUT请求，用来更新User信息</span></span><br><span class="line">        User u = userMap.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        userMap.put(id,u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value="删除用户", notes="根据url的id来指定删除对象")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = "id", value = "用户ID", required = true, dataType = "Integer")</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/{id}",method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">        <span class="comment">// 处理"/users/{id}"的PUT请求，用来更新User信息</span></span><br><span class="line">        userMap.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Web应用的统一异常处理"><a href="#Web应用的统一异常处理" class="headerlink" title="Web应用的统一异常处理"></a>Web应用的统一异常处理</h1><h1 id="Java-8时间日期API（LocalDate等）的序列化问题"><a href="#Java-8时间日期API（LocalDate等）的序列化问题" class="headerlink" title="Java 8时间日期API（LocalDate等）的序列化问题"></a>Java 8时间日期API（LocalDate等）的序列化问题</h1><h1 id="使用Spring-Security进行安全控制"><a href="#使用Spring-Security进行安全控制" class="headerlink" title="使用Spring Security进行安全控制"></a>使用Spring Security进行安全控制</h1><p>添加依赖</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line"><span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="attr">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Spring Security配置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Spring Security配置类WebSecurityConfig</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>,<span class="string">"/hello"</span>).permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .permitAll();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"user"</span>).password(<span class="string">"password"</span>).roles(<span class="string">"USER"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>通过<code>@EnableWebSecurity</code>注解开启Spring Security功能</li><li>继承<code>WebSecurityConfigurerAdapter</code>，并重写方法设置Web安全的细节</li><li><code>configure(HttpSecurity http)</code>方法<ul><li>通过<code>authorizeRequests()</code>定义哪些URL需要被保护、哪些不需要保护</li><li>通过<code>loginPage()</code>定义当需要登录时，转到的登录页面</li></ul></li><li><code>configureGlobal(AuthenticationManagerBuilder auth)</code>方法，在内存中创建了一个用户，该用户的名称为user，密码为password，用户角色为USER。</li></ul><h1 id="使用JdbcTemplate访问数据库"><a href="#使用JdbcTemplate访问数据库" class="headerlink" title="使用JdbcTemplate访问数据库"></a>使用JdbcTemplate访问数据库</h1><h1 id="使用Spring-data-jpa让数据访问更简单、更优雅"><a href="#使用Spring-data-jpa让数据访问更简单、更优雅" class="headerlink" title="使用Spring-data-jpa让数据访问更简单、更优雅"></a>使用Spring-data-jpa让数据访问更简单、更优雅</h1><h1 id="多数据源配置与使用"><a href="#多数据源配置与使用" class="headerlink" title="多数据源配置与使用"></a>多数据源配置与使用</h1><h1 id="使用Flyway来管理数据库版本"><a href="#使用Flyway来管理数据库版本" class="headerlink" title="使用Flyway来管理数据库版本"></a>使用Flyway来管理数据库版本</h1><h1 id="使用LDAP来统一管理用户信息"><a href="#使用LDAP来统一管理用户信息" class="headerlink" title="使用LDAP来统一管理用户信息"></a>使用LDAP来统一管理用户信息</h1><h1 id="Spring-Boot中的事务管理"><a href="#Spring-Boot中的事务管理" class="headerlink" title="Spring Boot中的事务管理"></a>Spring Boot中的事务管理</h1><h1 id="使用Redis做集中式缓存"><a href="#使用Redis做集中式缓存" class="headerlink" title="使用Redis做集中式缓存"></a><a href="http://blog.didispace.com/springbootcache2/">使用Redis做集中式缓存</a></h1>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
